
Buff_SU_V.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007740  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  08007850  08007850  00017850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007c88  08007c88  00017c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007c8c  08007c8c  00017c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  20000000  08007c90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000045c  200001dc  08007e6c  000201dc  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000638  08007e6c  00020638  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012aad  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000024f5  00000000  00000000  00032cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001178  00000000  00000000  000351a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000010d8  00000000  00000000  00036320  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00008c2d  00000000  00000000  000373f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004ea8  00000000  00000000  00040025  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00044ecd  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000057f4  00000000  00000000  00044f4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007838 	.word	0x08007838

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08007838 	.word	0x08007838

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <_write>:
volatile uint8_t debug_level;


// printf redirection to UART1
int _write(int file, char *ptr, int len)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, len+1);  // debug uart
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3301      	adds	r3, #1
 8000a94:	68b9      	ldr	r1, [r7, #8]
 8000a96:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <_write+0x28>)
 8000a98:	f003 fdd3 	bl	8004642 <HAL_UART_Transmit>
    return len;
 8000a9c:	687b      	ldr	r3, [r7, #4]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000554 	.word	0x20000554

08000aac <HAL_UART_RxCpltCallback>:
}

// Debug UART RX

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_IT(&huart1, uart_rx_buf, RX_BUF_SIZE);  // Interrupt start Uart RX
 8000ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ab8:	4903      	ldr	r1, [pc, #12]	; (8000ac8 <HAL_UART_RxCpltCallback+0x1c>)
 8000aba:	4804      	ldr	r0, [pc, #16]	; (8000acc <HAL_UART_RxCpltCallback+0x20>)
 8000abc:	f003 fe52 	bl	8004764 <HAL_UART_Receive_IT>
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2000023c 	.word	0x2000023c
 8000acc:	20000554 	.word	0x20000554

08000ad0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
    HAL_UART_RxCpltCallback(huart);
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff ffe7 	bl	8000aac <HAL_UART_RxCpltCallback>
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <UART_has_char>:

uint16_t UART_has_char()      // Return number of bytes in buffer
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
    return (huart1.RxXferSize-huart1.RxXferCount+RX_BUF_SIZE-uart_rxtail) % RX_BUF_SIZE;
 8000aec:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <UART_has_char+0x34>)
 8000aee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <UART_has_char+0x34>)
 8000af4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000afe:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <UART_has_char+0x38>)
 8000b00:	8812      	ldrh	r2, [r2, #0]
 8000b02:	1a9b      	subs	r3, r3, r2
 8000b04:	425a      	negs	r2, r3
 8000b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000b0e:	bf58      	it	pl
 8000b10:	4253      	negpl	r3, r2
 8000b12:	b29b      	uxth	r3, r3
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr
 8000b1c:	20000554 	.word	0x20000554
 8000b20:	20000238 	.word	0x20000238

08000b24 <UART_receive>:

uint8_t UART_receive()       // Receive byte from buffer
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
    uint8_t tmp = uart_rx_buf[uart_rxtail++];
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <UART_receive+0x38>)
 8000b2c:	881b      	ldrh	r3, [r3, #0]
 8000b2e:	1c5a      	adds	r2, r3, #1
 8000b30:	b291      	uxth	r1, r2
 8000b32:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <UART_receive+0x38>)
 8000b34:	8011      	strh	r1, [r2, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <UART_receive+0x3c>)
 8000b3a:	5c9b      	ldrb	r3, [r3, r2]
 8000b3c:	71fb      	strb	r3, [r7, #7]
    if(uart_rxtail >= RX_BUF_SIZE) uart_rxtail = 0;
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <UART_receive+0x38>)
 8000b40:	881b      	ldrh	r3, [r3, #0]
 8000b42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b46:	d302      	bcc.n	8000b4e <UART_receive+0x2a>
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <UART_receive+0x38>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	801a      	strh	r2, [r3, #0]
    return tmp;
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000238 	.word	0x20000238
 8000b60:	2000023c 	.word	0x2000023c

08000b64 <CLI>:

void CLI() {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
    int len = UART_has_char();
 8000b6a:	f7ff ffbd 	bl	8000ae8 <UART_has_char>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	603b      	str	r3, [r7, #0]
    if(len) { for(int i=0; i<len; ++i) CLI_proc(UART_receive()); }
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d00f      	beq.n	8000b98 <CLI+0x34>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	e008      	b.n	8000b90 <CLI+0x2c>
 8000b7e:	f7ff ffd1 	bl	8000b24 <UART_receive>
 8000b82:	4603      	mov	r3, r0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 f8c1 	bl	8000d0c <CLI_proc>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	dbf2      	blt.n	8000b7e <CLI+0x1a>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <help>:

void help()
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	printf("\r\n---CLI--- Buff SU v0.1 \r\n");
 8000ba4:	4808      	ldr	r0, [pc, #32]	; (8000bc8 <help+0x28>)
 8000ba6:	f004 ff7b 	bl	8005aa0 <puts>
	printf("?,help - Show help\r\n");
 8000baa:	4808      	ldr	r0, [pc, #32]	; (8000bcc <help+0x2c>)
 8000bac:	f004 ff78 	bl	8005aa0 <puts>
	printf("debug 0..2      0 - off, 1 - LTC4015 registers, 2 - voltage & current\r\n");
 8000bb0:	4807      	ldr	r0, [pc, #28]	; (8000bd0 <help+0x30>)
 8000bb2:	f004 ff75 	bl	8005aa0 <puts>
	printf("charger stop/start\r\n");
 8000bb6:	4807      	ldr	r0, [pc, #28]	; (8000bd4 <help+0x34>)
 8000bb8:	f004 ff72 	bl	8005aa0 <puts>
	printf("-------\r\n");
 8000bbc:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <help+0x38>)
 8000bbe:	f004 ff6f 	bl	8005aa0 <puts>
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	08007850 	.word	0x08007850
 8000bcc:	0800786c 	.word	0x0800786c
 8000bd0:	08007880 	.word	0x08007880
 8000bd4:	080078c8 	.word	0x080078c8
 8000bd8:	080078dc 	.word	0x080078dc

08000bdc <find>:

char * find(const char *arg2)							// find token in cmdline
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	int i,j,k;
	for(i=0; clibuf[i]; i++)
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	e033      	b.n	8000c52 <find+0x76>
		for(j=i, k=0; tolower(clibuf[j]) == arg2[k]; j++, k++)
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	e011      	b.n	8000c18 <find+0x3c>
			if(!arg2[k+1]) return (clibuf+(j+1));
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d104      	bne.n	8000c0c <find+0x30>
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	3301      	adds	r3, #1
 8000c06:	4a18      	ldr	r2, [pc, #96]	; (8000c68 <find+0x8c>)
 8000c08:	4413      	add	r3, r2
 8000c0a:	e029      	b.n	8000c60 <find+0x84>
		for(j=i, k=0; tolower(clibuf[j]) == arg2[k]; j++, k++)
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	3301      	adds	r3, #1
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	4a13      	ldr	r2, [pc, #76]	; (8000c68 <find+0x8c>)
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	72fb      	strb	r3, [r7, #11]
 8000c22:	f004 fa3f 	bl	80050a4 <__locale_ctype_ptr>
 8000c26:	4602      	mov	r2, r0
 8000c28:	7afb      	ldrb	r3, [r7, #11]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	4413      	add	r3, r2
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	f003 0303 	and.w	r3, r3, #3
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d102      	bne.n	8000c3e <find+0x62>
 8000c38:	7afb      	ldrb	r3, [r7, #11]
 8000c3a:	3320      	adds	r3, #32
 8000c3c:	e000      	b.n	8000c40 <find+0x64>
 8000c3e:	7afb      	ldrb	r3, [r7, #11]
 8000c40:	68fa      	ldr	r2, [r7, #12]
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	440a      	add	r2, r1
 8000c46:	7812      	ldrb	r2, [r2, #0]
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d0d3      	beq.n	8000bf4 <find+0x18>
	for(i=0; clibuf[i]; i++)
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	4a05      	ldr	r2, [pc, #20]	; (8000c68 <find+0x8c>)
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	4413      	add	r3, r2
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1c5      	bne.n	8000bea <find+0xe>
	return NULL;
 8000c5e:	2300      	movs	r3, #0
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	200001f8 	.word	0x200001f8

08000c6c <getval>:

char * getval(char *p, int32_t *val, int32_t min, int32_t max)		// get s32 value from cmdline
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
 8000c78:	603b      	str	r3, [r7, #0]
	int32_t tmp = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
	if(*p == ' ') p++;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b20      	cmp	r3, #32
 8000c84:	d102      	bne.n	8000c8c <getval+0x20>
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
	uint8_t sign = (*p == '-') ? 1:0;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b2d      	cmp	r3, #45	; 0x2d
 8000c92:	bf0c      	ite	eq
 8000c94:	2301      	moveq	r3, #1
 8000c96:	2300      	movne	r3, #0
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	74fb      	strb	r3, [r7, #19]
	while(*p)
 8000c9c:	e016      	b.n	8000ccc <getval+0x60>
	{
		if(*p >= '0' && *p <= '9') {tmp *= 10; tmp += *p - '0'; p++;}
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	2b2f      	cmp	r3, #47	; 0x2f
 8000ca4:	d916      	bls.n	8000cd4 <getval+0x68>
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b39      	cmp	r3, #57	; 0x39
 8000cac:	d812      	bhi.n	8000cd4 <getval+0x68>
 8000cae:	697a      	ldr	r2, [r7, #20]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	4413      	add	r3, r2
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	3b30      	subs	r3, #48	; 0x30
 8000cc0:	697a      	ldr	r2, [r7, #20]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	617b      	str	r3, [r7, #20]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
	while(*p)
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d1e4      	bne.n	8000c9e <getval+0x32>
		else break;
	}
	if(sign) tmp = -tmp;
 8000cd4:	7cfb      	ldrb	r3, [r7, #19]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d002      	beq.n	8000ce0 <getval+0x74>
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	425b      	negs	r3, r3
 8000cde:	617b      	str	r3, [r7, #20]
	if(tmp >= min && tmp <= max) *val = tmp; else printf("Bad value\r\n");
 8000ce0:	697a      	ldr	r2, [r7, #20]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	db07      	blt.n	8000cf8 <getval+0x8c>
 8000ce8:	697a      	ldr	r2, [r7, #20]
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	dc03      	bgt.n	8000cf8 <getval+0x8c>
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	697a      	ldr	r2, [r7, #20]
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	e002      	b.n	8000cfe <getval+0x92>
 8000cf8:	4803      	ldr	r0, [pc, #12]	; (8000d08 <getval+0x9c>)
 8000cfa:	f004 fed1 	bl	8005aa0 <puts>
	return p;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	080078e8 	.word	0x080078e8

08000d0c <CLI_proc>:
    *val = tmp;
    return p;
}

void CLI_proc(char ch)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
	char *p;
	if(cliptr < sizeof(clibuf)) clibuf[cliptr++] = ch;
 8000d16:	4b40      	ldr	r3, [pc, #256]	; (8000e18 <CLI_proc+0x10c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b1f      	cmp	r3, #31
 8000d1c:	d807      	bhi.n	8000d2e <CLI_proc+0x22>
 8000d1e:	4b3e      	ldr	r3, [pc, #248]	; (8000e18 <CLI_proc+0x10c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	1c5a      	adds	r2, r3, #1
 8000d24:	493c      	ldr	r1, [pc, #240]	; (8000e18 <CLI_proc+0x10c>)
 8000d26:	600a      	str	r2, [r1, #0]
 8000d28:	493c      	ldr	r1, [pc, #240]	; (8000e1c <CLI_proc+0x110>)
 8000d2a:	79fa      	ldrb	r2, [r7, #7]
 8000d2c:	54ca      	strb	r2, [r1, r3]
	if(ch == 10)	// LF
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	2b0a      	cmp	r3, #10
 8000d32:	d16d      	bne.n	8000e10 <CLI_proc+0x104>
	{
	    if(clibuf[cliptr-1] == 13) cliptr--;
 8000d34:	4b38      	ldr	r3, [pc, #224]	; (8000e18 <CLI_proc+0x10c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	4a38      	ldr	r2, [pc, #224]	; (8000e1c <CLI_proc+0x110>)
 8000d3c:	5cd3      	ldrb	r3, [r2, r3]
 8000d3e:	2b0d      	cmp	r3, #13
 8000d40:	d104      	bne.n	8000d4c <CLI_proc+0x40>
 8000d42:	4b35      	ldr	r3, [pc, #212]	; (8000e18 <CLI_proc+0x10c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	4a33      	ldr	r2, [pc, #204]	; (8000e18 <CLI_proc+0x10c>)
 8000d4a:	6013      	str	r3, [r2, #0]
		memset(clibuf+cliptr, 0, sizeof(clibuf)-cliptr);
 8000d4c:	4b32      	ldr	r3, [pc, #200]	; (8000e18 <CLI_proc+0x10c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b32      	ldr	r3, [pc, #200]	; (8000e1c <CLI_proc+0x110>)
 8000d54:	18d0      	adds	r0, r2, r3
 8000d56:	4b30      	ldr	r3, [pc, #192]	; (8000e18 <CLI_proc+0x10c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f1c3 0320 	rsb	r3, r3, #32
 8000d5e:	461a      	mov	r2, r3
 8000d60:	2100      	movs	r1, #0
 8000d62:	f004 f9bf 	bl	80050e4 <memset>
		cliptr = 0;
 8000d66:	4b2c      	ldr	r3, [pc, #176]	; (8000e18 <CLI_proc+0x10c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
// Main commands ------------------------------------------------------------------------------
		if(find("?")==clibuf+1 || find("help")==clibuf+4)	{help(); return;}
 8000d6c:	482c      	ldr	r0, [pc, #176]	; (8000e20 <CLI_proc+0x114>)
 8000d6e:	f7ff ff35 	bl	8000bdc <find>
 8000d72:	4602      	mov	r2, r0
 8000d74:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <CLI_proc+0x118>)
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d006      	beq.n	8000d88 <CLI_proc+0x7c>
 8000d7a:	482b      	ldr	r0, [pc, #172]	; (8000e28 <CLI_proc+0x11c>)
 8000d7c:	f7ff ff2e 	bl	8000bdc <find>
 8000d80:	4602      	mov	r2, r0
 8000d82:	4b2a      	ldr	r3, [pc, #168]	; (8000e2c <CLI_proc+0x120>)
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d102      	bne.n	8000d8e <CLI_proc+0x82>
 8000d88:	f7ff ff0a 	bl	8000ba0 <help>
 8000d8c:	e040      	b.n	8000e10 <CLI_proc+0x104>
// ................................................................................
        if((p = find("debug ")))
 8000d8e:	4828      	ldr	r0, [pc, #160]	; (8000e30 <CLI_proc+0x124>)
 8000d90:	f7ff ff24 	bl	8000bdc <find>
 8000d94:	60f8      	str	r0, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d019      	beq.n	8000dd0 <CLI_proc+0xc4>
        {
            int32_t tmp = -1;
 8000d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000da0:	60bb      	str	r3, [r7, #8]
            getval(p, &tmp, 0, 2);
 8000da2:	f107 0108 	add.w	r1, r7, #8
 8000da6:	2302      	movs	r3, #2
 8000da8:	2200      	movs	r2, #0
 8000daa:	68f8      	ldr	r0, [r7, #12]
 8000dac:	f7ff ff5e 	bl	8000c6c <getval>
            if(tmp >= 0)
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	db2b      	blt.n	8000e0e <CLI_proc+0x102>
            {
                debug_level = tmp;
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <CLI_proc+0x128>)
 8000dbc:	701a      	strb	r2, [r3, #0]
                printf("Debug: %u\r\n", debug_level);
 8000dbe:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <CLI_proc+0x128>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	481c      	ldr	r0, [pc, #112]	; (8000e38 <CLI_proc+0x12c>)
 8000dc8:	f004 fdf6 	bl	80059b8 <iprintf>
            }
            return;
 8000dcc:	bf00      	nop
 8000dce:	e01e      	b.n	8000e0e <CLI_proc+0x102>
        }

        p = find("charger ");           // set commands
 8000dd0:	481a      	ldr	r0, [pc, #104]	; (8000e3c <CLI_proc+0x130>)
 8000dd2:	f7ff ff03 	bl	8000bdc <find>
 8000dd6:	60f8      	str	r0, [r7, #12]
        if(p == clibuf+8)
 8000dd8:	4a19      	ldr	r2, [pc, #100]	; (8000e40 <CLI_proc+0x134>)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d117      	bne.n	8000e10 <CLI_proc+0x104>
        {
            if((p = find("start")))
 8000de0:	4818      	ldr	r0, [pc, #96]	; (8000e44 <CLI_proc+0x138>)
 8000de2:	f7ff fefb 	bl	8000bdc <find>
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d003      	beq.n	8000df6 <CLI_proc+0xea>
            {
            	printf("Start charging\r\n");
 8000dee:	4816      	ldr	r0, [pc, #88]	; (8000e48 <CLI_proc+0x13c>)
 8000df0:	f004 fe56 	bl	8005aa0 <puts>
 //           	start_charging();
                return;
 8000df4:	e00c      	b.n	8000e10 <CLI_proc+0x104>
            }
            if((p = find("stop")))
 8000df6:	4815      	ldr	r0, [pc, #84]	; (8000e4c <CLI_proc+0x140>)
 8000df8:	f7ff fef0 	bl	8000bdc <find>
 8000dfc:	60f8      	str	r0, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d005      	beq.n	8000e10 <CLI_proc+0x104>
            {
            	printf("Stop charging\r\n");
 8000e04:	4812      	ldr	r0, [pc, #72]	; (8000e50 <CLI_proc+0x144>)
 8000e06:	f004 fe4b 	bl	8005aa0 <puts>
 //           	stop_charging();
                return;
 8000e0a:	bf00      	nop
 8000e0c:	e000      	b.n	8000e10 <CLI_proc+0x104>
            return;
 8000e0e:	bf00      	nop
            }

        }
	}
}
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000218 	.word	0x20000218
 8000e1c:	200001f8 	.word	0x200001f8
 8000e20:	0800790c 	.word	0x0800790c
 8000e24:	200001f9 	.word	0x200001f9
 8000e28:	08007910 	.word	0x08007910
 8000e2c:	200001fc 	.word	0x200001fc
 8000e30:	08007918 	.word	0x08007918
 8000e34:	2000023a 	.word	0x2000023a
 8000e38:	08007920 	.word	0x08007920
 8000e3c:	0800792c 	.word	0x0800792c
 8000e40:	20000200 	.word	0x20000200
 8000e44:	08007938 	.word	0x08007938
 8000e48:	08007940 	.word	0x08007940
 8000e4c:	08007950 	.word	0x08007950
 8000e50:	08007958 	.word	0x08007958

08000e54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e58:	f000 ff7a 	bl	8001d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e5c:	f000 f832 	bl	8000ec4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e60:	f000 fa78 	bl	8001354 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e64:	f000 fa50 	bl	8001308 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e68:	f000 f88a 	bl	8000f80 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000e6c:	f000 f948 	bl	8001100 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000e70:	f000 f9f6 	bl	8001260 <MX_USART1_UART_Init>
  HAL_UART_RxCpltCallback(&huart1);
 8000e74:	4810      	ldr	r0, [pc, #64]	; (8000eb8 <main+0x64>)
 8000e76:	f7ff fe19 	bl	8000aac <HAL_UART_RxCpltCallback>
  MX_USART3_UART_Init();
 8000e7a:	f000 fa1b 	bl	80012b4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000e7e:	f000 f96d 	bl	800115c <MX_TIM2_Init>
  PWM_Init_Timers();
 8000e82:	f000 fb67 	bl	8001554 <PWM_Init_Timers>
//  MX_IWDG_Init();
  /* USER CODE BEGIN 2 */
  POWER_ON();
 8000e86:	2201      	movs	r2, #1
 8000e88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e8c:	480b      	ldr	r0, [pc, #44]	; (8000ebc <main+0x68>)
 8000e8e:	f001 fe61 	bl	8002b54 <HAL_GPIO_WritePin>
  printf("Initializing ...\r\n");
 8000e92:	480b      	ldr	r0, [pc, #44]	; (8000ec0 <main+0x6c>)
 8000e94:	f004 fe04 	bl	8005aa0 <puts>
  /* USER CODE END 2 */
  ledSweepStat(20,0xFFFF,15);
 8000e98:	220f      	movs	r2, #15
 8000e9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e9e:	2014      	movs	r0, #20
 8000ea0:	f000 fb38 	bl	8001514 <ledSweepStat>
  ledSweepPwr(5,0xFFFF,30);
 8000ea4:	221e      	movs	r2, #30
 8000ea6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000eaa:	2005      	movs	r0, #5
 8000eac:	f000 fb12 	bl	80014d4 <ledSweepPwr>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  CLI();
 8000eb0:	f7ff fe58 	bl	8000b64 <CLI>
 8000eb4:	e7fc      	b.n	8000eb0 <main+0x5c>
 8000eb6:	bf00      	nop
 8000eb8:	20000554 	.word	0x20000554
 8000ebc:	40010c00 	.word	0x40010c00
 8000ec0:	08007968 	.word	0x08007968

08000ec4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b094      	sub	sp, #80	; 0x50
 8000ec8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ece:	2228      	movs	r2, #40	; 0x28
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f004 f906 	bl	80050e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000ef4:	2309      	movs	r3, #9
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ef8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f02:	2301      	movs	r3, #1
 8000f04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f06:	2301      	movs	r3, #1
 8000f08:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f14:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f18:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f001 ff68 	bl	8002df4 <HAL_RCC_OscConfig>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000f2a:	f000 faa7 	bl	800147c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f2e:	230f      	movs	r3, #15
 8000f30:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f32:	2302      	movs	r3, #2
 8000f34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f3e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f40:	2300      	movs	r3, #0
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	2102      	movs	r1, #2
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f002 f9d2 	bl	80032f4 <HAL_RCC_ClockConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f56:	f000 fa91 	bl	800147c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f62:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	4618      	mov	r0, r3
 8000f68:	f002 fb60 	bl	800362c <HAL_RCCEx_PeriphCLKConfig>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000f72:	f000 fa83 	bl	800147c <Error_Handler>
  }
}
 8000f76:	bf00      	nop
 8000f78:	3750      	adds	r7, #80	; 0x50
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f90:	4b59      	ldr	r3, [pc, #356]	; (80010f8 <MX_ADC1_Init+0x178>)
 8000f92:	4a5a      	ldr	r2, [pc, #360]	; (80010fc <MX_ADC1_Init+0x17c>)
 8000f94:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f96:	4b58      	ldr	r3, [pc, #352]	; (80010f8 <MX_ADC1_Init+0x178>)
 8000f98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f9c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f9e:	4b56      	ldr	r3, [pc, #344]	; (80010f8 <MX_ADC1_Init+0x178>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa4:	4b54      	ldr	r3, [pc, #336]	; (80010f8 <MX_ADC1_Init+0x178>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000faa:	4b53      	ldr	r3, [pc, #332]	; (80010f8 <MX_ADC1_Init+0x178>)
 8000fac:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000fb0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fb2:	4b51      	ldr	r3, [pc, #324]	; (80010f8 <MX_ADC1_Init+0x178>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 10;
 8000fb8:	4b4f      	ldr	r3, [pc, #316]	; (80010f8 <MX_ADC1_Init+0x178>)
 8000fba:	220a      	movs	r2, #10
 8000fbc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fbe:	484e      	ldr	r0, [pc, #312]	; (80010f8 <MX_ADC1_Init+0x178>)
 8000fc0:	f000 ff28 	bl	8001e14 <HAL_ADC_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000fca:	f000 fa57 	bl	800147c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000fce:	2310      	movs	r3, #16
 8000fd0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000fd6:	2307      	movs	r3, #7
 8000fd8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4846      	ldr	r0, [pc, #280]	; (80010f8 <MX_ADC1_Init+0x178>)
 8000fe0:	f000 fff0 	bl	8001fc4 <HAL_ADC_ConfigChannel>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000fea:	f000 fa47 	bl	800147c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	483e      	ldr	r0, [pc, #248]	; (80010f8 <MX_ADC1_Init+0x178>)
 8001000:	f000 ffe0 	bl	8001fc4 <HAL_ADC_ConfigChannel>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800100a:	f000 fa37 	bl	800147c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800100e:	2302      	movs	r3, #2
 8001010:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001012:	2303      	movs	r3, #3
 8001014:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	4619      	mov	r1, r3
 800101a:	4837      	ldr	r0, [pc, #220]	; (80010f8 <MX_ADC1_Init+0x178>)
 800101c:	f000 ffd2 	bl	8001fc4 <HAL_ADC_ConfigChannel>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001026:	f000 fa29 	bl	800147c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800102a:	2303      	movs	r3, #3
 800102c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800102e:	2304      	movs	r3, #4
 8001030:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	4619      	mov	r1, r3
 8001036:	4830      	ldr	r0, [pc, #192]	; (80010f8 <MX_ADC1_Init+0x178>)
 8001038:	f000 ffc4 	bl	8001fc4 <HAL_ADC_ConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001042:	f000 fa1b 	bl	800147c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001046:	2304      	movs	r3, #4
 8001048:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800104a:	2305      	movs	r3, #5
 800104c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	4619      	mov	r1, r3
 8001052:	4829      	ldr	r0, [pc, #164]	; (80010f8 <MX_ADC1_Init+0x178>)
 8001054:	f000 ffb6 	bl	8001fc4 <HAL_ADC_ConfigChannel>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800105e:	f000 fa0d 	bl	800147c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001062:	2305      	movs	r3, #5
 8001064:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001066:	2306      	movs	r3, #6
 8001068:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	4619      	mov	r1, r3
 800106e:	4822      	ldr	r0, [pc, #136]	; (80010f8 <MX_ADC1_Init+0x178>)
 8001070:	f000 ffa8 	bl	8001fc4 <HAL_ADC_ConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800107a:	f000 f9ff 	bl	800147c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800107e:	2306      	movs	r3, #6
 8001080:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001082:	2307      	movs	r3, #7
 8001084:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	4619      	mov	r1, r3
 800108a:	481b      	ldr	r0, [pc, #108]	; (80010f8 <MX_ADC1_Init+0x178>)
 800108c:	f000 ff9a 	bl	8001fc4 <HAL_ADC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8001096:	f000 f9f1 	bl	800147c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800109a:	2307      	movs	r3, #7
 800109c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800109e:	2308      	movs	r3, #8
 80010a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	4619      	mov	r1, r3
 80010a6:	4814      	ldr	r0, [pc, #80]	; (80010f8 <MX_ADC1_Init+0x178>)
 80010a8:	f000 ff8c 	bl	8001fc4 <HAL_ADC_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 80010b2:	f000 f9e3 	bl	800147c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80010b6:	2308      	movs	r3, #8
 80010b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80010ba:	2309      	movs	r3, #9
 80010bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	4619      	mov	r1, r3
 80010c2:	480d      	ldr	r0, [pc, #52]	; (80010f8 <MX_ADC1_Init+0x178>)
 80010c4:	f000 ff7e 	bl	8001fc4 <HAL_ADC_ConfigChannel>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 80010ce:	f000 f9d5 	bl	800147c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80010d2:	2309      	movs	r3, #9
 80010d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80010d6:	230a      	movs	r3, #10
 80010d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	4619      	mov	r1, r3
 80010de:	4806      	ldr	r0, [pc, #24]	; (80010f8 <MX_ADC1_Init+0x178>)
 80010e0:	f000 ff70 	bl	8001fc4 <HAL_ADC_ConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 80010ea:	f000 f9c7 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000524 	.word	0x20000524
 80010fc:	40012400 	.word	0x40012400

08001100 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <MX_I2C1_Init+0x50>)
 8001106:	4a13      	ldr	r2, [pc, #76]	; (8001154 <MX_I2C1_Init+0x54>)
 8001108:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <MX_I2C1_Init+0x50>)
 800110c:	4a12      	ldr	r2, [pc, #72]	; (8001158 <MX_I2C1_Init+0x58>)
 800110e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <MX_I2C1_Init+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <MX_I2C1_Init+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_I2C1_Init+0x50>)
 800111e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001122:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001124:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <MX_I2C1_Init+0x50>)
 8001126:	2200      	movs	r2, #0
 8001128:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_I2C1_Init+0x50>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001130:	4b07      	ldr	r3, [pc, #28]	; (8001150 <MX_I2C1_Init+0x50>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <MX_I2C1_Init+0x50>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <MX_I2C1_Init+0x50>)
 800113e:	f001 fd21 	bl	8002b84 <HAL_I2C_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001148:	f000 f998 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000480 	.word	0x20000480
 8001154:	40005400 	.word	0x40005400
 8001158:	00061a80 	.word	0x00061a80

0800115c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08e      	sub	sp, #56	; 0x38
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001162:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001170:	f107 0320 	add.w	r3, r7, #32
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
 8001188:	615a      	str	r2, [r3, #20]
 800118a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800118c:	4b33      	ldr	r3, [pc, #204]	; (800125c <MX_TIM2_Init+0x100>)
 800118e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001192:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 537;
 8001194:	4b31      	ldr	r3, [pc, #196]	; (800125c <MX_TIM2_Init+0x100>)
 8001196:	f240 2219 	movw	r2, #537	; 0x219
 800119a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119c:	4b2f      	ldr	r3, [pc, #188]	; (800125c <MX_TIM2_Init+0x100>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 256;
 80011a2:	4b2e      	ldr	r3, [pc, #184]	; (800125c <MX_TIM2_Init+0x100>)
 80011a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011aa:	4b2c      	ldr	r3, [pc, #176]	; (800125c <MX_TIM2_Init+0x100>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b0:	4b2a      	ldr	r3, [pc, #168]	; (800125c <MX_TIM2_Init+0x100>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011b6:	4829      	ldr	r0, [pc, #164]	; (800125c <MX_TIM2_Init+0x100>)
 80011b8:	f002 faee 	bl	8003798 <HAL_TIM_Base_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80011c2:	f000 f95b 	bl	800147c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011d0:	4619      	mov	r1, r3
 80011d2:	4822      	ldr	r0, [pc, #136]	; (800125c <MX_TIM2_Init+0x100>)
 80011d4:	f002 fdf0 	bl	8003db8 <HAL_TIM_ConfigClockSource>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80011de:	f000 f94d 	bl	800147c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011e2:	481e      	ldr	r0, [pc, #120]	; (800125c <MX_TIM2_Init+0x100>)
 80011e4:	f002 fb27 	bl	8003836 <HAL_TIM_PWM_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80011ee:	f000 f945 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f2:	2300      	movs	r3, #0
 80011f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011fa:	f107 0320 	add.w	r3, r7, #32
 80011fe:	4619      	mov	r1, r3
 8001200:	4816      	ldr	r0, [pc, #88]	; (800125c <MX_TIM2_Init+0x100>)
 8001202:	f003 f961 	bl	80044c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800120c:	f000 f936 	bl	800147c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001210:	2360      	movs	r3, #96	; 0x60
 8001212:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	2200      	movs	r2, #0
 8001224:	4619      	mov	r1, r3
 8001226:	480d      	ldr	r0, [pc, #52]	; (800125c <MX_TIM2_Init+0x100>)
 8001228:	f002 fd08 	bl	8003c3c <HAL_TIM_PWM_ConfigChannel>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001232:	f000 f923 	bl	800147c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	2204      	movs	r2, #4
 800123a:	4619      	mov	r1, r3
 800123c:	4807      	ldr	r0, [pc, #28]	; (800125c <MX_TIM2_Init+0x100>)
 800123e:	f002 fcfd 	bl	8003c3c <HAL_TIM_PWM_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001248:	f000 f918 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800124c:	4803      	ldr	r0, [pc, #12]	; (800125c <MX_TIM2_Init+0x100>)
 800124e:	f000 fb7b 	bl	8001948 <HAL_TIM_MspPostInit>

}
 8001252:	bf00      	nop
 8001254:	3738      	adds	r7, #56	; 0x38
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200005dc 	.word	0x200005dc

08001260 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001266:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <MX_USART1_UART_Init+0x50>)
 8001268:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 800126c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001270:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001286:	220c      	movs	r2, #12
 8001288:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001298:	f003 f986 	bl	80045a8 <HAL_UART_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012a2:	f000 f8eb 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000554 	.word	0x20000554
 80012b0:	40013800 	.word	0x40013800

080012b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <MX_USART3_UART_Init+0x4c>)
 80012ba:	4a12      	ldr	r2, [pc, #72]	; (8001304 <MX_USART3_UART_Init+0x50>)
 80012bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <MX_USART3_UART_Init+0x4c>)
 80012c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <MX_USART3_UART_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <MX_USART3_UART_Init+0x4c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <MX_USART3_UART_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <MX_USART3_UART_Init+0x4c>)
 80012da:	220c      	movs	r2, #12
 80012dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <MX_USART3_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <MX_USART3_UART_Init+0x4c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_USART3_UART_Init+0x4c>)
 80012ec:	f003 f95c 	bl	80045a8 <HAL_UART_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80012f6:	f000 f8c1 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2000043c 	.word	0x2000043c
 8001304:	40004800 	.word	0x40004800

08001308 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800130e:	4a10      	ldr	r2, [pc, #64]	; (8001350 <MX_DMA_Init+0x48>)
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <MX_DMA_Init+0x48>)
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6153      	str	r3, [r2, #20]
 800131a:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <MX_DMA_Init+0x48>)
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	200b      	movs	r0, #11
 800132c:	f001 f859 	bl	80023e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001330:	200b      	movs	r0, #11
 8001332:	f001 f872 	bl	800241a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	200c      	movs	r0, #12
 800133c:	f001 f851 	bl	80023e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001340:	200c      	movs	r0, #12
 8001342:	f001 f86a 	bl	800241a <HAL_NVIC_EnableIRQ>

}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000

08001354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135a:	f107 0310 	add.w	r3, r7, #16
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001368:	4a40      	ldr	r2, [pc, #256]	; (800146c <MX_GPIO_Init+0x118>)
 800136a:	4b40      	ldr	r3, [pc, #256]	; (800146c <MX_GPIO_Init+0x118>)
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	f043 0310 	orr.w	r3, r3, #16
 8001372:	6193      	str	r3, [r2, #24]
 8001374:	4b3d      	ldr	r3, [pc, #244]	; (800146c <MX_GPIO_Init+0x118>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	f003 0310 	and.w	r3, r3, #16
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001380:	4a3a      	ldr	r2, [pc, #232]	; (800146c <MX_GPIO_Init+0x118>)
 8001382:	4b3a      	ldr	r3, [pc, #232]	; (800146c <MX_GPIO_Init+0x118>)
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	f043 0320 	orr.w	r3, r3, #32
 800138a:	6193      	str	r3, [r2, #24]
 800138c:	4b37      	ldr	r3, [pc, #220]	; (800146c <MX_GPIO_Init+0x118>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	f003 0320 	and.w	r3, r3, #32
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001398:	4a34      	ldr	r2, [pc, #208]	; (800146c <MX_GPIO_Init+0x118>)
 800139a:	4b34      	ldr	r3, [pc, #208]	; (800146c <MX_GPIO_Init+0x118>)
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	f043 0304 	orr.w	r3, r3, #4
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	4b31      	ldr	r3, [pc, #196]	; (800146c <MX_GPIO_Init+0x118>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b0:	4a2e      	ldr	r2, [pc, #184]	; (800146c <MX_GPIO_Init+0x118>)
 80013b2:	4b2e      	ldr	r3, [pc, #184]	; (800146c <MX_GPIO_Init+0x118>)
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	f043 0308 	orr.w	r3, r3, #8
 80013ba:	6193      	str	r3, [r2, #24]
 80013bc:	4b2b      	ldr	r3, [pc, #172]	; (800146c <MX_GPIO_Init+0x118>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f003 0308 	and.w	r3, r3, #8
 80013c4:	603b      	str	r3, [r7, #0]
 80013c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _12V_SEL_Pin|MAIN_SW_Pin|RPI_OFF_Pin|LED_Pin, GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	f246 2104 	movw	r1, #25092	; 0x6204
 80013ce:	4828      	ldr	r0, [pc, #160]	; (8001470 <MX_GPIO_Init+0x11c>)
 80013d0:	f001 fbc0 	bl	8002b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzz_Pin|PS_ONOFF_Pin|_5V_SEL_Pin, GPIO_PIN_RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 80013da:	4826      	ldr	r0, [pc, #152]	; (8001474 <MX_GPIO_Init+0x120>)
 80013dc:	f001 fbba 	bl	8002b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80013e0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80013e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e6:	2303      	movs	r3, #3
 80013e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ea:	f107 0310 	add.w	r3, r7, #16
 80013ee:	4619      	mov	r1, r3
 80013f0:	4821      	ldr	r0, [pc, #132]	; (8001478 <MX_GPIO_Init+0x124>)
 80013f2:	f001 fa55 	bl	80028a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : _12V_SEL_Pin MAIN_SW_Pin RPI_OFF_Pin LED_Pin */
  GPIO_InitStruct.Pin = _12V_SEL_Pin|MAIN_SW_Pin|RPI_OFF_Pin|LED_Pin;
 80013f6:	f246 2304 	movw	r3, #25092	; 0x6204
 80013fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2302      	movs	r3, #2
 8001406:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001408:	f107 0310 	add.w	r3, r7, #16
 800140c:	4619      	mov	r1, r3
 800140e:	4818      	ldr	r0, [pc, #96]	; (8001470 <MX_GPIO_Init+0x11c>)
 8001410:	f001 fa46 	bl	80028a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PS_PG_Pin RPI_FB_Pin But_ONOFF_Pin SMBALERT_Pin */
  GPIO_InitStruct.Pin = PS_PG_Pin|RPI_FB_Pin|But_ONOFF_Pin|SMBALERT_Pin;
 8001414:	f249 0330 	movw	r3, #36912	; 0x9030
 8001418:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001422:	f107 0310 	add.w	r3, r7, #16
 8001426:	4619      	mov	r1, r3
 8001428:	4811      	ldr	r0, [pc, #68]	; (8001470 <MX_GPIO_Init+0x11c>)
 800142a:	f001 fa39 	bl	80028a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzz_Pin PS_ONOFF_Pin _5V_SEL_Pin */
  GPIO_InitStruct.Pin = Buzz_Pin|PS_ONOFF_Pin|_5V_SEL_Pin;
 800142e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001432:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001434:	2301      	movs	r3, #1
 8001436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2302      	movs	r3, #2
 800143e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	f107 0310 	add.w	r3, r7, #16
 8001444:	4619      	mov	r1, r3
 8001446:	480b      	ldr	r0, [pc, #44]	; (8001474 <MX_GPIO_Init+0x120>)
 8001448:	f001 fa2a 	bl	80028a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_Pin */
  GPIO_InitStruct.Pin = TP_Pin;
 800144c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001450:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001452:	2303      	movs	r3, #3
 8001454:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TP_GPIO_Port, &GPIO_InitStruct);
 8001456:	f107 0310 	add.w	r3, r7, #16
 800145a:	4619      	mov	r1, r3
 800145c:	4804      	ldr	r0, [pc, #16]	; (8001470 <MX_GPIO_Init+0x11c>)
 800145e:	f001 fa1f 	bl	80028a0 <HAL_GPIO_Init>

}
 8001462:	bf00      	nop
 8001464:	3720      	adds	r7, #32
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40021000 	.word	0x40021000
 8001470:	40010c00 	.word	0x40010c00
 8001474:	40010800 	.word	0x40010800
 8001478:	40011000 	.word	0x40011000

0800147c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001480:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001482:	e7fe      	b.n	8001482 <Error_Handler+0x6>

08001484 <setPwrLed>:
static const uint8_t bri_corr[]= {
   0, 1, 2, 3, 4, 5, 7, 9, 12, 15, 18, 22, 27, 32, 38, 44, 51, 58,
   67, 76, 86, 96, 108, 120, 134, 148, 163, 180, 197, 216, 235, 255 };

void setPwrLed(uint8_t bri)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, bri_corr[bri]);
 800148e:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <setPwrLed+0x20>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	79fa      	ldrb	r2, [r7, #7]
 8001494:	4904      	ldr	r1, [pc, #16]	; (80014a8 <setPwrLed+0x24>)
 8001496:	5c8a      	ldrb	r2, [r1, r2]
 8001498:	639a      	str	r2, [r3, #56]	; 0x38
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	200005dc 	.word	0x200005dc
 80014a8:	08007990 	.word	0x08007990

080014ac <setStatLed>:

void setStatLed(uint8_t bri)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, bri_corr[bri]);
 80014b6:	4b05      	ldr	r3, [pc, #20]	; (80014cc <setStatLed+0x20>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	79fa      	ldrb	r2, [r7, #7]
 80014bc:	4904      	ldr	r1, [pc, #16]	; (80014d0 <setStatLed+0x24>)
 80014be:	5c8a      	ldrb	r2, [r1, r2]
 80014c0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	200005dc 	.word	0x200005dc
 80014d0:	08007990 	.word	0x08007990

080014d4 <ledSweepPwr>:

void ledSweepPwr(uint16_t spd, uint16_t cnt, uint16_t wait)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	80fb      	strh	r3, [r7, #6]
 80014de:	460b      	mov	r3, r1
 80014e0:	80bb      	strh	r3, [r7, #4]
 80014e2:	4613      	mov	r3, r2
 80014e4:	807b      	strh	r3, [r7, #2]
    led_tim_pwr = spd;
 80014e6:	4a09      	ldr	r2, [pc, #36]	; (800150c <ledSweepPwr+0x38>)
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	8013      	strh	r3, [r2, #0]
    led_cycles_pwr = cnt | (wait<<16);
 80014ec:	887b      	ldrh	r3, [r7, #2]
 80014ee:	041b      	lsls	r3, r3, #16
 80014f0:	b21a      	sxth	r2, r3
 80014f2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	b21b      	sxth	r3, r3
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <ledSweepPwr+0x3c>)
 80014fe:	801a      	strh	r2, [r3, #0]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	2000062a 	.word	0x2000062a
 8001510:	20000628 	.word	0x20000628

08001514 <ledSweepStat>:

void ledSweepStat(uint16_t spd, uint16_t cnt, uint16_t wait)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	80fb      	strh	r3, [r7, #6]
 800151e:	460b      	mov	r3, r1
 8001520:	80bb      	strh	r3, [r7, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	807b      	strh	r3, [r7, #2]
    led_tim_stat = spd;
 8001526:	4a09      	ldr	r2, [pc, #36]	; (800154c <ledSweepStat+0x38>)
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	8013      	strh	r3, [r2, #0]
    led_cycles_stat = cnt | (wait<<16);
 800152c:	887b      	ldrh	r3, [r7, #2]
 800152e:	041b      	lsls	r3, r3, #16
 8001530:	b21a      	sxth	r2, r3
 8001532:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001536:	4313      	orrs	r3, r2
 8001538:	b21b      	sxth	r3, r3
 800153a:	b29a      	uxth	r2, r3
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <ledSweepStat+0x3c>)
 800153e:	801a      	strh	r2, [r3, #0]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	2000062c 	.word	0x2000062c
 8001550:	2000062e 	.word	0x2000062e

08001554 <PWM_Init_Timers>:

void PWM_Init_Timers()
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001558:	2100      	movs	r1, #0
 800155a:	4804      	ldr	r0, [pc, #16]	; (800156c <PWM_Init_Timers+0x18>)
 800155c:	f002 f9c4 	bl	80038e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001560:	2104      	movs	r1, #4
 8001562:	4802      	ldr	r0, [pc, #8]	; (800156c <PWM_Init_Timers+0x18>)
 8001564:	f002 f9c0 	bl	80038e8 <HAL_TIM_PWM_Start>
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200005dc 	.word	0x200005dc

08001570 <HAL_SYSTICK_Callback>:
   buzzer_time = tim;
   BUZZ_ON();
}

void HAL_SYSTICK_Callback()
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
	static uint32_t ledswppwr, ledlevpwr, ledswpstat, ledlevstat;

    if(buzzer_time) { if(--buzzer_time == 0) BUZZ_OFF(); }
 8001574:	4b5c      	ldr	r3, [pc, #368]	; (80016e8 <HAL_SYSTICK_Callback+0x178>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d00c      	beq.n	8001596 <HAL_SYSTICK_Callback+0x26>
 800157c:	4b5a      	ldr	r3, [pc, #360]	; (80016e8 <HAL_SYSTICK_Callback+0x178>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	3b01      	subs	r3, #1
 8001582:	4a59      	ldr	r2, [pc, #356]	; (80016e8 <HAL_SYSTICK_Callback+0x178>)
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d105      	bne.n	8001596 <HAL_SYSTICK_Callback+0x26>
 800158a:	2201      	movs	r2, #1
 800158c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001590:	4856      	ldr	r0, [pc, #344]	; (80016ec <HAL_SYSTICK_Callback+0x17c>)
 8001592:	f001 fadf 	bl	8002b54 <HAL_GPIO_WritePin>

    if(led_tim_pwr && ++ledswppwr >= led_tim_pwr)
 8001596:	4b56      	ldr	r3, [pc, #344]	; (80016f0 <HAL_SYSTICK_Callback+0x180>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d044      	beq.n	8001628 <HAL_SYSTICK_Callback+0xb8>
 800159e:	4b55      	ldr	r3, [pc, #340]	; (80016f4 <HAL_SYSTICK_Callback+0x184>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	3301      	adds	r3, #1
 80015a4:	4a53      	ldr	r2, [pc, #332]	; (80016f4 <HAL_SYSTICK_Callback+0x184>)
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	4b52      	ldr	r3, [pc, #328]	; (80016f4 <HAL_SYSTICK_Callback+0x184>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a50      	ldr	r2, [pc, #320]	; (80016f0 <HAL_SYSTICK_Callback+0x180>)
 80015ae:	8812      	ldrh	r2, [r2, #0]
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d339      	bcc.n	8001628 <HAL_SYSTICK_Callback+0xb8>
    {
        ledswppwr = 0;
 80015b4:	4b4f      	ldr	r3, [pc, #316]	; (80016f4 <HAL_SYSTICK_Callback+0x184>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
        if(++ledlevpwr >= 64 + (led_cycles_pwr>>16))
 80015ba:	4b4f      	ldr	r3, [pc, #316]	; (80016f8 <HAL_SYSTICK_Callback+0x188>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	3301      	adds	r3, #1
 80015c0:	4a4d      	ldr	r2, [pc, #308]	; (80016f8 <HAL_SYSTICK_Callback+0x188>)
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	4b4c      	ldr	r3, [pc, #304]	; (80016f8 <HAL_SYSTICK_Callback+0x188>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a4c      	ldr	r2, [pc, #304]	; (80016fc <HAL_SYSTICK_Callback+0x18c>)
 80015ca:	8812      	ldrh	r2, [r2, #0]
 80015cc:	1412      	asrs	r2, r2, #16
 80015ce:	3240      	adds	r2, #64	; 0x40
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d30f      	bcc.n	80015f4 <HAL_SYSTICK_Callback+0x84>
        {
            ledlevpwr = 0;
 80015d4:	4b48      	ldr	r3, [pc, #288]	; (80016f8 <HAL_SYSTICK_Callback+0x188>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
            led_cycles_pwr--;
 80015da:	4b48      	ldr	r3, [pc, #288]	; (80016fc <HAL_SYSTICK_Callback+0x18c>)
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	3b01      	subs	r3, #1
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	4b46      	ldr	r3, [pc, #280]	; (80016fc <HAL_SYSTICK_Callback+0x18c>)
 80015e4:	801a      	strh	r2, [r3, #0]
            if((led_cycles_pwr & 0xFFFF) == 0) led_tim_pwr = 0;
 80015e6:	4b45      	ldr	r3, [pc, #276]	; (80016fc <HAL_SYSTICK_Callback+0x18c>)
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d102      	bne.n	80015f4 <HAL_SYSTICK_Callback+0x84>
 80015ee:	4b40      	ldr	r3, [pc, #256]	; (80016f0 <HAL_SYSTICK_Callback+0x180>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	801a      	strh	r2, [r3, #0]
        }
        if(ledlevpwr>=64) setPwrLed(0); else setPwrLed((ledlevpwr<32) ? ledlevpwr : 63-ledlevpwr);
 80015f4:	4b40      	ldr	r3, [pc, #256]	; (80016f8 <HAL_SYSTICK_Callback+0x188>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b3f      	cmp	r3, #63	; 0x3f
 80015fa:	d903      	bls.n	8001604 <HAL_SYSTICK_Callback+0x94>
 80015fc:	2000      	movs	r0, #0
 80015fe:	f7ff ff41 	bl	8001484 <setPwrLed>
 8001602:	e01b      	b.n	800163c <HAL_SYSTICK_Callback+0xcc>
 8001604:	4b3c      	ldr	r3, [pc, #240]	; (80016f8 <HAL_SYSTICK_Callback+0x188>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b1f      	cmp	r3, #31
 800160a:	d906      	bls.n	800161a <HAL_SYSTICK_Callback+0xaa>
 800160c:	4b3a      	ldr	r3, [pc, #232]	; (80016f8 <HAL_SYSTICK_Callback+0x188>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001616:	b2db      	uxtb	r3, r3
 8001618:	e002      	b.n	8001620 <HAL_SYSTICK_Callback+0xb0>
 800161a:	4b37      	ldr	r3, [pc, #220]	; (80016f8 <HAL_SYSTICK_Callback+0x188>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	b2db      	uxtb	r3, r3
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff2f 	bl	8001484 <setPwrLed>
 8001626:	e009      	b.n	800163c <HAL_SYSTICK_Callback+0xcc>
     } else if(led_tim_pwr == 0) {ledswppwr=0; ledlevpwr=0;}
 8001628:	4b31      	ldr	r3, [pc, #196]	; (80016f0 <HAL_SYSTICK_Callback+0x180>)
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d105      	bne.n	800163c <HAL_SYSTICK_Callback+0xcc>
 8001630:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <HAL_SYSTICK_Callback+0x184>)
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	4b30      	ldr	r3, [pc, #192]	; (80016f8 <HAL_SYSTICK_Callback+0x188>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]

     if(led_tim_stat && ++ledswpstat >= led_tim_stat)
 800163c:	4b30      	ldr	r3, [pc, #192]	; (8001700 <HAL_SYSTICK_Callback+0x190>)
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d044      	beq.n	80016ce <HAL_SYSTICK_Callback+0x15e>
 8001644:	4b2f      	ldr	r3, [pc, #188]	; (8001704 <HAL_SYSTICK_Callback+0x194>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	3301      	adds	r3, #1
 800164a:	4a2e      	ldr	r2, [pc, #184]	; (8001704 <HAL_SYSTICK_Callback+0x194>)
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	4b2d      	ldr	r3, [pc, #180]	; (8001704 <HAL_SYSTICK_Callback+0x194>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a2b      	ldr	r2, [pc, #172]	; (8001700 <HAL_SYSTICK_Callback+0x190>)
 8001654:	8812      	ldrh	r2, [r2, #0]
 8001656:	4293      	cmp	r3, r2
 8001658:	d339      	bcc.n	80016ce <HAL_SYSTICK_Callback+0x15e>
     {
         ledswpstat = 0;
 800165a:	4b2a      	ldr	r3, [pc, #168]	; (8001704 <HAL_SYSTICK_Callback+0x194>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
         if(++ledlevstat >= 64 + (led_cycles_stat>>16))
 8001660:	4b29      	ldr	r3, [pc, #164]	; (8001708 <HAL_SYSTICK_Callback+0x198>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	3301      	adds	r3, #1
 8001666:	4a28      	ldr	r2, [pc, #160]	; (8001708 <HAL_SYSTICK_Callback+0x198>)
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	4b27      	ldr	r3, [pc, #156]	; (8001708 <HAL_SYSTICK_Callback+0x198>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a27      	ldr	r2, [pc, #156]	; (800170c <HAL_SYSTICK_Callback+0x19c>)
 8001670:	8812      	ldrh	r2, [r2, #0]
 8001672:	1412      	asrs	r2, r2, #16
 8001674:	3240      	adds	r2, #64	; 0x40
 8001676:	4293      	cmp	r3, r2
 8001678:	d30f      	bcc.n	800169a <HAL_SYSTICK_Callback+0x12a>
         {
             ledlevstat = 0;
 800167a:	4b23      	ldr	r3, [pc, #140]	; (8001708 <HAL_SYSTICK_Callback+0x198>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
             led_cycles_stat--;
 8001680:	4b22      	ldr	r3, [pc, #136]	; (800170c <HAL_SYSTICK_Callback+0x19c>)
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	3b01      	subs	r3, #1
 8001686:	b29a      	uxth	r2, r3
 8001688:	4b20      	ldr	r3, [pc, #128]	; (800170c <HAL_SYSTICK_Callback+0x19c>)
 800168a:	801a      	strh	r2, [r3, #0]
             if((led_cycles_stat & 0xFFFF) == 0) led_tim_stat = 0;
 800168c:	4b1f      	ldr	r3, [pc, #124]	; (800170c <HAL_SYSTICK_Callback+0x19c>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d102      	bne.n	800169a <HAL_SYSTICK_Callback+0x12a>
 8001694:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <HAL_SYSTICK_Callback+0x190>)
 8001696:	2200      	movs	r2, #0
 8001698:	801a      	strh	r2, [r3, #0]
         }
         if(ledlevstat>=64) setStatLed(0); else setStatLed((ledlevstat<32) ? ledlevstat : 63-ledlevstat);
 800169a:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <HAL_SYSTICK_Callback+0x198>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2b3f      	cmp	r3, #63	; 0x3f
 80016a0:	d903      	bls.n	80016aa <HAL_SYSTICK_Callback+0x13a>
 80016a2:	2000      	movs	r0, #0
 80016a4:	f7ff ff02 	bl	80014ac <setStatLed>
 80016a8:	e01c      	b.n	80016e4 <HAL_SYSTICK_Callback+0x174>
 80016aa:	4b17      	ldr	r3, [pc, #92]	; (8001708 <HAL_SYSTICK_Callback+0x198>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b1f      	cmp	r3, #31
 80016b0:	d906      	bls.n	80016c0 <HAL_SYSTICK_Callback+0x150>
 80016b2:	4b15      	ldr	r3, [pc, #84]	; (8001708 <HAL_SYSTICK_Callback+0x198>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	e002      	b.n	80016c6 <HAL_SYSTICK_Callback+0x156>
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <HAL_SYSTICK_Callback+0x198>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fef0 	bl	80014ac <setStatLed>
 80016cc:	e00a      	b.n	80016e4 <HAL_SYSTICK_Callback+0x174>
     } else if(led_tim_stat == 0) {ledswpstat=0; ledlevstat=0;}
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <HAL_SYSTICK_Callback+0x190>)
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d106      	bne.n	80016e4 <HAL_SYSTICK_Callback+0x174>
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <HAL_SYSTICK_Callback+0x194>)
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <HAL_SYSTICK_Callback+0x198>)
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
}
 80016e2:	e7ff      	b.n	80016e4 <HAL_SYSTICK_Callback+0x174>
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000624 	.word	0x20000624
 80016ec:	40010800 	.word	0x40010800
 80016f0:	2000062a 	.word	0x2000062a
 80016f4:	2000021c 	.word	0x2000021c
 80016f8:	20000220 	.word	0x20000220
 80016fc:	20000628 	.word	0x20000628
 8001700:	2000062c 	.word	0x2000062c
 8001704:	20000224 	.word	0x20000224
 8001708:	20000228 	.word	0x20000228
 800170c:	2000062e 	.word	0x2000062e

08001710 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001716:	4a19      	ldr	r2, [pc, #100]	; (800177c <HAL_MspInit+0x6c>)
 8001718:	4b18      	ldr	r3, [pc, #96]	; (800177c <HAL_MspInit+0x6c>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6193      	str	r3, [r2, #24]
 8001722:	4b16      	ldr	r3, [pc, #88]	; (800177c <HAL_MspInit+0x6c>)
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800172e:	4a13      	ldr	r2, [pc, #76]	; (800177c <HAL_MspInit+0x6c>)
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_MspInit+0x6c>)
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001738:	61d3      	str	r3, [r2, #28]
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <HAL_MspInit+0x6c>)
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2100      	movs	r1, #0
 800174a:	2005      	movs	r0, #5
 800174c:	f000 fe49 	bl	80023e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001750:	2005      	movs	r0, #5
 8001752:	f000 fe62 	bl	800241a <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001756:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <HAL_MspInit+0x70>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	4a04      	ldr	r2, [pc, #16]	; (8001780 <HAL_MspInit+0x70>)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000
 8001780:	40010000 	.word	0x40010000

08001784 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	; 0x28
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 0318 	add.w	r3, r7, #24
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a33      	ldr	r2, [pc, #204]	; (800186c <HAL_ADC_MspInit+0xe8>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d15f      	bne.n	8001864 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017a4:	4a32      	ldr	r2, [pc, #200]	; (8001870 <HAL_ADC_MspInit+0xec>)
 80017a6:	4b32      	ldr	r3, [pc, #200]	; (8001870 <HAL_ADC_MspInit+0xec>)
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ae:	6193      	str	r3, [r2, #24]
 80017b0:	4b2f      	ldr	r3, [pc, #188]	; (8001870 <HAL_ADC_MspInit+0xec>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017bc:	4a2c      	ldr	r2, [pc, #176]	; (8001870 <HAL_ADC_MspInit+0xec>)
 80017be:	4b2c      	ldr	r3, [pc, #176]	; (8001870 <HAL_ADC_MspInit+0xec>)
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	f043 0304 	orr.w	r3, r3, #4
 80017c6:	6193      	str	r3, [r2, #24]
 80017c8:	4b29      	ldr	r3, [pc, #164]	; (8001870 <HAL_ADC_MspInit+0xec>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d4:	4a26      	ldr	r2, [pc, #152]	; (8001870 <HAL_ADC_MspInit+0xec>)
 80017d6:	4b26      	ldr	r3, [pc, #152]	; (8001870 <HAL_ADC_MspInit+0xec>)
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	f043 0308 	orr.w	r3, r3, #8
 80017de:	6193      	str	r3, [r2, #24]
 80017e0:	4b23      	ldr	r3, [pc, #140]	; (8001870 <HAL_ADC_MspInit+0xec>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = HDD_5V_CURR_Pin|HDD_12V_CURR_Pin|SYS_5V_CURR_Pin|SYS_12V_CURR_Pin
 80017ec:	23fe      	movs	r3, #254	; 0xfe
 80017ee:	61bb      	str	r3, [r7, #24]
                          |SYS_5V_V_Pin|SYS_12V_V_Pin|DC_12V_V_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017f0:	2303      	movs	r3, #3
 80017f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f4:	f107 0318 	add.w	r3, r7, #24
 80017f8:	4619      	mov	r1, r3
 80017fa:	481e      	ldr	r0, [pc, #120]	; (8001874 <HAL_ADC_MspInit+0xf0>)
 80017fc:	f001 f850 	bl	80028a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DC_5V_V_Pin|PS_5V_stb_V_Pin;
 8001800:	2303      	movs	r3, #3
 8001802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001804:	2303      	movs	r3, #3
 8001806:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001808:	f107 0318 	add.w	r3, r7, #24
 800180c:	4619      	mov	r1, r3
 800180e:	481a      	ldr	r0, [pc, #104]	; (8001878 <HAL_ADC_MspInit+0xf4>)
 8001810:	f001 f846 	bl	80028a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001814:	4b19      	ldr	r3, [pc, #100]	; (800187c <HAL_ADC_MspInit+0xf8>)
 8001816:	4a1a      	ldr	r2, [pc, #104]	; (8001880 <HAL_ADC_MspInit+0xfc>)
 8001818:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800181a:	4b18      	ldr	r3, [pc, #96]	; (800187c <HAL_ADC_MspInit+0xf8>)
 800181c:	2200      	movs	r2, #0
 800181e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001820:	4b16      	ldr	r3, [pc, #88]	; (800187c <HAL_ADC_MspInit+0xf8>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <HAL_ADC_MspInit+0xf8>)
 8001828:	2280      	movs	r2, #128	; 0x80
 800182a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800182c:	4b13      	ldr	r3, [pc, #76]	; (800187c <HAL_ADC_MspInit+0xf8>)
 800182e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001832:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <HAL_ADC_MspInit+0xf8>)
 8001836:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800183a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800183c:	4b0f      	ldr	r3, [pc, #60]	; (800187c <HAL_ADC_MspInit+0xf8>)
 800183e:	2220      	movs	r2, #32
 8001840:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001842:	4b0e      	ldr	r3, [pc, #56]	; (800187c <HAL_ADC_MspInit+0xf8>)
 8001844:	2200      	movs	r2, #0
 8001846:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001848:	480c      	ldr	r0, [pc, #48]	; (800187c <HAL_ADC_MspInit+0xf8>)
 800184a:	f000 fe07 	bl	800245c <HAL_DMA_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8001854:	f7ff fe12 	bl	800147c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a08      	ldr	r2, [pc, #32]	; (800187c <HAL_ADC_MspInit+0xf8>)
 800185c:	621a      	str	r2, [r3, #32]
 800185e:	4a07      	ldr	r2, [pc, #28]	; (800187c <HAL_ADC_MspInit+0xf8>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001864:	bf00      	nop
 8001866:	3728      	adds	r7, #40	; 0x28
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40012400 	.word	0x40012400
 8001870:	40021000 	.word	0x40021000
 8001874:	40010800 	.word	0x40010800
 8001878:	40010c00 	.word	0x40010c00
 800187c:	20000598 	.word	0x20000598
 8001880:	40020008 	.word	0x40020008

08001884 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b088      	sub	sp, #32
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0310 	add.w	r3, r7, #16
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a15      	ldr	r2, [pc, #84]	; (80018f4 <HAL_I2C_MspInit+0x70>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d123      	bne.n	80018ec <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a4:	4a14      	ldr	r2, [pc, #80]	; (80018f8 <HAL_I2C_MspInit+0x74>)
 80018a6:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <HAL_I2C_MspInit+0x74>)
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	f043 0308 	orr.w	r3, r3, #8
 80018ae:	6193      	str	r3, [r2, #24]
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <HAL_I2C_MspInit+0x74>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018bc:	23c0      	movs	r3, #192	; 0xc0
 80018be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c0:	2312      	movs	r3, #18
 80018c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018c4:	2303      	movs	r3, #3
 80018c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c8:	f107 0310 	add.w	r3, r7, #16
 80018cc:	4619      	mov	r1, r3
 80018ce:	480b      	ldr	r0, [pc, #44]	; (80018fc <HAL_I2C_MspInit+0x78>)
 80018d0:	f000 ffe6 	bl	80028a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018d4:	4a08      	ldr	r2, [pc, #32]	; (80018f8 <HAL_I2C_MspInit+0x74>)
 80018d6:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <HAL_I2C_MspInit+0x74>)
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018de:	61d3      	str	r3, [r2, #28]
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <HAL_I2C_MspInit+0x74>)
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018ec:	bf00      	nop
 80018ee:	3720      	adds	r7, #32
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40005400 	.word	0x40005400
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40010c00 	.word	0x40010c00

08001900 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001910:	d113      	bne.n	800193a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001912:	4a0c      	ldr	r2, [pc, #48]	; (8001944 <HAL_TIM_Base_MspInit+0x44>)
 8001914:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <HAL_TIM_Base_MspInit+0x44>)
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	61d3      	str	r3, [r2, #28]
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <HAL_TIM_Base_MspInit+0x44>)
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	2100      	movs	r1, #0
 800192e:	201c      	movs	r0, #28
 8001930:	f000 fd57 	bl	80023e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001934:	201c      	movs	r0, #28
 8001936:	f000 fd70 	bl	800241a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40021000 	.word	0x40021000

08001948 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	; 0x28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001966:	d142      	bne.n	80019ee <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001968:	4a23      	ldr	r2, [pc, #140]	; (80019f8 <HAL_TIM_MspPostInit+0xb0>)
 800196a:	4b23      	ldr	r3, [pc, #140]	; (80019f8 <HAL_TIM_MspPostInit+0xb0>)
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	f043 0304 	orr.w	r3, r3, #4
 8001972:	6193      	str	r3, [r2, #24]
 8001974:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <HAL_TIM_MspPostInit+0xb0>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001980:	4a1d      	ldr	r2, [pc, #116]	; (80019f8 <HAL_TIM_MspPostInit+0xb0>)
 8001982:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <HAL_TIM_MspPostInit+0xb0>)
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	f043 0308 	orr.w	r3, r3, #8
 800198a:	6193      	str	r3, [r2, #24]
 800198c:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <HAL_TIM_MspPostInit+0xb0>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f003 0308 	and.w	r3, r3, #8
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = STAT_LED_Pin;
 8001998:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800199c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2302      	movs	r3, #2
 80019a4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(STAT_LED_GPIO_Port, &GPIO_InitStruct);
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	4619      	mov	r1, r3
 80019ac:	4813      	ldr	r0, [pc, #76]	; (80019fc <HAL_TIM_MspPostInit+0xb4>)
 80019ae:	f000 ff77 	bl	80028a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWR_LED_Pin;
 80019b2:	2308      	movs	r3, #8
 80019b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ba:	2302      	movs	r3, #2
 80019bc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PWR_LED_GPIO_Port, &GPIO_InitStruct);
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	4619      	mov	r1, r3
 80019c4:	480e      	ldr	r0, [pc, #56]	; (8001a00 <HAL_TIM_MspPostInit+0xb8>)
 80019c6:	f000 ff6b 	bl	80028a0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <HAL_TIM_MspPostInit+0xbc>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
 80019e8:	4a06      	ldr	r2, [pc, #24]	; (8001a04 <HAL_TIM_MspPostInit+0xbc>)
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80019ee:	bf00      	nop
 80019f0:	3728      	adds	r7, #40	; 0x28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40010800 	.word	0x40010800
 8001a00:	40010c00 	.word	0x40010c00
 8001a04:	40010000 	.word	0x40010000

08001a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	; 0x28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 0318 	add.w	r3, r7, #24
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a53      	ldr	r2, [pc, #332]	; (8001b70 <HAL_UART_MspInit+0x168>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d13a      	bne.n	8001a9e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a28:	4a52      	ldr	r2, [pc, #328]	; (8001b74 <HAL_UART_MspInit+0x16c>)
 8001a2a:	4b52      	ldr	r3, [pc, #328]	; (8001b74 <HAL_UART_MspInit+0x16c>)
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a32:	6193      	str	r3, [r2, #24]
 8001a34:	4b4f      	ldr	r3, [pc, #316]	; (8001b74 <HAL_UART_MspInit+0x16c>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a40:	4a4c      	ldr	r2, [pc, #304]	; (8001b74 <HAL_UART_MspInit+0x16c>)
 8001a42:	4b4c      	ldr	r3, [pc, #304]	; (8001b74 <HAL_UART_MspInit+0x16c>)
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	f043 0304 	orr.w	r3, r3, #4
 8001a4a:	6193      	str	r3, [r2, #24]
 8001a4c:	4b49      	ldr	r3, [pc, #292]	; (8001b74 <HAL_UART_MspInit+0x16c>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = Debug_TX_Pin;
 8001a58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a62:	2303      	movs	r3, #3
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Debug_TX_GPIO_Port, &GPIO_InitStruct);
 8001a66:	f107 0318 	add.w	r3, r7, #24
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4842      	ldr	r0, [pc, #264]	; (8001b78 <HAL_UART_MspInit+0x170>)
 8001a6e:	f000 ff17 	bl	80028a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Debug_RX_Pin;
 8001a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(Debug_RX_GPIO_Port, &GPIO_InitStruct);
 8001a80:	f107 0318 	add.w	r3, r7, #24
 8001a84:	4619      	mov	r1, r3
 8001a86:	483c      	ldr	r0, [pc, #240]	; (8001b78 <HAL_UART_MspInit+0x170>)
 8001a88:	f000 ff0a 	bl	80028a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2100      	movs	r1, #0
 8001a90:	2025      	movs	r0, #37	; 0x25
 8001a92:	f000 fca6 	bl	80023e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a96:	2025      	movs	r0, #37	; 0x25
 8001a98:	f000 fcbf 	bl	800241a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a9c:	e064      	b.n	8001b68 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a36      	ldr	r2, [pc, #216]	; (8001b7c <HAL_UART_MspInit+0x174>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d15f      	bne.n	8001b68 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001aa8:	4a32      	ldr	r2, [pc, #200]	; (8001b74 <HAL_UART_MspInit+0x16c>)
 8001aaa:	4b32      	ldr	r3, [pc, #200]	; (8001b74 <HAL_UART_MspInit+0x16c>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab2:	61d3      	str	r3, [r2, #28]
 8001ab4:	4b2f      	ldr	r3, [pc, #188]	; (8001b74 <HAL_UART_MspInit+0x16c>)
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac0:	4a2c      	ldr	r2, [pc, #176]	; (8001b74 <HAL_UART_MspInit+0x16c>)
 8001ac2:	4b2c      	ldr	r3, [pc, #176]	; (8001b74 <HAL_UART_MspInit+0x16c>)
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	f043 0308 	orr.w	r3, r3, #8
 8001aca:	6193      	str	r3, [r2, #24]
 8001acc:	4b29      	ldr	r3, [pc, #164]	; (8001b74 <HAL_UART_MspInit+0x16c>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	f003 0308 	and.w	r3, r3, #8
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RPI_TX_Pin;
 8001ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RPI_TX_GPIO_Port, &GPIO_InitStruct);
 8001ae6:	f107 0318 	add.w	r3, r7, #24
 8001aea:	4619      	mov	r1, r3
 8001aec:	4824      	ldr	r0, [pc, #144]	; (8001b80 <HAL_UART_MspInit+0x178>)
 8001aee:	f000 fed7 	bl	80028a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RPI_RX_Pin;
 8001af2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001af8:	2300      	movs	r3, #0
 8001afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(RPI_RX_GPIO_Port, &GPIO_InitStruct);
 8001b00:	f107 0318 	add.w	r3, r7, #24
 8001b04:	4619      	mov	r1, r3
 8001b06:	481e      	ldr	r0, [pc, #120]	; (8001b80 <HAL_UART_MspInit+0x178>)
 8001b08:	f000 feca 	bl	80028a0 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <HAL_UART_MspInit+0x17c>)
 8001b0e:	4a1e      	ldr	r2, [pc, #120]	; (8001b88 <HAL_UART_MspInit+0x180>)
 8001b10:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b12:	4b1c      	ldr	r3, [pc, #112]	; (8001b84 <HAL_UART_MspInit+0x17c>)
 8001b14:	2210      	movs	r2, #16
 8001b16:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b18:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <HAL_UART_MspInit+0x17c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b1e:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <HAL_UART_MspInit+0x17c>)
 8001b20:	2280      	movs	r2, #128	; 0x80
 8001b22:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b24:	4b17      	ldr	r3, [pc, #92]	; (8001b84 <HAL_UART_MspInit+0x17c>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b2a:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <HAL_UART_MspInit+0x17c>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001b30:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <HAL_UART_MspInit+0x17c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b36:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <HAL_UART_MspInit+0x17c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001b3c:	4811      	ldr	r0, [pc, #68]	; (8001b84 <HAL_UART_MspInit+0x17c>)
 8001b3e:	f000 fc8d 	bl	800245c <HAL_DMA_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <HAL_UART_MspInit+0x144>
      Error_Handler();
 8001b48:	f7ff fc98 	bl	800147c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a0d      	ldr	r2, [pc, #52]	; (8001b84 <HAL_UART_MspInit+0x17c>)
 8001b50:	635a      	str	r2, [r3, #52]	; 0x34
 8001b52:	4a0c      	ldr	r2, [pc, #48]	; (8001b84 <HAL_UART_MspInit+0x17c>)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	2027      	movs	r0, #39	; 0x27
 8001b5e:	f000 fc40 	bl	80023e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b62:	2027      	movs	r0, #39	; 0x27
 8001b64:	f000 fc59 	bl	800241a <HAL_NVIC_EnableIRQ>
}
 8001b68:	bf00      	nop
 8001b6a:	3728      	adds	r7, #40	; 0x28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40013800 	.word	0x40013800
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40010800 	.word	0x40010800
 8001b7c:	40004800 	.word	0x40004800
 8001b80:	40010c00 	.word	0x40010c00
 8001b84:	200004e0 	.word	0x200004e0
 8001b88:	4002001c 	.word	0x4002001c

08001b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <NMI_Handler+0x4>

08001b92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b96:	e7fe      	b.n	8001b96 <HardFault_Handler+0x4>

08001b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <MemManage_Handler+0x4>

08001b9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba2:	e7fe      	b.n	8001ba2 <BusFault_Handler+0x4>

08001ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <UsageFault_Handler+0x4>

08001baa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr

08001bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr

08001bc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr

08001bce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bd2:	f000 f903 	bl	8001ddc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001bd6:	f000 fc3a 	bl	800244e <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr
	...

08001bec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bf0:	4802      	ldr	r0, [pc, #8]	; (8001bfc <DMA1_Channel1_IRQHandler+0x10>)
 8001bf2:	f000 fd43 	bl	800267c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000598 	.word	0x20000598

08001c00 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001c04:	4802      	ldr	r0, [pc, #8]	; (8001c10 <DMA1_Channel2_IRQHandler+0x10>)
 8001c06:	f000 fd39 	bl	800267c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200004e0 	.word	0x200004e0

08001c14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <TIM2_IRQHandler+0x10>)
 8001c1a:	f001 ff07 	bl	8003a2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	200005dc 	.word	0x200005dc

08001c28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <USART1_IRQHandler+0x10>)
 8001c2e:	f002 fdc9 	bl	80047c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000554 	.word	0x20000554

08001c3c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <USART3_IRQHandler+0x10>)
 8001c42:	f002 fdbf 	bl	80047c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	2000043c 	.word	0x2000043c

08001c50 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c50:	b590      	push	{r4, r7, lr}
 8001c52:	b087      	sub	sp, #28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	e00a      	b.n	8001c78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c62:	68bc      	ldr	r4, [r7, #8]
 8001c64:	1c63      	adds	r3, r4, #1
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	f3af 8000 	nop.w
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	3301      	adds	r3, #1
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	dbf0      	blt.n	8001c62 <_read+0x12>
	}

return len;
 8001c80:	687b      	ldr	r3, [r7, #4]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	371c      	adds	r7, #28
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd90      	pop	{r4, r7, pc}
	...

08001c8c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001c94:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <_sbrk+0x50>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d102      	bne.n	8001ca2 <_sbrk+0x16>
		heap_end = &end;
 8001c9c:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <_sbrk+0x50>)
 8001c9e:	4a10      	ldr	r2, [pc, #64]	; (8001ce0 <_sbrk+0x54>)
 8001ca0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <_sbrk+0x50>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <_sbrk+0x50>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4413      	add	r3, r2
 8001cb0:	466a      	mov	r2, sp
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d907      	bls.n	8001cc6 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001cb6:	f003 f9cb 	bl	8005050 <__errno>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	230c      	movs	r3, #12
 8001cbe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc4:	e006      	b.n	8001cd4 <_sbrk+0x48>
	}

	heap_end += incr;
 8001cc6:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <_sbrk+0x50>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	4a03      	ldr	r2, [pc, #12]	; (8001cdc <_sbrk+0x50>)
 8001cd0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	2000022c 	.word	0x2000022c
 8001ce0:	20000638 	.word	0x20000638

08001ce4 <_close>:

int _close(int file)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
	return -1;
 8001cec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr

08001cfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d0a:	605a      	str	r2, [r3, #4]
	return 0;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr

08001d18 <_isatty>:

int _isatty(int file)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	return 1;
 8001d20:	2301      	movs	r3, #1
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
	return 0;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d54:	4a08      	ldr	r2, [pc, #32]	; (8001d78 <HAL_Init+0x28>)
 8001d56:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <HAL_Init+0x28>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f043 0310 	orr.w	r3, r3, #16
 8001d5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d60:	2003      	movs	r0, #3
 8001d62:	f000 fb33 	bl	80023cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d66:	2000      	movs	r0, #0
 8001d68:	f000 f808 	bl	8001d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d6c:	f7ff fcd0 	bl	8001710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40022000 	.word	0x40022000

08001d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d84:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <HAL_InitTick+0x54>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <HAL_InitTick+0x58>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 fb4b 	bl	8002436 <HAL_SYSTICK_Config>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e00e      	b.n	8001dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b0f      	cmp	r3, #15
 8001dae:	d80a      	bhi.n	8001dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db0:	2200      	movs	r2, #0
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	f04f 30ff 	mov.w	r0, #4294967295
 8001db8:	f000 fb13 	bl	80023e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dbc:	4a06      	ldr	r2, [pc, #24]	; (8001dd8 <HAL_InitTick+0x5c>)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e000      	b.n	8001dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	20000008 	.word	0x20000008
 8001dd8:	20000004 	.word	0x20000004

08001ddc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <HAL_IncTick+0x1c>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <HAL_IncTick+0x20>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4413      	add	r3, r2
 8001dec:	4a03      	ldr	r2, [pc, #12]	; (8001dfc <HAL_IncTick+0x20>)
 8001dee:	6013      	str	r3, [r2, #0]
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr
 8001df8:	20000008 	.word	0x20000008
 8001dfc:	20000630 	.word	0x20000630

08001e00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return uwTick;
 8001e04:	4b02      	ldr	r3, [pc, #8]	; (8001e10 <HAL_GetTick+0x10>)
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr
 8001e10:	20000630 	.word	0x20000630

08001e14 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e0be      	b.n	8001fb4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d109      	bne.n	8001e58 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff fc96 	bl	8001784 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f9ab 	bl	80021b4 <ADC_ConversionStop_Disable>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e66:	f003 0310 	and.w	r3, r3, #16
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f040 8099 	bne.w	8001fa2 <HAL_ADC_Init+0x18e>
 8001e70:	7dfb      	ldrb	r3, [r7, #23]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f040 8095 	bne.w	8001fa2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e80:	f023 0302 	bic.w	r3, r3, #2
 8001e84:	f043 0202 	orr.w	r2, r3, #2
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e94:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	7b1b      	ldrb	r3, [r3, #12]
 8001e9a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e9c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eac:	d003      	beq.n	8001eb6 <HAL_ADC_Init+0xa2>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d102      	bne.n	8001ebc <HAL_ADC_Init+0xa8>
 8001eb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eba:	e000      	b.n	8001ebe <HAL_ADC_Init+0xaa>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	7d1b      	ldrb	r3, [r3, #20]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d119      	bne.n	8001f00 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	7b1b      	ldrb	r3, [r3, #12]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d109      	bne.n	8001ee8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	035a      	lsls	r2, r3, #13
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	e00b      	b.n	8001f00 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eec:	f043 0220 	orr.w	r2, r3, #32
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef8:	f043 0201 	orr.w	r2, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	6852      	ldr	r2, [r2, #4]
 8001f0a:	f422 4169 	bic.w	r1, r2, #59648	; 0xe900
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6899      	ldr	r1, [r3, #8]
 8001f1e:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <HAL_ADC_Init+0x1a8>)
 8001f20:	400b      	ands	r3, r1
 8001f22:	68b9      	ldr	r1, [r7, #8]
 8001f24:	430b      	orrs	r3, r1
 8001f26:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f30:	d003      	beq.n	8001f3a <HAL_ADC_Init+0x126>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d104      	bne.n	8001f44 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	051b      	lsls	r3, r3, #20
 8001f42:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f4e:	f422 0170 	bic.w	r1, r2, #15728640	; 0xf00000
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <HAL_ADC_Init+0x1ac>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d10b      	bne.n	8001f80 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f72:	f023 0303 	bic.w	r3, r3, #3
 8001f76:	f043 0201 	orr.w	r2, r3, #1
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f7e:	e018      	b.n	8001fb2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f84:	f023 0312 	bic.w	r3, r3, #18
 8001f88:	f043 0210 	orr.w	r2, r3, #16
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f94:	f043 0201 	orr.w	r2, r3, #1
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fa0:	e007      	b.n	8001fb2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa6:	f043 0210 	orr.w	r2, r3, #16
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	ffe1f7fd 	.word	0xffe1f7fd
 8001fc0:	ff1f0efe 	.word	0xff1f0efe

08001fc4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001fc4:	b490      	push	{r4, r7}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x20>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e0dc      	b.n	800219e <HAL_ADC_ConfigChannel+0x1da>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b06      	cmp	r3, #6
 8001ff2:	d81c      	bhi.n	800202e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6819      	ldr	r1, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	3b05      	subs	r3, #5
 800200a:	221f      	movs	r2, #31
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	4018      	ands	r0, r3
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681c      	ldr	r4, [r3, #0]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	3b05      	subs	r3, #5
 8002024:	fa04 f303 	lsl.w	r3, r4, r3
 8002028:	4303      	orrs	r3, r0
 800202a:	634b      	str	r3, [r1, #52]	; 0x34
 800202c:	e03c      	b.n	80020a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b0c      	cmp	r3, #12
 8002034:	d81c      	bhi.n	8002070 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6819      	ldr	r1, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	3b23      	subs	r3, #35	; 0x23
 800204c:	221f      	movs	r2, #31
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	4018      	ands	r0, r3
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681c      	ldr	r4, [r3, #0]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	3b23      	subs	r3, #35	; 0x23
 8002066:	fa04 f303 	lsl.w	r3, r4, r3
 800206a:	4303      	orrs	r3, r0
 800206c:	630b      	str	r3, [r1, #48]	; 0x30
 800206e:	e01b      	b.n	80020a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6819      	ldr	r1, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	3b41      	subs	r3, #65	; 0x41
 8002086:	221f      	movs	r2, #31
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	4018      	ands	r0, r3
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681c      	ldr	r4, [r3, #0]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	3b41      	subs	r3, #65	; 0x41
 80020a0:	fa04 f303 	lsl.w	r3, r4, r3
 80020a4:	4303      	orrs	r3, r0
 80020a6:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b09      	cmp	r3, #9
 80020ae:	d91c      	bls.n	80020ea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6819      	ldr	r1, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68d8      	ldr	r0, [r3, #12]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	4613      	mov	r3, r2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	4413      	add	r3, r2
 80020c4:	3b1e      	subs	r3, #30
 80020c6:	2207      	movs	r2, #7
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	4018      	ands	r0, r3
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	689c      	ldr	r4, [r3, #8]
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4613      	mov	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4413      	add	r3, r2
 80020de:	3b1e      	subs	r3, #30
 80020e0:	fa04 f303 	lsl.w	r3, r4, r3
 80020e4:	4303      	orrs	r3, r0
 80020e6:	60cb      	str	r3, [r1, #12]
 80020e8:	e019      	b.n	800211e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6819      	ldr	r1, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6918      	ldr	r0, [r3, #16]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4613      	mov	r3, r2
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4413      	add	r3, r2
 80020fe:	2207      	movs	r2, #7
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	4018      	ands	r0, r3
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	689c      	ldr	r4, [r3, #8]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4613      	mov	r3, r2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4413      	add	r3, r2
 8002116:	fa04 f303 	lsl.w	r3, r4, r3
 800211a:	4303      	orrs	r3, r0
 800211c:	610b      	str	r3, [r1, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b10      	cmp	r3, #16
 8002124:	d003      	beq.n	800212e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800212a:	2b11      	cmp	r3, #17
 800212c:	d132      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a1d      	ldr	r2, [pc, #116]	; (80021a8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d125      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d126      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6812      	ldr	r2, [r2, #0]
 800214e:	6892      	ldr	r2, [r2, #8]
 8002150:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002154:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b10      	cmp	r3, #16
 800215c:	d11a      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800215e:	4b13      	ldr	r3, [pc, #76]	; (80021ac <HAL_ADC_ConfigChannel+0x1e8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a13      	ldr	r2, [pc, #76]	; (80021b0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002164:	fba2 2303 	umull	r2, r3, r2, r3
 8002168:	0c9a      	lsrs	r2, r3, #18
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002174:	e002      	b.n	800217c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	3b01      	subs	r3, #1
 800217a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f9      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x1b2>
 8002182:	e007      	b.n	8002194 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002188:	f043 0220 	orr.w	r2, r3, #32
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800219c:	7bfb      	ldrb	r3, [r7, #15]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc90      	pop	{r4, r7}
 80021a6:	4770      	bx	lr
 80021a8:	40012400 	.word	0x40012400
 80021ac:	20000000 	.word	0x20000000
 80021b0:	431bde83 	.word	0x431bde83

080021b4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d12e      	bne.n	800222c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6812      	ldr	r2, [r2, #0]
 80021d6:	6892      	ldr	r2, [r2, #8]
 80021d8:	f022 0201 	bic.w	r2, r2, #1
 80021dc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021de:	f7ff fe0f 	bl	8001e00 <HAL_GetTick>
 80021e2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021e4:	e01b      	b.n	800221e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021e6:	f7ff fe0b 	bl	8001e00 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d914      	bls.n	800221e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d10d      	bne.n	800221e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002206:	f043 0210 	orr.w	r2, r3, #16
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002212:	f043 0201 	orr.w	r2, r3, #1
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e007      	b.n	800222e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b01      	cmp	r3, #1
 800222a:	d0dc      	beq.n	80021e6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <__NVIC_SetPriorityGrouping+0x44>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002254:	4013      	ands	r3, r2
 8002256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002260:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800226a:	4a04      	ldr	r2, [pc, #16]	; (800227c <__NVIC_SetPriorityGrouping+0x44>)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	60d3      	str	r3, [r2, #12]
}
 8002270:	bf00      	nop
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	bc80      	pop	{r7}
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002284:	4b04      	ldr	r3, [pc, #16]	; (8002298 <__NVIC_GetPriorityGrouping+0x18>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	0a1b      	lsrs	r3, r3, #8
 800228a:	f003 0307 	and.w	r3, r3, #7
}
 800228e:	4618      	mov	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	db0b      	blt.n	80022c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ae:	4908      	ldr	r1, [pc, #32]	; (80022d0 <__NVIC_EnableIRQ+0x34>)
 80022b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b4:	095b      	lsrs	r3, r3, #5
 80022b6:	79fa      	ldrb	r2, [r7, #7]
 80022b8:	f002 021f 	and.w	r2, r2, #31
 80022bc:	2001      	movs	r0, #1
 80022be:	fa00 f202 	lsl.w	r2, r0, r2
 80022c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr
 80022d0:	e000e100 	.word	0xe000e100

080022d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	6039      	str	r1, [r7, #0]
 80022de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	db0a      	blt.n	80022fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e8:	490d      	ldr	r1, [pc, #52]	; (8002320 <__NVIC_SetPriority+0x4c>)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	0112      	lsls	r2, r2, #4
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	440b      	add	r3, r1
 80022f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022fc:	e00a      	b.n	8002314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fe:	4909      	ldr	r1, [pc, #36]	; (8002324 <__NVIC_SetPriority+0x50>)
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	3b04      	subs	r3, #4
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	0112      	lsls	r2, r2, #4
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	440b      	add	r3, r1
 8002312:	761a      	strb	r2, [r3, #24]
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000e100 	.word	0xe000e100
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002328:	b480      	push	{r7}
 800232a:	b089      	sub	sp, #36	; 0x24
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f1c3 0307 	rsb	r3, r3, #7
 8002342:	2b04      	cmp	r3, #4
 8002344:	bf28      	it	cs
 8002346:	2304      	movcs	r3, #4
 8002348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	3304      	adds	r3, #4
 800234e:	2b06      	cmp	r3, #6
 8002350:	d902      	bls.n	8002358 <NVIC_EncodePriority+0x30>
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3b03      	subs	r3, #3
 8002356:	e000      	b.n	800235a <NVIC_EncodePriority+0x32>
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800235c:	2201      	movs	r2, #1
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	1e5a      	subs	r2, r3, #1
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	401a      	ands	r2, r3
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800236e:	2101      	movs	r1, #1
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	fa01 f303 	lsl.w	r3, r1, r3
 8002376:	1e59      	subs	r1, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800237c:	4313      	orrs	r3, r2
         );
}
 800237e:	4618      	mov	r0, r3
 8002380:	3724      	adds	r7, #36	; 0x24
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr

08002388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3b01      	subs	r3, #1
 8002394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002398:	d301      	bcc.n	800239e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800239a:	2301      	movs	r3, #1
 800239c:	e00f      	b.n	80023be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800239e:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <SysTick_Config+0x40>)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023a6:	210f      	movs	r1, #15
 80023a8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ac:	f7ff ff92 	bl	80022d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <SysTick_Config+0x40>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023b6:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <SysTick_Config+0x40>)
 80023b8:	2207      	movs	r2, #7
 80023ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	e000e010 	.word	0xe000e010

080023cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff ff2f 	bl	8002238 <__NVIC_SetPriorityGrouping>
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b086      	sub	sp, #24
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	4603      	mov	r3, r0
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	607a      	str	r2, [r7, #4]
 80023ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023f4:	f7ff ff44 	bl	8002280 <__NVIC_GetPriorityGrouping>
 80023f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	68b9      	ldr	r1, [r7, #8]
 80023fe:	6978      	ldr	r0, [r7, #20]
 8002400:	f7ff ff92 	bl	8002328 <NVIC_EncodePriority>
 8002404:	4602      	mov	r2, r0
 8002406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff61 	bl	80022d4 <__NVIC_SetPriority>
}
 8002412:	bf00      	nop
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	4603      	mov	r3, r0
 8002422:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff ff37 	bl	800229c <__NVIC_EnableIRQ>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff ffa2 	bl	8002388 <SysTick_Config>
 8002444:	4603      	mov	r3, r0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002452:	f7ff f88d 	bl	8001570 <HAL_SYSTICK_Callback>
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e043      	b.n	80024fa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	4b22      	ldr	r3, [pc, #136]	; (8002504 <HAL_DMA_Init+0xa8>)
 800247a:	4413      	add	r3, r2
 800247c:	4a22      	ldr	r2, [pc, #136]	; (8002508 <HAL_DMA_Init+0xac>)
 800247e:	fba2 2303 	umull	r2, r3, r2, r3
 8002482:	091b      	lsrs	r3, r3, #4
 8002484:	009a      	lsls	r2, r3, #2
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a1f      	ldr	r2, [pc, #124]	; (800250c <HAL_DMA_Init+0xb0>)
 800248e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024a6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80024aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80024b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	bffdfff8 	.word	0xbffdfff8
 8002508:	cccccccd 	.word	0xcccccccd
 800250c:	40020000 	.word	0x40020000

08002510 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002518:	2300      	movs	r3, #0
 800251a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002522:	2b02      	cmp	r3, #2
 8002524:	d008      	beq.n	8002538 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2204      	movs	r2, #4
 800252a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e020      	b.n	800257a <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6812      	ldr	r2, [r2, #0]
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	f022 020e 	bic.w	r2, r2, #14
 8002546:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	6812      	ldr	r2, [r2, #0]
 8002552:	f022 0201 	bic.w	r2, r2, #1
 8002556:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002560:	2101      	movs	r1, #1
 8002562:	fa01 f202 	lsl.w	r2, r1, r2
 8002566:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002578:	7bfb      	ldrb	r3, [r7, #15]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr

08002584 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002596:	2b02      	cmp	r3, #2
 8002598:	d005      	beq.n	80025a6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2204      	movs	r2, #4
 800259e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
 80025a4:	e057      	b.n	8002656 <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6812      	ldr	r2, [r2, #0]
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	f022 020e 	bic.w	r2, r2, #14
 80025b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	6812      	ldr	r2, [r2, #0]
 80025c0:	f022 0201 	bic.w	r2, r2, #1
 80025c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80025c6:	4a26      	ldr	r2, [pc, #152]	; (8002660 <HAL_DMA_Abort_IT+0xdc>)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4619      	mov	r1, r3
 80025ce:	4b25      	ldr	r3, [pc, #148]	; (8002664 <HAL_DMA_Abort_IT+0xe0>)
 80025d0:	4299      	cmp	r1, r3
 80025d2:	d02e      	beq.n	8002632 <HAL_DMA_Abort_IT+0xae>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4619      	mov	r1, r3
 80025da:	4b23      	ldr	r3, [pc, #140]	; (8002668 <HAL_DMA_Abort_IT+0xe4>)
 80025dc:	4299      	cmp	r1, r3
 80025de:	d026      	beq.n	800262e <HAL_DMA_Abort_IT+0xaa>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4619      	mov	r1, r3
 80025e6:	4b21      	ldr	r3, [pc, #132]	; (800266c <HAL_DMA_Abort_IT+0xe8>)
 80025e8:	4299      	cmp	r1, r3
 80025ea:	d01d      	beq.n	8002628 <HAL_DMA_Abort_IT+0xa4>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4619      	mov	r1, r3
 80025f2:	4b1f      	ldr	r3, [pc, #124]	; (8002670 <HAL_DMA_Abort_IT+0xec>)
 80025f4:	4299      	cmp	r1, r3
 80025f6:	d014      	beq.n	8002622 <HAL_DMA_Abort_IT+0x9e>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4619      	mov	r1, r3
 80025fe:	4b1d      	ldr	r3, [pc, #116]	; (8002674 <HAL_DMA_Abort_IT+0xf0>)
 8002600:	4299      	cmp	r1, r3
 8002602:	d00b      	beq.n	800261c <HAL_DMA_Abort_IT+0x98>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4619      	mov	r1, r3
 800260a:	4b1b      	ldr	r3, [pc, #108]	; (8002678 <HAL_DMA_Abort_IT+0xf4>)
 800260c:	4299      	cmp	r1, r3
 800260e:	d102      	bne.n	8002616 <HAL_DMA_Abort_IT+0x92>
 8002610:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002614:	e00e      	b.n	8002634 <HAL_DMA_Abort_IT+0xb0>
 8002616:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800261a:	e00b      	b.n	8002634 <HAL_DMA_Abort_IT+0xb0>
 800261c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002620:	e008      	b.n	8002634 <HAL_DMA_Abort_IT+0xb0>
 8002622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002626:	e005      	b.n	8002634 <HAL_DMA_Abort_IT+0xb0>
 8002628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800262c:	e002      	b.n	8002634 <HAL_DMA_Abort_IT+0xb0>
 800262e:	2310      	movs	r3, #16
 8002630:	e000      	b.n	8002634 <HAL_DMA_Abort_IT+0xb0>
 8002632:	2301      	movs	r3, #1
 8002634:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	4798      	blx	r3
    } 
  }
  return status;
 8002656:	7bfb      	ldrb	r3, [r7, #15]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40020000 	.word	0x40020000
 8002664:	40020008 	.word	0x40020008
 8002668:	4002001c 	.word	0x4002001c
 800266c:	40020030 	.word	0x40020030
 8002670:	40020044 	.word	0x40020044
 8002674:	40020058 	.word	0x40020058
 8002678:	4002006c 	.word	0x4002006c

0800267c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	2204      	movs	r2, #4
 800269a:	409a      	lsls	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4013      	ands	r3, r2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d055      	beq.n	8002750 <HAL_DMA_IRQHandler+0xd4>
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d050      	beq.n	8002750 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0320 	and.w	r3, r3, #32
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d107      	bne.n	80026cc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	6812      	ldr	r2, [r2, #0]
 80026c6:	f022 0204 	bic.w	r2, r2, #4
 80026ca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80026cc:	4a6d      	ldr	r2, [pc, #436]	; (8002884 <HAL_DMA_IRQHandler+0x208>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4619      	mov	r1, r3
 80026d4:	4b6c      	ldr	r3, [pc, #432]	; (8002888 <HAL_DMA_IRQHandler+0x20c>)
 80026d6:	4299      	cmp	r1, r3
 80026d8:	d02e      	beq.n	8002738 <HAL_DMA_IRQHandler+0xbc>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4619      	mov	r1, r3
 80026e0:	4b6a      	ldr	r3, [pc, #424]	; (800288c <HAL_DMA_IRQHandler+0x210>)
 80026e2:	4299      	cmp	r1, r3
 80026e4:	d026      	beq.n	8002734 <HAL_DMA_IRQHandler+0xb8>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4619      	mov	r1, r3
 80026ec:	4b68      	ldr	r3, [pc, #416]	; (8002890 <HAL_DMA_IRQHandler+0x214>)
 80026ee:	4299      	cmp	r1, r3
 80026f0:	d01d      	beq.n	800272e <HAL_DMA_IRQHandler+0xb2>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4619      	mov	r1, r3
 80026f8:	4b66      	ldr	r3, [pc, #408]	; (8002894 <HAL_DMA_IRQHandler+0x218>)
 80026fa:	4299      	cmp	r1, r3
 80026fc:	d014      	beq.n	8002728 <HAL_DMA_IRQHandler+0xac>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4619      	mov	r1, r3
 8002704:	4b64      	ldr	r3, [pc, #400]	; (8002898 <HAL_DMA_IRQHandler+0x21c>)
 8002706:	4299      	cmp	r1, r3
 8002708:	d00b      	beq.n	8002722 <HAL_DMA_IRQHandler+0xa6>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4619      	mov	r1, r3
 8002710:	4b62      	ldr	r3, [pc, #392]	; (800289c <HAL_DMA_IRQHandler+0x220>)
 8002712:	4299      	cmp	r1, r3
 8002714:	d102      	bne.n	800271c <HAL_DMA_IRQHandler+0xa0>
 8002716:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800271a:	e00e      	b.n	800273a <HAL_DMA_IRQHandler+0xbe>
 800271c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002720:	e00b      	b.n	800273a <HAL_DMA_IRQHandler+0xbe>
 8002722:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002726:	e008      	b.n	800273a <HAL_DMA_IRQHandler+0xbe>
 8002728:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800272c:	e005      	b.n	800273a <HAL_DMA_IRQHandler+0xbe>
 800272e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002732:	e002      	b.n	800273a <HAL_DMA_IRQHandler+0xbe>
 8002734:	2340      	movs	r3, #64	; 0x40
 8002736:	e000      	b.n	800273a <HAL_DMA_IRQHandler+0xbe>
 8002738:	2304      	movs	r3, #4
 800273a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 809a 	beq.w	800287a <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800274e:	e094      	b.n	800287a <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	2202      	movs	r2, #2
 8002756:	409a      	lsls	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4013      	ands	r3, r2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d05c      	beq.n	800281a <HAL_DMA_IRQHandler+0x19e>
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d057      	beq.n	800281a <HAL_DMA_IRQHandler+0x19e>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0320 	and.w	r3, r3, #32
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10b      	bne.n	8002790 <HAL_DMA_IRQHandler+0x114>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6812      	ldr	r2, [r2, #0]
 8002780:	6812      	ldr	r2, [r2, #0]
 8002782:	f022 020a 	bic.w	r2, r2, #10
 8002786:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002790:	4a3c      	ldr	r2, [pc, #240]	; (8002884 <HAL_DMA_IRQHandler+0x208>)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4619      	mov	r1, r3
 8002798:	4b3b      	ldr	r3, [pc, #236]	; (8002888 <HAL_DMA_IRQHandler+0x20c>)
 800279a:	4299      	cmp	r1, r3
 800279c:	d02e      	beq.n	80027fc <HAL_DMA_IRQHandler+0x180>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4619      	mov	r1, r3
 80027a4:	4b39      	ldr	r3, [pc, #228]	; (800288c <HAL_DMA_IRQHandler+0x210>)
 80027a6:	4299      	cmp	r1, r3
 80027a8:	d026      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x17c>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4619      	mov	r1, r3
 80027b0:	4b37      	ldr	r3, [pc, #220]	; (8002890 <HAL_DMA_IRQHandler+0x214>)
 80027b2:	4299      	cmp	r1, r3
 80027b4:	d01d      	beq.n	80027f2 <HAL_DMA_IRQHandler+0x176>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4619      	mov	r1, r3
 80027bc:	4b35      	ldr	r3, [pc, #212]	; (8002894 <HAL_DMA_IRQHandler+0x218>)
 80027be:	4299      	cmp	r1, r3
 80027c0:	d014      	beq.n	80027ec <HAL_DMA_IRQHandler+0x170>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4619      	mov	r1, r3
 80027c8:	4b33      	ldr	r3, [pc, #204]	; (8002898 <HAL_DMA_IRQHandler+0x21c>)
 80027ca:	4299      	cmp	r1, r3
 80027cc:	d00b      	beq.n	80027e6 <HAL_DMA_IRQHandler+0x16a>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4619      	mov	r1, r3
 80027d4:	4b31      	ldr	r3, [pc, #196]	; (800289c <HAL_DMA_IRQHandler+0x220>)
 80027d6:	4299      	cmp	r1, r3
 80027d8:	d102      	bne.n	80027e0 <HAL_DMA_IRQHandler+0x164>
 80027da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027de:	e00e      	b.n	80027fe <HAL_DMA_IRQHandler+0x182>
 80027e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027e4:	e00b      	b.n	80027fe <HAL_DMA_IRQHandler+0x182>
 80027e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027ea:	e008      	b.n	80027fe <HAL_DMA_IRQHandler+0x182>
 80027ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027f0:	e005      	b.n	80027fe <HAL_DMA_IRQHandler+0x182>
 80027f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027f6:	e002      	b.n	80027fe <HAL_DMA_IRQHandler+0x182>
 80027f8:	2320      	movs	r3, #32
 80027fa:	e000      	b.n	80027fe <HAL_DMA_IRQHandler+0x182>
 80027fc:	2302      	movs	r3, #2
 80027fe:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280c:	2b00      	cmp	r3, #0
 800280e:	d034      	beq.n	800287a <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002818:	e02f      	b.n	800287a <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	2208      	movs	r2, #8
 8002820:	409a      	lsls	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4013      	ands	r3, r2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d028      	beq.n	800287c <HAL_DMA_IRQHandler+0x200>
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	f003 0308 	and.w	r3, r3, #8
 8002830:	2b00      	cmp	r3, #0
 8002832:	d023      	beq.n	800287c <HAL_DMA_IRQHandler+0x200>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	6812      	ldr	r2, [r2, #0]
 800283e:	f022 020e 	bic.w	r2, r2, #14
 8002842:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800284c:	2101      	movs	r1, #1
 800284e:	fa01 f202 	lsl.w	r2, r1, r2
 8002852:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	2b00      	cmp	r3, #0
 8002870:	d004      	beq.n	800287c <HAL_DMA_IRQHandler+0x200>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	4798      	blx	r3
    }
  }
  return;
 800287a:	bf00      	nop
 800287c:	bf00      	nop
}
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40020000 	.word	0x40020000
 8002888:	40020008 	.word	0x40020008
 800288c:	4002001c 	.word	0x4002001c
 8002890:	40020030 	.word	0x40020030
 8002894:	40020044 	.word	0x40020044
 8002898:	40020058 	.word	0x40020058
 800289c:	4002006c 	.word	0x4002006c

080028a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b08b      	sub	sp, #44	; 0x2c
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028aa:	2300      	movs	r3, #0
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028ae:	2300      	movs	r3, #0
 80028b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028b2:	e127      	b.n	8002b04 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028b4:	2201      	movs	r2, #1
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	f040 8116 	bne.w	8002afe <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b12      	cmp	r3, #18
 80028d8:	d034      	beq.n	8002944 <HAL_GPIO_Init+0xa4>
 80028da:	2b12      	cmp	r3, #18
 80028dc:	d80d      	bhi.n	80028fa <HAL_GPIO_Init+0x5a>
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d02b      	beq.n	800293a <HAL_GPIO_Init+0x9a>
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d804      	bhi.n	80028f0 <HAL_GPIO_Init+0x50>
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d031      	beq.n	800294e <HAL_GPIO_Init+0xae>
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d01c      	beq.n	8002928 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028ee:	e048      	b.n	8002982 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d043      	beq.n	800297c <HAL_GPIO_Init+0xdc>
 80028f4:	2b11      	cmp	r3, #17
 80028f6:	d01b      	beq.n	8002930 <HAL_GPIO_Init+0x90>
          break;
 80028f8:	e043      	b.n	8002982 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80028fa:	4a89      	ldr	r2, [pc, #548]	; (8002b20 <HAL_GPIO_Init+0x280>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d026      	beq.n	800294e <HAL_GPIO_Init+0xae>
 8002900:	4a87      	ldr	r2, [pc, #540]	; (8002b20 <HAL_GPIO_Init+0x280>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d806      	bhi.n	8002914 <HAL_GPIO_Init+0x74>
 8002906:	4a87      	ldr	r2, [pc, #540]	; (8002b24 <HAL_GPIO_Init+0x284>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d020      	beq.n	800294e <HAL_GPIO_Init+0xae>
 800290c:	4a86      	ldr	r2, [pc, #536]	; (8002b28 <HAL_GPIO_Init+0x288>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d01d      	beq.n	800294e <HAL_GPIO_Init+0xae>
          break;
 8002912:	e036      	b.n	8002982 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002914:	4a85      	ldr	r2, [pc, #532]	; (8002b2c <HAL_GPIO_Init+0x28c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d019      	beq.n	800294e <HAL_GPIO_Init+0xae>
 800291a:	4a85      	ldr	r2, [pc, #532]	; (8002b30 <HAL_GPIO_Init+0x290>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d016      	beq.n	800294e <HAL_GPIO_Init+0xae>
 8002920:	4a84      	ldr	r2, [pc, #528]	; (8002b34 <HAL_GPIO_Init+0x294>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d013      	beq.n	800294e <HAL_GPIO_Init+0xae>
          break;
 8002926:	e02c      	b.n	8002982 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	623b      	str	r3, [r7, #32]
          break;
 800292e:	e028      	b.n	8002982 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	3304      	adds	r3, #4
 8002936:	623b      	str	r3, [r7, #32]
          break;
 8002938:	e023      	b.n	8002982 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	3308      	adds	r3, #8
 8002940:	623b      	str	r3, [r7, #32]
          break;
 8002942:	e01e      	b.n	8002982 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	330c      	adds	r3, #12
 800294a:	623b      	str	r3, [r7, #32]
          break;
 800294c:	e019      	b.n	8002982 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d102      	bne.n	800295c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002956:	2304      	movs	r3, #4
 8002958:	623b      	str	r3, [r7, #32]
          break;
 800295a:	e012      	b.n	8002982 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d105      	bne.n	8002970 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002964:	2308      	movs	r3, #8
 8002966:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69fa      	ldr	r2, [r7, #28]
 800296c:	611a      	str	r2, [r3, #16]
          break;
 800296e:	e008      	b.n	8002982 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002970:	2308      	movs	r3, #8
 8002972:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69fa      	ldr	r2, [r7, #28]
 8002978:	615a      	str	r2, [r3, #20]
          break;
 800297a:	e002      	b.n	8002982 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800297c:	2300      	movs	r3, #0
 800297e:	623b      	str	r3, [r7, #32]
          break;
 8002980:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	2bff      	cmp	r3, #255	; 0xff
 8002986:	d801      	bhi.n	800298c <HAL_GPIO_Init+0xec>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	e001      	b.n	8002990 <HAL_GPIO_Init+0xf0>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3304      	adds	r3, #4
 8002990:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	2bff      	cmp	r3, #255	; 0xff
 8002996:	d802      	bhi.n	800299e <HAL_GPIO_Init+0xfe>
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	e002      	b.n	80029a4 <HAL_GPIO_Init+0x104>
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	3b08      	subs	r3, #8
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	210f      	movs	r1, #15
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	fa01 f303 	lsl.w	r3, r1, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	401a      	ands	r2, r3
 80029b6:	6a39      	ldr	r1, [r7, #32]
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	fa01 f303 	lsl.w	r3, r1, r3
 80029be:	431a      	orrs	r2, r3
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 8096 	beq.w	8002afe <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029d2:	4a59      	ldr	r2, [pc, #356]	; (8002b38 <HAL_GPIO_Init+0x298>)
 80029d4:	4b58      	ldr	r3, [pc, #352]	; (8002b38 <HAL_GPIO_Init+0x298>)
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	6193      	str	r3, [r2, #24]
 80029de:	4b56      	ldr	r3, [pc, #344]	; (8002b38 <HAL_GPIO_Init+0x298>)
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	60bb      	str	r3, [r7, #8]
 80029e8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029ea:	4a54      	ldr	r2, [pc, #336]	; (8002b3c <HAL_GPIO_Init+0x29c>)
 80029ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ee:	089b      	lsrs	r3, r3, #2
 80029f0:	3302      	adds	r3, #2
 80029f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	220f      	movs	r2, #15
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a4b      	ldr	r2, [pc, #300]	; (8002b40 <HAL_GPIO_Init+0x2a0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d013      	beq.n	8002a3e <HAL_GPIO_Init+0x19e>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a4a      	ldr	r2, [pc, #296]	; (8002b44 <HAL_GPIO_Init+0x2a4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00d      	beq.n	8002a3a <HAL_GPIO_Init+0x19a>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a49      	ldr	r2, [pc, #292]	; (8002b48 <HAL_GPIO_Init+0x2a8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d007      	beq.n	8002a36 <HAL_GPIO_Init+0x196>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a48      	ldr	r2, [pc, #288]	; (8002b4c <HAL_GPIO_Init+0x2ac>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d101      	bne.n	8002a32 <HAL_GPIO_Init+0x192>
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e006      	b.n	8002a40 <HAL_GPIO_Init+0x1a0>
 8002a32:	2304      	movs	r3, #4
 8002a34:	e004      	b.n	8002a40 <HAL_GPIO_Init+0x1a0>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e002      	b.n	8002a40 <HAL_GPIO_Init+0x1a0>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <HAL_GPIO_Init+0x1a0>
 8002a3e:	2300      	movs	r3, #0
 8002a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a42:	f002 0203 	and.w	r2, r2, #3
 8002a46:	0092      	lsls	r2, r2, #2
 8002a48:	4093      	lsls	r3, r2
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a50:	493a      	ldr	r1, [pc, #232]	; (8002b3c <HAL_GPIO_Init+0x29c>)
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	089b      	lsrs	r3, r3, #2
 8002a56:	3302      	adds	r3, #2
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d006      	beq.n	8002a78 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a6a:	4939      	ldr	r1, [pc, #228]	; (8002b50 <HAL_GPIO_Init+0x2b0>)
 8002a6c:	4b38      	ldr	r3, [pc, #224]	; (8002b50 <HAL_GPIO_Init+0x2b0>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	600b      	str	r3, [r1, #0]
 8002a76:	e006      	b.n	8002a86 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a78:	4935      	ldr	r1, [pc, #212]	; (8002b50 <HAL_GPIO_Init+0x2b0>)
 8002a7a:	4b35      	ldr	r3, [pc, #212]	; (8002b50 <HAL_GPIO_Init+0x2b0>)
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	4013      	ands	r3, r2
 8002a84:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d006      	beq.n	8002aa0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a92:	492f      	ldr	r1, [pc, #188]	; (8002b50 <HAL_GPIO_Init+0x2b0>)
 8002a94:	4b2e      	ldr	r3, [pc, #184]	; (8002b50 <HAL_GPIO_Init+0x2b0>)
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	604b      	str	r3, [r1, #4]
 8002a9e:	e006      	b.n	8002aae <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002aa0:	492b      	ldr	r1, [pc, #172]	; (8002b50 <HAL_GPIO_Init+0x2b0>)
 8002aa2:	4b2b      	ldr	r3, [pc, #172]	; (8002b50 <HAL_GPIO_Init+0x2b0>)
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	4013      	ands	r3, r2
 8002aac:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d006      	beq.n	8002ac8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002aba:	4925      	ldr	r1, [pc, #148]	; (8002b50 <HAL_GPIO_Init+0x2b0>)
 8002abc:	4b24      	ldr	r3, [pc, #144]	; (8002b50 <HAL_GPIO_Init+0x2b0>)
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	608b      	str	r3, [r1, #8]
 8002ac6:	e006      	b.n	8002ad6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ac8:	4921      	ldr	r1, [pc, #132]	; (8002b50 <HAL_GPIO_Init+0x2b0>)
 8002aca:	4b21      	ldr	r3, [pc, #132]	; (8002b50 <HAL_GPIO_Init+0x2b0>)
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d006      	beq.n	8002af0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ae2:	491b      	ldr	r1, [pc, #108]	; (8002b50 <HAL_GPIO_Init+0x2b0>)
 8002ae4:	4b1a      	ldr	r3, [pc, #104]	; (8002b50 <HAL_GPIO_Init+0x2b0>)
 8002ae6:	68da      	ldr	r2, [r3, #12]
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60cb      	str	r3, [r1, #12]
 8002aee:	e006      	b.n	8002afe <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002af0:	4917      	ldr	r1, [pc, #92]	; (8002b50 <HAL_GPIO_Init+0x2b0>)
 8002af2:	4b17      	ldr	r3, [pc, #92]	; (8002b50 <HAL_GPIO_Init+0x2b0>)
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	4013      	ands	r3, r2
 8002afc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	3301      	adds	r3, #1
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f47f aed0 	bne.w	80028b4 <HAL_GPIO_Init+0x14>
  }
}
 8002b14:	bf00      	nop
 8002b16:	372c      	adds	r7, #44	; 0x2c
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	10210000 	.word	0x10210000
 8002b24:	10110000 	.word	0x10110000
 8002b28:	10120000 	.word	0x10120000
 8002b2c:	10310000 	.word	0x10310000
 8002b30:	10320000 	.word	0x10320000
 8002b34:	10220000 	.word	0x10220000
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40010000 	.word	0x40010000
 8002b40:	40010800 	.word	0x40010800
 8002b44:	40010c00 	.word	0x40010c00
 8002b48:	40011000 	.word	0x40011000
 8002b4c:	40011400 	.word	0x40011400
 8002b50:	40010400 	.word	0x40010400

08002b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	807b      	strh	r3, [r7, #2]
 8002b60:	4613      	mov	r3, r2
 8002b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b64:	787b      	ldrb	r3, [r7, #1]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b6a:	887a      	ldrh	r2, [r7, #2]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b70:	e003      	b.n	8002b7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b72:	887b      	ldrh	r3, [r7, #2]
 8002b74:	041a      	lsls	r2, r3, #16
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	611a      	str	r2, [r3, #16]
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b84:	b590      	push	{r4, r7, lr}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e11f      	b.n	8002dd6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d106      	bne.n	8002bb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7fe fe6a 	bl	8001884 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2224      	movs	r2, #36	; 0x24
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6812      	ldr	r2, [r2, #0]
 8002bc0:	6812      	ldr	r2, [r2, #0]
 8002bc2:	f022 0201 	bic.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6812      	ldr	r2, [r2, #0]
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6812      	ldr	r2, [r2, #0]
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002be6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002be8:	f000 fcda 	bl	80035a0 <HAL_RCC_GetPCLK1Freq>
 8002bec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	4a7b      	ldr	r2, [pc, #492]	; (8002de0 <HAL_I2C_Init+0x25c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d807      	bhi.n	8002c08 <HAL_I2C_Init+0x84>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4a7a      	ldr	r2, [pc, #488]	; (8002de4 <HAL_I2C_Init+0x260>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	bf94      	ite	ls
 8002c00:	2301      	movls	r3, #1
 8002c02:	2300      	movhi	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	e006      	b.n	8002c16 <HAL_I2C_Init+0x92>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4a77      	ldr	r2, [pc, #476]	; (8002de8 <HAL_I2C_Init+0x264>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	bf94      	ite	ls
 8002c10:	2301      	movls	r3, #1
 8002c12:	2300      	movhi	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e0db      	b.n	8002dd6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	4a72      	ldr	r2, [pc, #456]	; (8002dec <HAL_I2C_Init+0x268>)
 8002c22:	fba2 2303 	umull	r2, r3, r2, r3
 8002c26:	0c9b      	lsrs	r3, r3, #18
 8002c28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6812      	ldr	r2, [r2, #0]
 8002c32:	6852      	ldr	r2, [r2, #4]
 8002c34:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	4863      	ldr	r0, [pc, #396]	; (8002de0 <HAL_I2C_Init+0x25c>)
 8002c52:	4283      	cmp	r3, r0
 8002c54:	d802      	bhi.n	8002c5c <HAL_I2C_Init+0xd8>
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	e009      	b.n	8002c70 <HAL_I2C_Init+0xec>
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002c62:	fb00 f303 	mul.w	r3, r0, r3
 8002c66:	4862      	ldr	r0, [pc, #392]	; (8002df0 <HAL_I2C_Init+0x26c>)
 8002c68:	fba0 0303 	umull	r0, r3, r0, r3
 8002c6c:	099b      	lsrs	r3, r3, #6
 8002c6e:	3301      	adds	r3, #1
 8002c70:	430b      	orrs	r3, r1
 8002c72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6818      	ldr	r0, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	4955      	ldr	r1, [pc, #340]	; (8002de0 <HAL_I2C_Init+0x25c>)
 8002c8c:	428b      	cmp	r3, r1
 8002c8e:	d80d      	bhi.n	8002cac <HAL_I2C_Init+0x128>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	1e59      	subs	r1, r3, #1
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	bf38      	it	cc
 8002ca8:	2304      	movcc	r3, #4
 8002caa:	e04f      	b.n	8002d4c <HAL_I2C_Init+0x1c8>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d111      	bne.n	8002cd8 <HAL_I2C_Init+0x154>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	1e5c      	subs	r4, r3, #1
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6859      	ldr	r1, [r3, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	440b      	add	r3, r1
 8002cc2:	fbb4 f3f3 	udiv	r3, r4, r3
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	bf0c      	ite	eq
 8002cd0:	2301      	moveq	r3, #1
 8002cd2:	2300      	movne	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	e012      	b.n	8002cfe <HAL_I2C_Init+0x17a>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	1e5c      	subs	r4, r3, #1
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6859      	ldr	r1, [r3, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	0099      	lsls	r1, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	fbb4 f3f3 	udiv	r3, r4, r3
 8002cee:	3301      	adds	r3, #1
 8002cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	bf0c      	ite	eq
 8002cf8:	2301      	moveq	r3, #1
 8002cfa:	2300      	movne	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_I2C_Init+0x182>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e022      	b.n	8002d4c <HAL_I2C_Init+0x1c8>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10e      	bne.n	8002d2c <HAL_I2C_Init+0x1a8>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	1e5c      	subs	r4, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6859      	ldr	r1, [r3, #4]
 8002d16:	460b      	mov	r3, r1
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	440b      	add	r3, r1
 8002d1c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002d20:	3301      	adds	r3, #1
 8002d22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d2a:	e00f      	b.n	8002d4c <HAL_I2C_Init+0x1c8>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	1e5c      	subs	r4, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6859      	ldr	r1, [r3, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	0099      	lsls	r1, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	fbb4 f3f3 	udiv	r3, r4, r3
 8002d42:	3301      	adds	r3, #1
 8002d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6812      	ldr	r2, [r2, #0]
 8002d58:	6812      	ldr	r2, [r2, #0]
 8002d5a:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	69d0      	ldr	r0, [r2, #28]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6a12      	ldr	r2, [r2, #32]
 8002d66:	4302      	orrs	r2, r0
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	6908      	ldr	r0, [r1, #16]
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	68c9      	ldr	r1, [r1, #12]
 8002d86:	4301      	orrs	r1, r0
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	68d2      	ldr	r2, [r2, #12]
 8002d96:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6950      	ldr	r0, [r2, #20]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6992      	ldr	r2, [r2, #24]
 8002da2:	4302      	orrs	r2, r0
 8002da4:	430a      	orrs	r2, r1
 8002da6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6812      	ldr	r2, [r2, #0]
 8002db0:	6812      	ldr	r2, [r2, #0]
 8002db2:	f042 0201 	orr.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd90      	pop	{r4, r7, pc}
 8002dde:	bf00      	nop
 8002de0:	000186a0 	.word	0x000186a0
 8002de4:	001e847f 	.word	0x001e847f
 8002de8:	003d08ff 	.word	0x003d08ff
 8002dec:	431bde83 	.word	0x431bde83
 8002df0:	10624dd3 	.word	0x10624dd3

08002df4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e26c      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 8087 	beq.w	8002f22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e14:	4b92      	ldr	r3, [pc, #584]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 030c 	and.w	r3, r3, #12
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d00c      	beq.n	8002e3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e20:	4b8f      	ldr	r3, [pc, #572]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 030c 	and.w	r3, r3, #12
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d112      	bne.n	8002e52 <HAL_RCC_OscConfig+0x5e>
 8002e2c:	4b8c      	ldr	r3, [pc, #560]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e38:	d10b      	bne.n	8002e52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e3a:	4b89      	ldr	r3, [pc, #548]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d06c      	beq.n	8002f20 <HAL_RCC_OscConfig+0x12c>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d168      	bne.n	8002f20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e246      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e5a:	d106      	bne.n	8002e6a <HAL_RCC_OscConfig+0x76>
 8002e5c:	4a80      	ldr	r2, [pc, #512]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002e5e:	4b80      	ldr	r3, [pc, #512]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e66:	6013      	str	r3, [r2, #0]
 8002e68:	e02e      	b.n	8002ec8 <HAL_RCC_OscConfig+0xd4>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10c      	bne.n	8002e8c <HAL_RCC_OscConfig+0x98>
 8002e72:	4a7b      	ldr	r2, [pc, #492]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002e74:	4b7a      	ldr	r3, [pc, #488]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	4a78      	ldr	r2, [pc, #480]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002e80:	4b77      	ldr	r3, [pc, #476]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	e01d      	b.n	8002ec8 <HAL_RCC_OscConfig+0xd4>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e94:	d10c      	bne.n	8002eb0 <HAL_RCC_OscConfig+0xbc>
 8002e96:	4a72      	ldr	r2, [pc, #456]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002e98:	4b71      	ldr	r3, [pc, #452]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	4a6f      	ldr	r2, [pc, #444]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002ea4:	4b6e      	ldr	r3, [pc, #440]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	e00b      	b.n	8002ec8 <HAL_RCC_OscConfig+0xd4>
 8002eb0:	4a6b      	ldr	r2, [pc, #428]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002eb2:	4b6b      	ldr	r3, [pc, #428]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eba:	6013      	str	r3, [r2, #0]
 8002ebc:	4a68      	ldr	r2, [pc, #416]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002ebe:	4b68      	ldr	r3, [pc, #416]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ec6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d013      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed0:	f7fe ff96 	bl	8001e00 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed8:	f7fe ff92 	bl	8001e00 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b64      	cmp	r3, #100	; 0x64
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e1fa      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eea:	4b5d      	ldr	r3, [pc, #372]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0f0      	beq.n	8002ed8 <HAL_RCC_OscConfig+0xe4>
 8002ef6:	e014      	b.n	8002f22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef8:	f7fe ff82 	bl	8001e00 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f00:	f7fe ff7e 	bl	8001e00 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b64      	cmp	r3, #100	; 0x64
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e1e6      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f12:	4b53      	ldr	r3, [pc, #332]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f0      	bne.n	8002f00 <HAL_RCC_OscConfig+0x10c>
 8002f1e:	e000      	b.n	8002f22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d063      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f2e:	4b4c      	ldr	r3, [pc, #304]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f003 030c 	and.w	r3, r3, #12
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00b      	beq.n	8002f52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f3a:	4b49      	ldr	r3, [pc, #292]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	2b08      	cmp	r3, #8
 8002f44:	d11c      	bne.n	8002f80 <HAL_RCC_OscConfig+0x18c>
 8002f46:	4b46      	ldr	r3, [pc, #280]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d116      	bne.n	8002f80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f52:	4b43      	ldr	r3, [pc, #268]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d005      	beq.n	8002f6a <HAL_RCC_OscConfig+0x176>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d001      	beq.n	8002f6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e1ba      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f6a:	493d      	ldr	r1, [pc, #244]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002f6c:	4b3c      	ldr	r3, [pc, #240]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f7e:	e03a      	b.n	8002ff6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d020      	beq.n	8002fca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f88:	4b36      	ldr	r3, [pc, #216]	; (8003064 <HAL_RCC_OscConfig+0x270>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8e:	f7fe ff37 	bl	8001e00 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f96:	f7fe ff33 	bl	8001e00 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e19b      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa8:	4b2d      	ldr	r3, [pc, #180]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0f0      	beq.n	8002f96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb4:	492a      	ldr	r1, [pc, #168]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002fb6:	4b2a      	ldr	r3, [pc, #168]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	600b      	str	r3, [r1, #0]
 8002fc8:	e015      	b.n	8002ff6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fca:	4b26      	ldr	r3, [pc, #152]	; (8003064 <HAL_RCC_OscConfig+0x270>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd0:	f7fe ff16 	bl	8001e00 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fd8:	f7fe ff12 	bl	8001e00 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e17a      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fea:	4b1d      	ldr	r3, [pc, #116]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d03a      	beq.n	8003078 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d019      	beq.n	800303e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800300a:	4b17      	ldr	r3, [pc, #92]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 800300c:	2201      	movs	r2, #1
 800300e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003010:	f7fe fef6 	bl	8001e00 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003018:	f7fe fef2 	bl	8001e00 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e15a      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800302a:	4b0d      	ldr	r3, [pc, #52]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0f0      	beq.n	8003018 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003036:	2001      	movs	r0, #1
 8003038:	f000 fada 	bl	80035f0 <RCC_Delay>
 800303c:	e01c      	b.n	8003078 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800303e:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003044:	f7fe fedc 	bl	8001e00 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800304a:	e00f      	b.n	800306c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800304c:	f7fe fed8 	bl	8001e00 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d908      	bls.n	800306c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e140      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>
 800305e:	bf00      	nop
 8003060:	40021000 	.word	0x40021000
 8003064:	42420000 	.word	0x42420000
 8003068:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800306c:	4b9e      	ldr	r3, [pc, #632]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1e9      	bne.n	800304c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 80a6 	beq.w	80031d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003086:	2300      	movs	r3, #0
 8003088:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800308a:	4b97      	ldr	r3, [pc, #604]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10d      	bne.n	80030b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003096:	4a94      	ldr	r2, [pc, #592]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 8003098:	4b93      	ldr	r3, [pc, #588]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a0:	61d3      	str	r3, [r2, #28]
 80030a2:	4b91      	ldr	r3, [pc, #580]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030aa:	60bb      	str	r3, [r7, #8]
 80030ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ae:	2301      	movs	r3, #1
 80030b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b2:	4b8e      	ldr	r3, [pc, #568]	; (80032ec <HAL_RCC_OscConfig+0x4f8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d118      	bne.n	80030f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030be:	4a8b      	ldr	r2, [pc, #556]	; (80032ec <HAL_RCC_OscConfig+0x4f8>)
 80030c0:	4b8a      	ldr	r3, [pc, #552]	; (80032ec <HAL_RCC_OscConfig+0x4f8>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ca:	f7fe fe99 	bl	8001e00 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d2:	f7fe fe95 	bl	8001e00 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b64      	cmp	r3, #100	; 0x64
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e0fd      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e4:	4b81      	ldr	r3, [pc, #516]	; (80032ec <HAL_RCC_OscConfig+0x4f8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0f0      	beq.n	80030d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d106      	bne.n	8003106 <HAL_RCC_OscConfig+0x312>
 80030f8:	4a7b      	ldr	r2, [pc, #492]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 80030fa:	4b7b      	ldr	r3, [pc, #492]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	f043 0301 	orr.w	r3, r3, #1
 8003102:	6213      	str	r3, [r2, #32]
 8003104:	e02d      	b.n	8003162 <HAL_RCC_OscConfig+0x36e>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10c      	bne.n	8003128 <HAL_RCC_OscConfig+0x334>
 800310e:	4a76      	ldr	r2, [pc, #472]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 8003110:	4b75      	ldr	r3, [pc, #468]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	f023 0301 	bic.w	r3, r3, #1
 8003118:	6213      	str	r3, [r2, #32]
 800311a:	4a73      	ldr	r2, [pc, #460]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 800311c:	4b72      	ldr	r3, [pc, #456]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	f023 0304 	bic.w	r3, r3, #4
 8003124:	6213      	str	r3, [r2, #32]
 8003126:	e01c      	b.n	8003162 <HAL_RCC_OscConfig+0x36e>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	2b05      	cmp	r3, #5
 800312e:	d10c      	bne.n	800314a <HAL_RCC_OscConfig+0x356>
 8003130:	4a6d      	ldr	r2, [pc, #436]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 8003132:	4b6d      	ldr	r3, [pc, #436]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	f043 0304 	orr.w	r3, r3, #4
 800313a:	6213      	str	r3, [r2, #32]
 800313c:	4a6a      	ldr	r2, [pc, #424]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 800313e:	4b6a      	ldr	r3, [pc, #424]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	f043 0301 	orr.w	r3, r3, #1
 8003146:	6213      	str	r3, [r2, #32]
 8003148:	e00b      	b.n	8003162 <HAL_RCC_OscConfig+0x36e>
 800314a:	4a67      	ldr	r2, [pc, #412]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 800314c:	4b66      	ldr	r3, [pc, #408]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	f023 0301 	bic.w	r3, r3, #1
 8003154:	6213      	str	r3, [r2, #32]
 8003156:	4a64      	ldr	r2, [pc, #400]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 8003158:	4b63      	ldr	r3, [pc, #396]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	f023 0304 	bic.w	r3, r3, #4
 8003160:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d015      	beq.n	8003196 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800316a:	f7fe fe49 	bl	8001e00 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003170:	e00a      	b.n	8003188 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003172:	f7fe fe45 	bl	8001e00 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003180:	4293      	cmp	r3, r2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e0ab      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003188:	4b57      	ldr	r3, [pc, #348]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0ee      	beq.n	8003172 <HAL_RCC_OscConfig+0x37e>
 8003194:	e014      	b.n	80031c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003196:	f7fe fe33 	bl	8001e00 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800319c:	e00a      	b.n	80031b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800319e:	f7fe fe2f 	bl	8001e00 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e095      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b4:	4b4c      	ldr	r3, [pc, #304]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1ee      	bne.n	800319e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031c0:	7dfb      	ldrb	r3, [r7, #23]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d105      	bne.n	80031d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c6:	4a48      	ldr	r2, [pc, #288]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 80031c8:	4b47      	ldr	r3, [pc, #284]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 8081 	beq.w	80032de <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031dc:	4b42      	ldr	r3, [pc, #264]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f003 030c 	and.w	r3, r3, #12
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d061      	beq.n	80032ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d146      	bne.n	800327e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f0:	4b3f      	ldr	r3, [pc, #252]	; (80032f0 <HAL_RCC_OscConfig+0x4fc>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f6:	f7fe fe03 	bl	8001e00 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031fe:	f7fe fdff 	bl	8001e00 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e067      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003210:	4b35      	ldr	r3, [pc, #212]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1f0      	bne.n	80031fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003224:	d108      	bne.n	8003238 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003226:	4930      	ldr	r1, [pc, #192]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 8003228:	4b2f      	ldr	r3, [pc, #188]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	4313      	orrs	r3, r2
 8003236:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003238:	482b      	ldr	r0, [pc, #172]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 800323a:	4b2b      	ldr	r3, [pc, #172]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a19      	ldr	r1, [r3, #32]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	430b      	orrs	r3, r1
 800324c:	4313      	orrs	r3, r2
 800324e:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003250:	4b27      	ldr	r3, [pc, #156]	; (80032f0 <HAL_RCC_OscConfig+0x4fc>)
 8003252:	2201      	movs	r2, #1
 8003254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003256:	f7fe fdd3 	bl	8001e00 <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800325e:	f7fe fdcf 	bl	8001e00 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e037      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003270:	4b1d      	ldr	r3, [pc, #116]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0f0      	beq.n	800325e <HAL_RCC_OscConfig+0x46a>
 800327c:	e02f      	b.n	80032de <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800327e:	4b1c      	ldr	r3, [pc, #112]	; (80032f0 <HAL_RCC_OscConfig+0x4fc>)
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003284:	f7fe fdbc 	bl	8001e00 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800328c:	f7fe fdb8 	bl	8001e00 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e020      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800329e:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f0      	bne.n	800328c <HAL_RCC_OscConfig+0x498>
 80032aa:	e018      	b.n	80032de <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e013      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032b8:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d106      	bne.n	80032da <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d001      	beq.n	80032de <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40021000 	.word	0x40021000
 80032ec:	40007000 	.word	0x40007000
 80032f0:	42420060 	.word	0x42420060

080032f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0d0      	b.n	80034aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003308:	4b6a      	ldr	r3, [pc, #424]	; (80034b4 <HAL_RCC_ClockConfig+0x1c0>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0207 	and.w	r2, r3, #7
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d210      	bcs.n	8003338 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003316:	4967      	ldr	r1, [pc, #412]	; (80034b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003318:	4b66      	ldr	r3, [pc, #408]	; (80034b4 <HAL_RCC_ClockConfig+0x1c0>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f023 0207 	bic.w	r2, r3, #7
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	4313      	orrs	r3, r2
 8003324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003326:	4b63      	ldr	r3, [pc, #396]	; (80034b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0207 	and.w	r2, r3, #7
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d001      	beq.n	8003338 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e0b8      	b.n	80034aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d020      	beq.n	8003386 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	d005      	beq.n	800335c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003350:	4a59      	ldr	r2, [pc, #356]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003352:	4b59      	ldr	r3, [pc, #356]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800335a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	2b00      	cmp	r3, #0
 8003366:	d005      	beq.n	8003374 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003368:	4a53      	ldr	r2, [pc, #332]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 800336a:	4b53      	ldr	r3, [pc, #332]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003372:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003374:	4950      	ldr	r1, [pc, #320]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003376:	4b50      	ldr	r3, [pc, #320]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	4313      	orrs	r3, r2
 8003384:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d040      	beq.n	8003414 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d107      	bne.n	80033aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800339a:	4b47      	ldr	r3, [pc, #284]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d115      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e07f      	b.n	80034aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d107      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b2:	4b41      	ldr	r3, [pc, #260]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d109      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e073      	b.n	80034aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c2:	4b3d      	ldr	r3, [pc, #244]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e06b      	b.n	80034aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033d2:	4939      	ldr	r1, [pc, #228]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 80033d4:	4b38      	ldr	r3, [pc, #224]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f023 0203 	bic.w	r2, r3, #3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033e4:	f7fe fd0c 	bl	8001e00 <HAL_GetTick>
 80033e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ea:	e00a      	b.n	8003402 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ec:	f7fe fd08 	bl	8001e00 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e053      	b.n	80034aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003402:	4b2d      	ldr	r3, [pc, #180]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f003 020c 	and.w	r2, r3, #12
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	429a      	cmp	r2, r3
 8003412:	d1eb      	bne.n	80033ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003414:	4b27      	ldr	r3, [pc, #156]	; (80034b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0207 	and.w	r2, r3, #7
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d910      	bls.n	8003444 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003422:	4924      	ldr	r1, [pc, #144]	; (80034b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003424:	4b23      	ldr	r3, [pc, #140]	; (80034b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f023 0207 	bic.w	r2, r3, #7
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	4313      	orrs	r3, r2
 8003430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003432:	4b20      	ldr	r3, [pc, #128]	; (80034b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0207 	and.w	r2, r3, #7
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d001      	beq.n	8003444 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e032      	b.n	80034aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003450:	4919      	ldr	r1, [pc, #100]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003452:	4b19      	ldr	r3, [pc, #100]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	4313      	orrs	r3, r2
 8003460:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b00      	cmp	r3, #0
 800346c:	d009      	beq.n	8003482 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800346e:	4912      	ldr	r1, [pc, #72]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003470:	4b11      	ldr	r3, [pc, #68]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	4313      	orrs	r3, r2
 8003480:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003482:	f000 f821 	bl	80034c8 <HAL_RCC_GetSysClockFreq>
 8003486:	4601      	mov	r1, r0
 8003488:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	091b      	lsrs	r3, r3, #4
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	4a0a      	ldr	r2, [pc, #40]	; (80034bc <HAL_RCC_ClockConfig+0x1c8>)
 8003494:	5cd3      	ldrb	r3, [r2, r3]
 8003496:	fa21 f303 	lsr.w	r3, r1, r3
 800349a:	4a09      	ldr	r2, [pc, #36]	; (80034c0 <HAL_RCC_ClockConfig+0x1cc>)
 800349c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800349e:	4b09      	ldr	r3, [pc, #36]	; (80034c4 <HAL_RCC_ClockConfig+0x1d0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fe fc6a 	bl	8001d7c <HAL_InitTick>

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40022000 	.word	0x40022000
 80034b8:	40021000 	.word	0x40021000
 80034bc:	080079b0 	.word	0x080079b0
 80034c0:	20000000 	.word	0x20000000
 80034c4:	20000004 	.word	0x20000004

080034c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c8:	b490      	push	{r4, r7}
 80034ca:	b08a      	sub	sp, #40	; 0x28
 80034cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80034ce:	4b2a      	ldr	r3, [pc, #168]	; (8003578 <HAL_RCC_GetSysClockFreq+0xb0>)
 80034d0:	1d3c      	adds	r4, r7, #4
 80034d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80034d8:	4b28      	ldr	r3, [pc, #160]	; (800357c <HAL_RCC_GetSysClockFreq+0xb4>)
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034de:	2300      	movs	r3, #0
 80034e0:	61fb      	str	r3, [r7, #28]
 80034e2:	2300      	movs	r3, #0
 80034e4:	61bb      	str	r3, [r7, #24]
 80034e6:	2300      	movs	r3, #0
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ea:	2300      	movs	r3, #0
 80034ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034f2:	4b23      	ldr	r3, [pc, #140]	; (8003580 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f003 030c 	and.w	r3, r3, #12
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d002      	beq.n	8003508 <HAL_RCC_GetSysClockFreq+0x40>
 8003502:	2b08      	cmp	r3, #8
 8003504:	d003      	beq.n	800350e <HAL_RCC_GetSysClockFreq+0x46>
 8003506:	e02d      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003508:	4b1e      	ldr	r3, [pc, #120]	; (8003584 <HAL_RCC_GetSysClockFreq+0xbc>)
 800350a:	623b      	str	r3, [r7, #32]
      break;
 800350c:	e02d      	b.n	800356a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	0c9b      	lsrs	r3, r3, #18
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800351a:	4413      	add	r3, r2
 800351c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003520:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d013      	beq.n	8003554 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800352c:	4b14      	ldr	r3, [pc, #80]	; (8003580 <HAL_RCC_GetSysClockFreq+0xb8>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	0c5b      	lsrs	r3, r3, #17
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800353a:	4413      	add	r3, r2
 800353c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003540:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	4a0f      	ldr	r2, [pc, #60]	; (8003584 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003546:	fb02 f203 	mul.w	r2, r2, r3
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
 8003552:	e004      	b.n	800355e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	4a0c      	ldr	r2, [pc, #48]	; (8003588 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003558:	fb02 f303 	mul.w	r3, r2, r3
 800355c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	623b      	str	r3, [r7, #32]
      break;
 8003562:	e002      	b.n	800356a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003564:	4b07      	ldr	r3, [pc, #28]	; (8003584 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003566:	623b      	str	r3, [r7, #32]
      break;
 8003568:	bf00      	nop
    }
  }
  return sysclockfreq;
 800356a:	6a3b      	ldr	r3, [r7, #32]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3728      	adds	r7, #40	; 0x28
 8003570:	46bd      	mov	sp, r7
 8003572:	bc90      	pop	{r4, r7}
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	0800797c 	.word	0x0800797c
 800357c:	0800798c 	.word	0x0800798c
 8003580:	40021000 	.word	0x40021000
 8003584:	007a1200 	.word	0x007a1200
 8003588:	003d0900 	.word	0x003d0900

0800358c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003590:	4b02      	ldr	r3, [pc, #8]	; (800359c <HAL_RCC_GetHCLKFreq+0x10>)
 8003592:	681b      	ldr	r3, [r3, #0]
}
 8003594:	4618      	mov	r0, r3
 8003596:	46bd      	mov	sp, r7
 8003598:	bc80      	pop	{r7}
 800359a:	4770      	bx	lr
 800359c:	20000000 	.word	0x20000000

080035a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035a4:	f7ff fff2 	bl	800358c <HAL_RCC_GetHCLKFreq>
 80035a8:	4601      	mov	r1, r0
 80035aa:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	0a1b      	lsrs	r3, r3, #8
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	4a03      	ldr	r2, [pc, #12]	; (80035c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035b6:	5cd3      	ldrb	r3, [r2, r3]
 80035b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80035bc:	4618      	mov	r0, r3
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40021000 	.word	0x40021000
 80035c4:	080079c0 	.word	0x080079c0

080035c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035cc:	f7ff ffde 	bl	800358c <HAL_RCC_GetHCLKFreq>
 80035d0:	4601      	mov	r1, r0
 80035d2:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	0adb      	lsrs	r3, r3, #11
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	4a03      	ldr	r2, [pc, #12]	; (80035ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80035de:	5cd3      	ldrb	r3, [r2, r3]
 80035e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40021000 	.word	0x40021000
 80035ec:	080079c0 	.word	0x080079c0

080035f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035f8:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <RCC_Delay+0x34>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a0a      	ldr	r2, [pc, #40]	; (8003628 <RCC_Delay+0x38>)
 80035fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003602:	0a5b      	lsrs	r3, r3, #9
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	fb02 f303 	mul.w	r3, r2, r3
 800360a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800360c:	bf00      	nop
  }
  while (Delay --);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	1e5a      	subs	r2, r3, #1
 8003612:	60fa      	str	r2, [r7, #12]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1f9      	bne.n	800360c <RCC_Delay+0x1c>
}
 8003618:	bf00      	nop
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	bc80      	pop	{r7}
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	20000000 	.word	0x20000000
 8003628:	10624dd3 	.word	0x10624dd3

0800362c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	613b      	str	r3, [r7, #16]
 8003638:	2300      	movs	r3, #0
 800363a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b00      	cmp	r3, #0
 8003646:	d07d      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003648:	2300      	movs	r3, #0
 800364a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800364c:	4b4f      	ldr	r3, [pc, #316]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10d      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003658:	4a4c      	ldr	r2, [pc, #304]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800365a:	4b4c      	ldr	r3, [pc, #304]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003662:	61d3      	str	r3, [r2, #28]
 8003664:	4b49      	ldr	r3, [pc, #292]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800366c:	60bb      	str	r3, [r7, #8]
 800366e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003670:	2301      	movs	r3, #1
 8003672:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003674:	4b46      	ldr	r3, [pc, #280]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367c:	2b00      	cmp	r3, #0
 800367e:	d118      	bne.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003680:	4a43      	ldr	r2, [pc, #268]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003682:	4b43      	ldr	r3, [pc, #268]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800368a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800368c:	f7fe fbb8 	bl	8001e00 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003692:	e008      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003694:	f7fe fbb4 	bl	8001e00 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b64      	cmp	r3, #100	; 0x64
 80036a0:	d901      	bls.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e06d      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a6:	4b3a      	ldr	r3, [pc, #232]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d0f0      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036b2:	4b36      	ldr	r3, [pc, #216]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d02e      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d027      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036d0:	4b2e      	ldr	r3, [pc, #184]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036da:	4b2e      	ldr	r3, [pc, #184]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036dc:	2201      	movs	r2, #1
 80036de:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036e0:	4b2c      	ldr	r3, [pc, #176]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036e6:	4a29      	ldr	r2, [pc, #164]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d014      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f6:	f7fe fb83 	bl	8001e00 <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036fc:	e00a      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036fe:	f7fe fb7f 	bl	8001e00 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	f241 3288 	movw	r2, #5000	; 0x1388
 800370c:	4293      	cmp	r3, r2
 800370e:	d901      	bls.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e036      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003714:	4b1d      	ldr	r3, [pc, #116]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0ee      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003720:	491a      	ldr	r1, [pc, #104]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003722:	4b1a      	ldr	r3, [pc, #104]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	4313      	orrs	r3, r2
 8003730:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003732:	7dfb      	ldrb	r3, [r7, #23]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d105      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003738:	4a14      	ldr	r2, [pc, #80]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373a:	4b14      	ldr	r3, [pc, #80]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003742:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d008      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003750:	490e      	ldr	r1, [pc, #56]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003752:	4b0e      	ldr	r3, [pc, #56]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	4313      	orrs	r3, r2
 8003760:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0310 	and.w	r3, r3, #16
 800376a:	2b00      	cmp	r3, #0
 800376c:	d008      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800376e:	4907      	ldr	r1, [pc, #28]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003770:	4b06      	ldr	r3, [pc, #24]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	4313      	orrs	r3, r2
 800377e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40021000 	.word	0x40021000
 8003790:	40007000 	.word	0x40007000
 8003794:	42420440 	.word	0x42420440

08003798 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e041      	b.n	800382e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d106      	bne.n	80037c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7fe f89e 	bl	8001900 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2202      	movs	r2, #2
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3304      	adds	r3, #4
 80037d4:	4619      	mov	r1, r3
 80037d6:	4610      	mov	r0, r2
 80037d8:	f000 fbd2 	bl	8003f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b082      	sub	sp, #8
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e041      	b.n	80038cc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	d106      	bne.n	8003862 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f839 	bl	80038d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2202      	movs	r2, #2
 8003866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	3304      	adds	r3, #4
 8003872:	4619      	mov	r1, r3
 8003874:	4610      	mov	r0, r2
 8003876:	f000 fb83 	bl	8003f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bc80      	pop	{r7}
 80038e4:	4770      	bx	lr
	...

080038e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d109      	bne.n	800390c <HAL_TIM_PWM_Start+0x24>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b01      	cmp	r3, #1
 8003902:	bf14      	ite	ne
 8003904:	2301      	movne	r3, #1
 8003906:	2300      	moveq	r3, #0
 8003908:	b2db      	uxtb	r3, r3
 800390a:	e022      	b.n	8003952 <HAL_TIM_PWM_Start+0x6a>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	2b04      	cmp	r3, #4
 8003910:	d109      	bne.n	8003926 <HAL_TIM_PWM_Start+0x3e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b01      	cmp	r3, #1
 800391c:	bf14      	ite	ne
 800391e:	2301      	movne	r3, #1
 8003920:	2300      	moveq	r3, #0
 8003922:	b2db      	uxtb	r3, r3
 8003924:	e015      	b.n	8003952 <HAL_TIM_PWM_Start+0x6a>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b08      	cmp	r3, #8
 800392a:	d109      	bne.n	8003940 <HAL_TIM_PWM_Start+0x58>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b01      	cmp	r3, #1
 8003936:	bf14      	ite	ne
 8003938:	2301      	movne	r3, #1
 800393a:	2300      	moveq	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	e008      	b.n	8003952 <HAL_TIM_PWM_Start+0x6a>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b01      	cmp	r3, #1
 800394a:	bf14      	ite	ne
 800394c:	2301      	movne	r3, #1
 800394e:	2300      	moveq	r3, #0
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e05e      	b.n	8003a18 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d104      	bne.n	800396a <HAL_TIM_PWM_Start+0x82>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003968:	e013      	b.n	8003992 <HAL_TIM_PWM_Start+0xaa>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b04      	cmp	r3, #4
 800396e:	d104      	bne.n	800397a <HAL_TIM_PWM_Start+0x92>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2202      	movs	r2, #2
 8003974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003978:	e00b      	b.n	8003992 <HAL_TIM_PWM_Start+0xaa>
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b08      	cmp	r3, #8
 800397e:	d104      	bne.n	800398a <HAL_TIM_PWM_Start+0xa2>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003988:	e003      	b.n	8003992 <HAL_TIM_PWM_Start+0xaa>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2202      	movs	r2, #2
 800398e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2201      	movs	r2, #1
 8003998:	6839      	ldr	r1, [r7, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f000 fd70 	bl	8004480 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a1e      	ldr	r2, [pc, #120]	; (8003a20 <HAL_TIM_PWM_Start+0x138>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d107      	bne.n	80039ba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6812      	ldr	r2, [r2, #0]
 80039b2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80039b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a18      	ldr	r2, [pc, #96]	; (8003a20 <HAL_TIM_PWM_Start+0x138>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d00e      	beq.n	80039e2 <HAL_TIM_PWM_Start+0xfa>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039cc:	d009      	beq.n	80039e2 <HAL_TIM_PWM_Start+0xfa>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a14      	ldr	r2, [pc, #80]	; (8003a24 <HAL_TIM_PWM_Start+0x13c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d004      	beq.n	80039e2 <HAL_TIM_PWM_Start+0xfa>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a12      	ldr	r2, [pc, #72]	; (8003a28 <HAL_TIM_PWM_Start+0x140>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d111      	bne.n	8003a06 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2b06      	cmp	r3, #6
 80039f2:	d010      	beq.n	8003a16 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6812      	ldr	r2, [r2, #0]
 80039fc:	6812      	ldr	r2, [r2, #0]
 80039fe:	f042 0201 	orr.w	r2, r2, #1
 8003a02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a04:	e007      	b.n	8003a16 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6812      	ldr	r2, [r2, #0]
 8003a0e:	6812      	ldr	r2, [r2, #0]
 8003a10:	f042 0201 	orr.w	r2, r2, #1
 8003a14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40012c00 	.word	0x40012c00
 8003a24:	40000400 	.word	0x40000400
 8003a28:	40000800 	.word	0x40000800

08003a2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d122      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d11b      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f06f 0202 	mvn.w	r2, #2
 8003a58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fa6b 	bl	8003f4a <HAL_TIM_IC_CaptureCallback>
 8003a74:	e005      	b.n	8003a82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fa5e 	bl	8003f38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 fa6d 	bl	8003f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f003 0304 	and.w	r3, r3, #4
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d122      	bne.n	8003adc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b04      	cmp	r3, #4
 8003aa2:	d11b      	bne.n	8003adc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0204 	mvn.w	r2, #4
 8003aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 fa41 	bl	8003f4a <HAL_TIM_IC_CaptureCallback>
 8003ac8:	e005      	b.n	8003ad6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 fa34 	bl	8003f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 fa43 	bl	8003f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d122      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f003 0308 	and.w	r3, r3, #8
 8003af4:	2b08      	cmp	r3, #8
 8003af6:	d11b      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f06f 0208 	mvn.w	r2, #8
 8003b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2204      	movs	r2, #4
 8003b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 fa17 	bl	8003f4a <HAL_TIM_IC_CaptureCallback>
 8003b1c:	e005      	b.n	8003b2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 fa0a 	bl	8003f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 fa19 	bl	8003f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f003 0310 	and.w	r3, r3, #16
 8003b3a:	2b10      	cmp	r3, #16
 8003b3c:	d122      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f003 0310 	and.w	r3, r3, #16
 8003b48:	2b10      	cmp	r3, #16
 8003b4a:	d11b      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0210 	mvn.w	r2, #16
 8003b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2208      	movs	r2, #8
 8003b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f9ed 	bl	8003f4a <HAL_TIM_IC_CaptureCallback>
 8003b70:	e005      	b.n	8003b7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f9e0 	bl	8003f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f9ef 	bl	8003f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d10e      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d107      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0201 	mvn.w	r2, #1
 8003ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f9bb 	bl	8003f26 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bba:	2b80      	cmp	r3, #128	; 0x80
 8003bbc:	d10e      	bne.n	8003bdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc8:	2b80      	cmp	r3, #128	; 0x80
 8003bca:	d107      	bne.n	8003bdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 fcdd 	bl	8004596 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be6:	2b40      	cmp	r3, #64	; 0x40
 8003be8:	d10e      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf4:	2b40      	cmp	r3, #64	; 0x40
 8003bf6:	d107      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f9b3 	bl	8003f6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f003 0320 	and.w	r3, r3, #32
 8003c12:	2b20      	cmp	r3, #32
 8003c14:	d10e      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f003 0320 	and.w	r3, r3, #32
 8003c20:	2b20      	cmp	r3, #32
 8003c22:	d107      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f06f 0220 	mvn.w	r2, #32
 8003c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 fca8 	bl	8004584 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c34:	bf00      	nop
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d101      	bne.n	8003c56 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e0ac      	b.n	8003db0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b0c      	cmp	r3, #12
 8003c62:	f200 809f 	bhi.w	8003da4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003c66:	a201      	add	r2, pc, #4	; (adr r2, 8003c6c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6c:	08003ca1 	.word	0x08003ca1
 8003c70:	08003da5 	.word	0x08003da5
 8003c74:	08003da5 	.word	0x08003da5
 8003c78:	08003da5 	.word	0x08003da5
 8003c7c:	08003ce1 	.word	0x08003ce1
 8003c80:	08003da5 	.word	0x08003da5
 8003c84:	08003da5 	.word	0x08003da5
 8003c88:	08003da5 	.word	0x08003da5
 8003c8c:	08003d23 	.word	0x08003d23
 8003c90:	08003da5 	.word	0x08003da5
 8003c94:	08003da5 	.word	0x08003da5
 8003c98:	08003da5 	.word	0x08003da5
 8003c9c:	08003d63 	.word	0x08003d63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68b9      	ldr	r1, [r7, #8]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 f9cc 	bl	8004044 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	6812      	ldr	r2, [r2, #0]
 8003cb4:	6992      	ldr	r2, [r2, #24]
 8003cb6:	f042 0208 	orr.w	r2, r2, #8
 8003cba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	6812      	ldr	r2, [r2, #0]
 8003cc4:	6992      	ldr	r2, [r2, #24]
 8003cc6:	f022 0204 	bic.w	r2, r2, #4
 8003cca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	6812      	ldr	r2, [r2, #0]
 8003cd4:	6991      	ldr	r1, [r2, #24]
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	6912      	ldr	r2, [r2, #16]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	619a      	str	r2, [r3, #24]
      break;
 8003cde:	e062      	b.n	8003da6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68b9      	ldr	r1, [r7, #8]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 fa12 	bl	8004110 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	6812      	ldr	r2, [r2, #0]
 8003cf4:	6992      	ldr	r2, [r2, #24]
 8003cf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	6812      	ldr	r2, [r2, #0]
 8003d04:	6992      	ldr	r2, [r2, #24]
 8003d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	6812      	ldr	r2, [r2, #0]
 8003d14:	6991      	ldr	r1, [r2, #24]
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	6912      	ldr	r2, [r2, #16]
 8003d1a:	0212      	lsls	r2, r2, #8
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	619a      	str	r2, [r3, #24]
      break;
 8003d20:	e041      	b.n	8003da6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68b9      	ldr	r1, [r7, #8]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 fa5b 	bl	80041e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	6812      	ldr	r2, [r2, #0]
 8003d36:	69d2      	ldr	r2, [r2, #28]
 8003d38:	f042 0208 	orr.w	r2, r2, #8
 8003d3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	6812      	ldr	r2, [r2, #0]
 8003d46:	69d2      	ldr	r2, [r2, #28]
 8003d48:	f022 0204 	bic.w	r2, r2, #4
 8003d4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	6812      	ldr	r2, [r2, #0]
 8003d56:	69d1      	ldr	r1, [r2, #28]
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	6912      	ldr	r2, [r2, #16]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	61da      	str	r2, [r3, #28]
      break;
 8003d60:	e021      	b.n	8003da6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68b9      	ldr	r1, [r7, #8]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 faa5 	bl	80042b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	6812      	ldr	r2, [r2, #0]
 8003d76:	69d2      	ldr	r2, [r2, #28]
 8003d78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	6812      	ldr	r2, [r2, #0]
 8003d86:	69d2      	ldr	r2, [r2, #28]
 8003d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	6812      	ldr	r2, [r2, #0]
 8003d96:	69d1      	ldr	r1, [r2, #28]
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	6912      	ldr	r2, [r2, #16]
 8003d9c:	0212      	lsls	r2, r2, #8
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	61da      	str	r2, [r3, #28]
      break;
 8003da2:	e000      	b.n	8003da6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003da4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d101      	bne.n	8003dd0 <HAL_TIM_ConfigClockSource+0x18>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	e0a6      	b.n	8003f1e <HAL_TIM_ConfigClockSource+0x166>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003df6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2b40      	cmp	r3, #64	; 0x40
 8003e06:	d067      	beq.n	8003ed8 <HAL_TIM_ConfigClockSource+0x120>
 8003e08:	2b40      	cmp	r3, #64	; 0x40
 8003e0a:	d80b      	bhi.n	8003e24 <HAL_TIM_ConfigClockSource+0x6c>
 8003e0c:	2b10      	cmp	r3, #16
 8003e0e:	d073      	beq.n	8003ef8 <HAL_TIM_ConfigClockSource+0x140>
 8003e10:	2b10      	cmp	r3, #16
 8003e12:	d802      	bhi.n	8003e1a <HAL_TIM_ConfigClockSource+0x62>
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d06f      	beq.n	8003ef8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003e18:	e078      	b.n	8003f0c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e1a:	2b20      	cmp	r3, #32
 8003e1c:	d06c      	beq.n	8003ef8 <HAL_TIM_ConfigClockSource+0x140>
 8003e1e:	2b30      	cmp	r3, #48	; 0x30
 8003e20:	d06a      	beq.n	8003ef8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003e22:	e073      	b.n	8003f0c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e24:	2b70      	cmp	r3, #112	; 0x70
 8003e26:	d00d      	beq.n	8003e44 <HAL_TIM_ConfigClockSource+0x8c>
 8003e28:	2b70      	cmp	r3, #112	; 0x70
 8003e2a:	d804      	bhi.n	8003e36 <HAL_TIM_ConfigClockSource+0x7e>
 8003e2c:	2b50      	cmp	r3, #80	; 0x50
 8003e2e:	d033      	beq.n	8003e98 <HAL_TIM_ConfigClockSource+0xe0>
 8003e30:	2b60      	cmp	r3, #96	; 0x60
 8003e32:	d041      	beq.n	8003eb8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003e34:	e06a      	b.n	8003f0c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e3a:	d066      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0x152>
 8003e3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e40:	d017      	beq.n	8003e72 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003e42:	e063      	b.n	8003f0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6818      	ldr	r0, [r3, #0]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	6899      	ldr	r1, [r3, #8]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f000 faf5 	bl	8004442 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e66:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	609a      	str	r2, [r3, #8]
      break;
 8003e70:	e04c      	b.n	8003f0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6818      	ldr	r0, [r3, #0]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	6899      	ldr	r1, [r3, #8]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	f000 fade 	bl	8004442 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6812      	ldr	r2, [r2, #0]
 8003e8e:	6892      	ldr	r2, [r2, #8]
 8003e90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e94:	609a      	str	r2, [r3, #8]
      break;
 8003e96:	e039      	b.n	8003f0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6818      	ldr	r0, [r3, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	6859      	ldr	r1, [r3, #4]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	f000 fa55 	bl	8004354 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2150      	movs	r1, #80	; 0x50
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 faac 	bl	800440e <TIM_ITRx_SetConfig>
      break;
 8003eb6:	e029      	b.n	8003f0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	6859      	ldr	r1, [r3, #4]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	f000 fa73 	bl	80043b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2160      	movs	r1, #96	; 0x60
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 fa9c 	bl	800440e <TIM_ITRx_SetConfig>
      break;
 8003ed6:	e019      	b.n	8003f0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6818      	ldr	r0, [r3, #0]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	6859      	ldr	r1, [r3, #4]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	f000 fa35 	bl	8004354 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2140      	movs	r1, #64	; 0x40
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 fa8c 	bl	800440e <TIM_ITRx_SetConfig>
      break;
 8003ef6:	e009      	b.n	8003f0c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4619      	mov	r1, r3
 8003f02:	4610      	mov	r0, r2
 8003f04:	f000 fa83 	bl	800440e <TIM_ITRx_SetConfig>
        break;
 8003f08:	e000      	b.n	8003f0c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003f0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b083      	sub	sp, #12
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bc80      	pop	{r7}
 8003f36:	4770      	bx	lr

08003f38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr

08003f4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bc80      	pop	{r7}
 8003f5a:	4770      	bx	lr

08003f5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bc80      	pop	{r7}
 8003f6c:	4770      	bx	lr

08003f6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr

08003f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a29      	ldr	r2, [pc, #164]	; (8004038 <TIM_Base_SetConfig+0xb8>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d00b      	beq.n	8003fb0 <TIM_Base_SetConfig+0x30>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f9e:	d007      	beq.n	8003fb0 <TIM_Base_SetConfig+0x30>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a26      	ldr	r2, [pc, #152]	; (800403c <TIM_Base_SetConfig+0xbc>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d003      	beq.n	8003fb0 <TIM_Base_SetConfig+0x30>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a25      	ldr	r2, [pc, #148]	; (8004040 <TIM_Base_SetConfig+0xc0>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d108      	bne.n	8003fc2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a1c      	ldr	r2, [pc, #112]	; (8004038 <TIM_Base_SetConfig+0xb8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d00b      	beq.n	8003fe2 <TIM_Base_SetConfig+0x62>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd0:	d007      	beq.n	8003fe2 <TIM_Base_SetConfig+0x62>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a19      	ldr	r2, [pc, #100]	; (800403c <TIM_Base_SetConfig+0xbc>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d003      	beq.n	8003fe2 <TIM_Base_SetConfig+0x62>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a18      	ldr	r2, [pc, #96]	; (8004040 <TIM_Base_SetConfig+0xc0>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d108      	bne.n	8003ff4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a07      	ldr	r2, [pc, #28]	; (8004038 <TIM_Base_SetConfig+0xb8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d103      	bne.n	8004028 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	615a      	str	r2, [r3, #20]
}
 800402e:	bf00      	nop
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr
 8004038:	40012c00 	.word	0x40012c00
 800403c:	40000400 	.word	0x40000400
 8004040:	40000800 	.word	0x40000800

08004044 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	f023 0201 	bic.w	r2, r3, #1
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f023 0303 	bic.w	r3, r3, #3
 800407a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	4313      	orrs	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f023 0302 	bic.w	r3, r3, #2
 800408c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4313      	orrs	r3, r2
 8004096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a1c      	ldr	r2, [pc, #112]	; (800410c <TIM_OC1_SetConfig+0xc8>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d10c      	bne.n	80040ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f023 0308 	bic.w	r3, r3, #8
 80040a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f023 0304 	bic.w	r3, r3, #4
 80040b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a13      	ldr	r2, [pc, #76]	; (800410c <TIM_OC1_SetConfig+0xc8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d111      	bne.n	80040e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	621a      	str	r2, [r3, #32]
}
 8004100:	bf00      	nop
 8004102:	371c      	adds	r7, #28
 8004104:	46bd      	mov	sp, r7
 8004106:	bc80      	pop	{r7}
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40012c00 	.word	0x40012c00

08004110 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	f023 0210 	bic.w	r2, r3, #16
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800413e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004146:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	021b      	lsls	r3, r3, #8
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	4313      	orrs	r3, r2
 8004152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f023 0320 	bic.w	r3, r3, #32
 800415a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	4313      	orrs	r3, r2
 8004166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a1d      	ldr	r2, [pc, #116]	; (80041e0 <TIM_OC2_SetConfig+0xd0>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d10d      	bne.n	800418c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004176:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	4313      	orrs	r3, r2
 8004182:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800418a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a14      	ldr	r2, [pc, #80]	; (80041e0 <TIM_OC2_SetConfig+0xd0>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d113      	bne.n	80041bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800419a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	621a      	str	r2, [r3, #32]
}
 80041d6:	bf00      	nop
 80041d8:	371c      	adds	r7, #28
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr
 80041e0:	40012c00 	.word	0x40012c00

080041e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b087      	sub	sp, #28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f023 0303 	bic.w	r3, r3, #3
 800421a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800422c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	021b      	lsls	r3, r3, #8
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	4313      	orrs	r3, r2
 8004238:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a1d      	ldr	r2, [pc, #116]	; (80042b4 <TIM_OC3_SetConfig+0xd0>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d10d      	bne.n	800425e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004248:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	021b      	lsls	r3, r3, #8
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	4313      	orrs	r3, r2
 8004254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800425c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a14      	ldr	r2, [pc, #80]	; (80042b4 <TIM_OC3_SetConfig+0xd0>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d113      	bne.n	800428e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800426c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004274:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	4313      	orrs	r3, r2
 800428c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	621a      	str	r2, [r3, #32]
}
 80042a8:	bf00      	nop
 80042aa:	371c      	adds	r7, #28
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bc80      	pop	{r7}
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	40012c00 	.word	0x40012c00

080042b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	021b      	lsls	r3, r3, #8
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004302:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	031b      	lsls	r3, r3, #12
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	4313      	orrs	r3, r2
 800430e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a0f      	ldr	r2, [pc, #60]	; (8004350 <TIM_OC4_SetConfig+0x98>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d109      	bne.n	800432c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800431e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	019b      	lsls	r3, r3, #6
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	4313      	orrs	r3, r2
 800432a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	621a      	str	r2, [r3, #32]
}
 8004346:	bf00      	nop
 8004348:	371c      	adds	r7, #28
 800434a:	46bd      	mov	sp, r7
 800434c:	bc80      	pop	{r7}
 800434e:	4770      	bx	lr
 8004350:	40012c00 	.word	0x40012c00

08004354 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004354:	b480      	push	{r7}
 8004356:	b087      	sub	sp, #28
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	f023 0201 	bic.w	r2, r3, #1
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800437e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	4313      	orrs	r3, r2
 8004388:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f023 030a 	bic.w	r3, r3, #10
 8004390:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	4313      	orrs	r3, r2
 8004398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	621a      	str	r2, [r3, #32]
}
 80043a6:	bf00      	nop
 80043a8:	371c      	adds	r7, #28
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bc80      	pop	{r7}
 80043ae:	4770      	bx	lr

080043b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b087      	sub	sp, #28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	f023 0210 	bic.w	r2, r3, #16
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	031b      	lsls	r3, r3, #12
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	011b      	lsls	r3, r3, #4
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	621a      	str	r2, [r3, #32]
}
 8004404:	bf00      	nop
 8004406:	371c      	adds	r7, #28
 8004408:	46bd      	mov	sp, r7
 800440a:	bc80      	pop	{r7}
 800440c:	4770      	bx	lr

0800440e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800440e:	b480      	push	{r7}
 8004410:	b085      	sub	sp, #20
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
 8004416:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004424:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4313      	orrs	r3, r2
 800442c:	f043 0307 	orr.w	r3, r3, #7
 8004430:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	609a      	str	r2, [r3, #8]
}
 8004438:	bf00      	nop
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	bc80      	pop	{r7}
 8004440:	4770      	bx	lr

08004442 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004442:	b480      	push	{r7}
 8004444:	b087      	sub	sp, #28
 8004446:	af00      	add	r7, sp, #0
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	607a      	str	r2, [r7, #4]
 800444e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800445c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	021a      	lsls	r2, r3, #8
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	431a      	orrs	r2, r3
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	4313      	orrs	r3, r2
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	4313      	orrs	r3, r2
 800446e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	609a      	str	r2, [r3, #8]
}
 8004476:	bf00      	nop
 8004478:	371c      	adds	r7, #28
 800447a:	46bd      	mov	sp, r7
 800447c:	bc80      	pop	{r7}
 800447e:	4770      	bx	lr

08004480 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f003 031f 	and.w	r3, r3, #31
 8004492:	2201      	movs	r2, #1
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a1a      	ldr	r2, [r3, #32]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	43db      	mvns	r3, r3
 80044a2:	401a      	ands	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6a1a      	ldr	r2, [r3, #32]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f003 031f 	and.w	r3, r3, #31
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	fa01 f303 	lsl.w	r3, r1, r3
 80044b8:	431a      	orrs	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	621a      	str	r2, [r3, #32]
}
 80044be:	bf00      	nop
 80044c0:	371c      	adds	r7, #28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bc80      	pop	{r7}
 80044c6:	4770      	bx	lr

080044c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d101      	bne.n	80044e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044dc:	2302      	movs	r3, #2
 80044de:	e046      	b.n	800456e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2202      	movs	r2, #2
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004506:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	4313      	orrs	r3, r2
 8004510:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a16      	ldr	r2, [pc, #88]	; (8004578 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d00e      	beq.n	8004542 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800452c:	d009      	beq.n	8004542 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a12      	ldr	r2, [pc, #72]	; (800457c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d004      	beq.n	8004542 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a10      	ldr	r2, [pc, #64]	; (8004580 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d10c      	bne.n	800455c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004548:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	4313      	orrs	r3, r2
 8004552:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	bc80      	pop	{r7}
 8004576:	4770      	bx	lr
 8004578:	40012c00 	.word	0x40012c00
 800457c:	40000400 	.word	0x40000400
 8004580:	40000800 	.word	0x40000800

08004584 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	bc80      	pop	{r7}
 8004594:	4770      	bx	lr

08004596 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004596:	b480      	push	{r7}
 8004598:	b083      	sub	sp, #12
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bc80      	pop	{r7}
 80045a6:	4770      	bx	lr

080045a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e03f      	b.n	800463a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d106      	bne.n	80045d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7fd fa1a 	bl	8001a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2224      	movs	r2, #36	; 0x24
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6812      	ldr	r2, [r2, #0]
 80045e4:	68d2      	ldr	r2, [r2, #12]
 80045e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 fc7b 	bl	8004ee8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6812      	ldr	r2, [r2, #0]
 80045fa:	6912      	ldr	r2, [r2, #16]
 80045fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004600:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6812      	ldr	r2, [r2, #0]
 800460a:	6952      	ldr	r2, [r2, #20]
 800460c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004610:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6812      	ldr	r2, [r2, #0]
 800461a:	68d2      	ldr	r2, [r2, #12]
 800461c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004620:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2220      	movs	r2, #32
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2220      	movs	r2, #32
 8004634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b08a      	sub	sp, #40	; 0x28
 8004646:	af02      	add	r7, sp, #8
 8004648:	60f8      	str	r0, [r7, #12]
 800464a:	60b9      	str	r1, [r7, #8]
 800464c:	603b      	str	r3, [r7, #0]
 800464e:	4613      	mov	r3, r2
 8004650:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004652:	2300      	movs	r3, #0
 8004654:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b20      	cmp	r3, #32
 8004660:	d17b      	bne.n	800475a <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <HAL_UART_Transmit+0x2c>
 8004668:	88fb      	ldrh	r3, [r7, #6]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e074      	b.n	800475c <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004678:	2b01      	cmp	r3, #1
 800467a:	d101      	bne.n	8004680 <HAL_UART_Transmit+0x3e>
 800467c:	2302      	movs	r3, #2
 800467e:	e06d      	b.n	800475c <HAL_UART_Transmit+0x11a>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2221      	movs	r2, #33	; 0x21
 8004692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004696:	f7fd fbb3 	bl	8001e00 <HAL_GetTick>
 800469a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	88fa      	ldrh	r2, [r7, #6]
 80046a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	88fa      	ldrh	r2, [r7, #6]
 80046a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b0:	d108      	bne.n	80046c4 <HAL_UART_Transmit+0x82>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d104      	bne.n	80046c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80046ba:	2300      	movs	r3, #0
 80046bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	61bb      	str	r3, [r7, #24]
 80046c2:	e003      	b.n	80046cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046c8:	2300      	movs	r3, #0
 80046ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80046d4:	e029      	b.n	800472a <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2200      	movs	r2, #0
 80046de:	2180      	movs	r1, #128	; 0x80
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 fa2f 	bl	8004b44 <UART_WaitOnFlagUntilTimeout>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e035      	b.n	800475c <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10a      	bne.n	800470c <HAL_UART_Transmit+0xca>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	8812      	ldrh	r2, [r2, #0]
 80046fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004702:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	3302      	adds	r3, #2
 8004708:	61bb      	str	r3, [r7, #24]
 800470a:	e007      	b.n	800471c <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	69fa      	ldr	r2, [r7, #28]
 8004712:	7812      	ldrb	r2, [r2, #0]
 8004714:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	3301      	adds	r3, #1
 800471a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004720:	b29b      	uxth	r3, r3
 8004722:	3b01      	subs	r3, #1
 8004724:	b29a      	uxth	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800472e:	b29b      	uxth	r3, r3
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1d0      	bne.n	80046d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	2200      	movs	r2, #0
 800473c:	2140      	movs	r1, #64	; 0x40
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f000 fa00 	bl	8004b44 <UART_WaitOnFlagUntilTimeout>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <HAL_UART_Transmit+0x10c>
    {
      return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e006      	b.n	800475c <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2220      	movs	r2, #32
 8004752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004756:	2300      	movs	r3, #0
 8004758:	e000      	b.n	800475c <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800475a:	2302      	movs	r3, #2
  }
}
 800475c:	4618      	mov	r0, r3
 800475e:	3720      	adds	r7, #32
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	4613      	mov	r3, r2
 8004770:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b20      	cmp	r3, #32
 800477c:	d11d      	bne.n	80047ba <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d002      	beq.n	800478a <HAL_UART_Receive_IT+0x26>
 8004784:	88fb      	ldrh	r3, [r7, #6]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e016      	b.n	80047bc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004794:	2b01      	cmp	r3, #1
 8004796:	d101      	bne.n	800479c <HAL_UART_Receive_IT+0x38>
 8004798:	2302      	movs	r3, #2
 800479a:	e00f      	b.n	80047bc <HAL_UART_Receive_IT+0x58>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80047aa:	88fb      	ldrh	r3, [r7, #6]
 80047ac:	461a      	mov	r2, r3
 80047ae:	68b9      	ldr	r1, [r7, #8]
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 fa11 	bl	8004bd8 <UART_Start_Receive_IT>
 80047b6:	4603      	mov	r3, r0
 80047b8:	e000      	b.n	80047bc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80047ba:	2302      	movs	r3, #2
  }
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08a      	sub	sp, #40	; 0x28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	f003 030f 	and.w	r3, r3, #15
 80047f2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10d      	bne.n	8004816 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b00      	cmp	r3, #0
 8004802:	d008      	beq.n	8004816 <HAL_UART_IRQHandler+0x52>
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	f003 0320 	and.w	r3, r3, #32
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fac1 	bl	8004d96 <UART_Receive_IT>
      return;
 8004814:	e17c      	b.n	8004b10 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 80b1 	beq.w	8004980 <HAL_UART_IRQHandler+0x1bc>
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	2b00      	cmp	r3, #0
 8004826:	d105      	bne.n	8004834 <HAL_UART_IRQHandler+0x70>
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 80a6 	beq.w	8004980 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00a      	beq.n	8004854 <HAL_UART_IRQHandler+0x90>
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004844:	2b00      	cmp	r3, #0
 8004846:	d005      	beq.n	8004854 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	f043 0201 	orr.w	r2, r3, #1
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	f003 0304 	and.w	r3, r3, #4
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <HAL_UART_IRQHandler+0xb0>
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b00      	cmp	r3, #0
 8004866:	d005      	beq.n	8004874 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486c:	f043 0202 	orr.w	r2, r3, #2
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <HAL_UART_IRQHandler+0xd0>
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d005      	beq.n	8004894 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	f043 0204 	orr.w	r2, r3, #4
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	f003 0308 	and.w	r3, r3, #8
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00f      	beq.n	80048be <HAL_UART_IRQHandler+0xfa>
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	f003 0320 	and.w	r3, r3, #32
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d104      	bne.n	80048b2 <HAL_UART_IRQHandler+0xee>
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d005      	beq.n	80048be <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	f043 0208 	orr.w	r2, r3, #8
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f000 811f 	beq.w	8004b06 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	f003 0320 	and.w	r3, r3, #32
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d007      	beq.n	80048e2 <HAL_UART_IRQHandler+0x11e>
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	f003 0320 	and.w	r3, r3, #32
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 fa5a 	bl	8004d96 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	bf14      	ite	ne
 80048f0:	2301      	movne	r3, #1
 80048f2:	2300      	moveq	r3, #0
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fc:	f003 0308 	and.w	r3, r3, #8
 8004900:	2b00      	cmp	r3, #0
 8004902:	d102      	bne.n	800490a <HAL_UART_IRQHandler+0x146>
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d031      	beq.n	800496e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f99d 	bl	8004c4a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491a:	2b00      	cmp	r3, #0
 800491c:	d023      	beq.n	8004966 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6812      	ldr	r2, [r2, #0]
 8004926:	6952      	ldr	r2, [r2, #20]
 8004928:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800492c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004932:	2b00      	cmp	r3, #0
 8004934:	d013      	beq.n	800495e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493a:	4a77      	ldr	r2, [pc, #476]	; (8004b18 <HAL_UART_IRQHandler+0x354>)
 800493c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004942:	4618      	mov	r0, r3
 8004944:	f7fd fe1e 	bl	8002584 <HAL_DMA_Abort_IT>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d016      	beq.n	800497c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004958:	4610      	mov	r0, r2
 800495a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800495c:	e00e      	b.n	800497c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7fc f8b6 	bl	8000ad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004964:	e00a      	b.n	800497c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7fc f8b2 	bl	8000ad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800496c:	e006      	b.n	800497c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7fc f8ae 	bl	8000ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800497a:	e0c4      	b.n	8004b06 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800497c:	bf00      	nop
    return;
 800497e:	e0c2      	b.n	8004b06 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004984:	2b01      	cmp	r3, #1
 8004986:	f040 80a1 	bne.w	8004acc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	f003 0310 	and.w	r3, r3, #16
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 809b 	beq.w	8004acc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	f003 0310 	and.w	r3, r3, #16
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 8095 	beq.w	8004acc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049a2:	2300      	movs	r3, #0
 80049a4:	60fb      	str	r3, [r7, #12]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	60fb      	str	r3, [r7, #12]
 80049b6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d04e      	beq.n	8004a64 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	827b      	strh	r3, [r7, #18]
      if (  (nb_remaining_rx_data > 0U)
 80049d0:	8a7b      	ldrh	r3, [r7, #18]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 8099 	beq.w	8004b0a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049dc:	8a7a      	ldrh	r2, [r7, #18]
 80049de:	429a      	cmp	r2, r3
 80049e0:	f080 8093 	bcs.w	8004b0a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	8a7a      	ldrh	r2, [r7, #18]
 80049e8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	2b20      	cmp	r3, #32
 80049f2:	d02b      	beq.n	8004a4c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6812      	ldr	r2, [r2, #0]
 80049fc:	68d2      	ldr	r2, [r2, #12]
 80049fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a02:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6812      	ldr	r2, [r2, #0]
 8004a0c:	6952      	ldr	r2, [r2, #20]
 8004a0e:	f022 0201 	bic.w	r2, r2, #1
 8004a12:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	6812      	ldr	r2, [r2, #0]
 8004a1c:	6952      	ldr	r2, [r2, #20]
 8004a1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a22:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2220      	movs	r2, #32
 8004a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6812      	ldr	r2, [r2, #0]
 8004a3a:	68d2      	ldr	r2, [r2, #12]
 8004a3c:	f022 0210 	bic.w	r2, r2, #16
 8004a40:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fd fd62 	bl	8002510 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f866 	bl	8004b2e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004a62:	e052      	b.n	8004b0a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	823b      	strh	r3, [r7, #16]
      if (  (huart->RxXferCount > 0U)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d048      	beq.n	8004b0e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004a7c:	8a3b      	ldrh	r3, [r7, #16]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d045      	beq.n	8004b0e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	6812      	ldr	r2, [r2, #0]
 8004a8a:	68d2      	ldr	r2, [r2, #12]
 8004a8c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a90:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6812      	ldr	r2, [r2, #0]
 8004a9a:	6952      	ldr	r2, [r2, #20]
 8004a9c:	f022 0201 	bic.w	r2, r2, #1
 8004aa0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6812      	ldr	r2, [r2, #0]
 8004ab8:	68d2      	ldr	r2, [r2, #12]
 8004aba:	f022 0210 	bic.w	r2, r2, #16
 8004abe:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ac0:	8a3b      	ldrh	r3, [r7, #16]
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 f832 	bl	8004b2e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004aca:	e020      	b.n	8004b0e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d008      	beq.n	8004ae8 <HAL_UART_IRQHandler+0x324>
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f8f2 	bl	8004cca <UART_Transmit_IT>
    return;
 8004ae6:	e013      	b.n	8004b10 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00e      	beq.n	8004b10 <HAL_UART_IRQHandler+0x34c>
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d009      	beq.n	8004b10 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f932 	bl	8004d66 <UART_EndTransmit_IT>
    return;
 8004b02:	bf00      	nop
 8004b04:	e004      	b.n	8004b10 <HAL_UART_IRQHandler+0x34c>
    return;
 8004b06:	bf00      	nop
 8004b08:	e002      	b.n	8004b10 <HAL_UART_IRQHandler+0x34c>
      return;
 8004b0a:	bf00      	nop
 8004b0c:	e000      	b.n	8004b10 <HAL_UART_IRQHandler+0x34c>
      return;
 8004b0e:	bf00      	nop
  }
}
 8004b10:	3728      	adds	r7, #40	; 0x28
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	08004ca3 	.word	0x08004ca3

08004b1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bc80      	pop	{r7}
 8004b2c:	4770      	bx	lr

08004b2e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
 8004b36:	460b      	mov	r3, r1
 8004b38:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bc80      	pop	{r7}
 8004b42:	4770      	bx	lr

08004b44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	603b      	str	r3, [r7, #0]
 8004b50:	4613      	mov	r3, r2
 8004b52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b54:	e02c      	b.n	8004bb0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5c:	d028      	beq.n	8004bb0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d007      	beq.n	8004b74 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b64:	f7fd f94c 	bl	8001e00 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	1ad2      	subs	r2, r2, r3
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d91d      	bls.n	8004bb0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	6812      	ldr	r2, [r2, #0]
 8004b7c:	68d2      	ldr	r2, [r2, #12]
 8004b7e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b82:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	6812      	ldr	r2, [r2, #0]
 8004b8c:	6952      	ldr	r2, [r2, #20]
 8004b8e:	f022 0201 	bic.w	r2, r2, #1
 8004b92:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e00f      	b.n	8004bd0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	401a      	ands	r2, r3
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	bf0c      	ite	eq
 8004bc0:	2301      	moveq	r3, #1
 8004bc2:	2300      	movne	r3, #0
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	79fb      	ldrb	r3, [r7, #7]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d0c3      	beq.n	8004b56 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	4613      	mov	r3, r2
 8004be4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	88fa      	ldrh	r2, [r7, #6]
 8004bf0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	88fa      	ldrh	r2, [r7, #6]
 8004bf6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2222      	movs	r2, #34	; 0x22
 8004c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	6812      	ldr	r2, [r2, #0]
 8004c16:	68d2      	ldr	r2, [r2, #12]
 8004c18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c1c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	6812      	ldr	r2, [r2, #0]
 8004c26:	6952      	ldr	r2, [r2, #20]
 8004c28:	f042 0201 	orr.w	r2, r2, #1
 8004c2c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	6812      	ldr	r2, [r2, #0]
 8004c36:	68d2      	ldr	r2, [r2, #12]
 8004c38:	f042 0220 	orr.w	r2, r2, #32
 8004c3c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bc80      	pop	{r7}
 8004c48:	4770      	bx	lr

08004c4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6812      	ldr	r2, [r2, #0]
 8004c5a:	68d2      	ldr	r2, [r2, #12]
 8004c5c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c60:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6812      	ldr	r2, [r2, #0]
 8004c6a:	6952      	ldr	r2, [r2, #20]
 8004c6c:	f022 0201 	bic.w	r2, r2, #1
 8004c70:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d107      	bne.n	8004c8a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6812      	ldr	r2, [r2, #0]
 8004c82:	68d2      	ldr	r2, [r2, #12]
 8004c84:	f022 0210 	bic.w	r2, r2, #16
 8004c88:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bc80      	pop	{r7}
 8004ca0:	4770      	bx	lr

08004ca2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f7fb ff07 	bl	8000ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cc2:	bf00      	nop
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b085      	sub	sp, #20
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b21      	cmp	r3, #33	; 0x21
 8004cdc:	d13d      	bne.n	8004d5a <UART_Transmit_IT+0x90>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce6:	d113      	bne.n	8004d10 <UART_Transmit_IT+0x46>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10f      	bne.n	8004d10 <UART_Transmit_IT+0x46>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	8812      	ldrh	r2, [r2, #0]
 8004cfe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d02:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	1c9a      	adds	r2, r3, #2
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	621a      	str	r2, [r3, #32]
 8004d0e:	e008      	b.n	8004d22 <UART_Transmit_IT+0x58>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	1c58      	adds	r0, r3, #1
 8004d1a:	6879      	ldr	r1, [r7, #4]
 8004d1c:	6208      	str	r0, [r1, #32]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	4619      	mov	r1, r3
 8004d30:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10f      	bne.n	8004d56 <UART_Transmit_IT+0x8c>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	6812      	ldr	r2, [r2, #0]
 8004d3e:	68d2      	ldr	r2, [r2, #12]
 8004d40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d44:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	6812      	ldr	r2, [r2, #0]
 8004d4e:	68d2      	ldr	r2, [r2, #12]
 8004d50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d54:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d56:	2300      	movs	r3, #0
 8004d58:	e000      	b.n	8004d5c <UART_Transmit_IT+0x92>
  }
  else
  {
    return HAL_BUSY;
 8004d5a:	2302      	movs	r3, #2
  }
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3714      	adds	r7, #20
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bc80      	pop	{r7}
 8004d64:	4770      	bx	lr

08004d66 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b082      	sub	sp, #8
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6812      	ldr	r2, [r2, #0]
 8004d76:	68d2      	ldr	r2, [r2, #12]
 8004d78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d7c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2220      	movs	r2, #32
 8004d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7ff fec8 	bl	8004b1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b086      	sub	sp, #24
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b22      	cmp	r3, #34	; 0x22
 8004da8:	f040 8099 	bne.w	8004ede <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db4:	d117      	bne.n	8004de6 <UART_Receive_IT+0x50>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d113      	bne.n	8004de6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dde:	1c9a      	adds	r2, r3, #2
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	629a      	str	r2, [r3, #40]	; 0x28
 8004de4:	e026      	b.n	8004e34 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dea:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004dec:	2300      	movs	r3, #0
 8004dee:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df8:	d007      	beq.n	8004e0a <UART_Receive_IT+0x74>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10a      	bne.n	8004e18 <UART_Receive_IT+0x82>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d106      	bne.n	8004e18 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	b2da      	uxtb	r2, r3
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	701a      	strb	r2, [r3, #0]
 8004e16:	e008      	b.n	8004e2a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e24:	b2da      	uxtb	r2, r3
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2e:	1c5a      	adds	r2, r3, #1
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	4619      	mov	r1, r3
 8004e42:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d148      	bne.n	8004eda <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	6812      	ldr	r2, [r2, #0]
 8004e50:	68d2      	ldr	r2, [r2, #12]
 8004e52:	f022 0220 	bic.w	r2, r2, #32
 8004e56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6812      	ldr	r2, [r2, #0]
 8004e60:	68d2      	ldr	r2, [r2, #12]
 8004e62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	6812      	ldr	r2, [r2, #0]
 8004e70:	6952      	ldr	r2, [r2, #20]
 8004e72:	f022 0201 	bic.w	r2, r2, #1
 8004e76:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d123      	bne.n	8004ed0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	6812      	ldr	r2, [r2, #0]
 8004e96:	68d2      	ldr	r2, [r2, #12]
 8004e98:	f022 0210 	bic.w	r2, r2, #16
 8004e9c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0310 	and.w	r3, r3, #16
 8004ea8:	2b10      	cmp	r3, #16
 8004eaa:	d10a      	bne.n	8004ec2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f7ff fe30 	bl	8004b2e <HAL_UARTEx_RxEventCallback>
 8004ece:	e002      	b.n	8004ed6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7fb fdeb 	bl	8000aac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	e002      	b.n	8004ee0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	e000      	b.n	8004ee0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004ede:	2302      	movs	r3, #2
  }
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ee8:	b590      	push	{r4, r7, lr}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6812      	ldr	r2, [r2, #0]
 8004ef8:	6912      	ldr	r2, [r2, #16]
 8004efa:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	68d2      	ldr	r2, [r2, #12]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689a      	ldr	r2, [r3, #8]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004f26:	f023 030c 	bic.w	r3, r3, #12
 8004f2a:	68b9      	ldr	r1, [r7, #8]
 8004f2c:	430b      	orrs	r3, r1
 8004f2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6812      	ldr	r2, [r2, #0]
 8004f38:	6952      	ldr	r2, [r2, #20]
 8004f3a:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6992      	ldr	r2, [r2, #24]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a2c      	ldr	r2, [pc, #176]	; (8004ffc <UART_SetConfig+0x114>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d103      	bne.n	8004f58 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f50:	f7fe fb3a 	bl	80035c8 <HAL_RCC_GetPCLK2Freq>
 8004f54:	60f8      	str	r0, [r7, #12]
 8004f56:	e002      	b.n	8004f5e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f58:	f7fe fb22 	bl	80035a0 <HAL_RCC_GetPCLK1Freq>
 8004f5c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6819      	ldr	r1, [r3, #0]
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	4613      	mov	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	009a      	lsls	r2, r3, #2
 8004f6c:	441a      	add	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f78:	4a21      	ldr	r2, [pc, #132]	; (8005000 <UART_SetConfig+0x118>)
 8004f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7e:	095b      	lsrs	r3, r3, #5
 8004f80:	0118      	lsls	r0, r3, #4
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	4613      	mov	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	009a      	lsls	r2, r3, #2
 8004f8c:	441a      	add	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f98:	4b19      	ldr	r3, [pc, #100]	; (8005000 <UART_SetConfig+0x118>)
 8004f9a:	fba3 4302 	umull	r4, r3, r3, r2
 8004f9e:	095b      	lsrs	r3, r3, #5
 8004fa0:	2464      	movs	r4, #100	; 0x64
 8004fa2:	fb04 f303 	mul.w	r3, r4, r3
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	3332      	adds	r3, #50	; 0x32
 8004fac:	4a14      	ldr	r2, [pc, #80]	; (8005000 <UART_SetConfig+0x118>)
 8004fae:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb2:	095b      	lsrs	r3, r3, #5
 8004fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fb8:	4418      	add	r0, r3
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	009a      	lsls	r2, r3, #2
 8004fc4:	441a      	add	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fd0:	4b0b      	ldr	r3, [pc, #44]	; (8005000 <UART_SetConfig+0x118>)
 8004fd2:	fba3 4302 	umull	r4, r3, r3, r2
 8004fd6:	095b      	lsrs	r3, r3, #5
 8004fd8:	2464      	movs	r4, #100	; 0x64
 8004fda:	fb04 f303 	mul.w	r3, r4, r3
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	011b      	lsls	r3, r3, #4
 8004fe2:	3332      	adds	r3, #50	; 0x32
 8004fe4:	4a06      	ldr	r2, [pc, #24]	; (8005000 <UART_SetConfig+0x118>)
 8004fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fea:	095b      	lsrs	r3, r3, #5
 8004fec:	f003 030f 	and.w	r3, r3, #15
 8004ff0:	4403      	add	r3, r0
 8004ff2:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ff4:	bf00      	nop
 8004ff6:	3714      	adds	r7, #20
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd90      	pop	{r4, r7, pc}
 8004ffc:	40013800 	.word	0x40013800
 8005000:	51eb851f 	.word	0x51eb851f

08005004 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005004:	480c      	ldr	r0, [pc, #48]	; (8005038 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005006:	490d      	ldr	r1, [pc, #52]	; (800503c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005008:	4a0d      	ldr	r2, [pc, #52]	; (8005040 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800500a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800500c:	e002      	b.n	8005014 <LoopCopyDataInit>

0800500e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800500e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005012:	3304      	adds	r3, #4

08005014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005018:	d3f9      	bcc.n	800500e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800501a:	4a0a      	ldr	r2, [pc, #40]	; (8005044 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800501c:	4c0a      	ldr	r4, [pc, #40]	; (8005048 <LoopFillZerobss+0x22>)
  movs r3, #0
 800501e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005020:	e001      	b.n	8005026 <LoopFillZerobss>

08005022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005024:	3204      	adds	r2, #4

08005026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005028:	d3fb      	bcc.n	8005022 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800502a:	f7fc fe8b 	bl	8001d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800502e:	f000 f815 	bl	800505c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005032:	f7fb ff0f 	bl	8000e54 <main>
  bx lr
 8005036:	4770      	bx	lr
  ldr r0, =_sdata
 8005038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800503c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8005040:	08007c90 	.word	0x08007c90
  ldr r2, =_sbss
 8005044:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8005048:	20000638 	.word	0x20000638

0800504c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800504c:	e7fe      	b.n	800504c <ADC1_2_IRQHandler>
	...

08005050 <__errno>:
 8005050:	4b01      	ldr	r3, [pc, #4]	; (8005058 <__errno+0x8>)
 8005052:	6818      	ldr	r0, [r3, #0]
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	2000000c 	.word	0x2000000c

0800505c <__libc_init_array>:
 800505c:	b570      	push	{r4, r5, r6, lr}
 800505e:	2500      	movs	r5, #0
 8005060:	4e0c      	ldr	r6, [pc, #48]	; (8005094 <__libc_init_array+0x38>)
 8005062:	4c0d      	ldr	r4, [pc, #52]	; (8005098 <__libc_init_array+0x3c>)
 8005064:	1ba4      	subs	r4, r4, r6
 8005066:	10a4      	asrs	r4, r4, #2
 8005068:	42a5      	cmp	r5, r4
 800506a:	d109      	bne.n	8005080 <__libc_init_array+0x24>
 800506c:	f002 fbe4 	bl	8007838 <_init>
 8005070:	2500      	movs	r5, #0
 8005072:	4e0a      	ldr	r6, [pc, #40]	; (800509c <__libc_init_array+0x40>)
 8005074:	4c0a      	ldr	r4, [pc, #40]	; (80050a0 <__libc_init_array+0x44>)
 8005076:	1ba4      	subs	r4, r4, r6
 8005078:	10a4      	asrs	r4, r4, #2
 800507a:	42a5      	cmp	r5, r4
 800507c:	d105      	bne.n	800508a <__libc_init_array+0x2e>
 800507e:	bd70      	pop	{r4, r5, r6, pc}
 8005080:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005084:	4798      	blx	r3
 8005086:	3501      	adds	r5, #1
 8005088:	e7ee      	b.n	8005068 <__libc_init_array+0xc>
 800508a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800508e:	4798      	blx	r3
 8005090:	3501      	adds	r5, #1
 8005092:	e7f2      	b.n	800507a <__libc_init_array+0x1e>
 8005094:	08007c88 	.word	0x08007c88
 8005098:	08007c88 	.word	0x08007c88
 800509c:	08007c88 	.word	0x08007c88
 80050a0:	08007c8c 	.word	0x08007c8c

080050a4 <__locale_ctype_ptr>:
 80050a4:	4b04      	ldr	r3, [pc, #16]	; (80050b8 <__locale_ctype_ptr+0x14>)
 80050a6:	4a05      	ldr	r2, [pc, #20]	; (80050bc <__locale_ctype_ptr+0x18>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	6a1b      	ldr	r3, [r3, #32]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	bf08      	it	eq
 80050b0:	4613      	moveq	r3, r2
 80050b2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80050b6:	4770      	bx	lr
 80050b8:	2000000c 	.word	0x2000000c
 80050bc:	20000070 	.word	0x20000070

080050c0 <__ascii_mbtowc>:
 80050c0:	b082      	sub	sp, #8
 80050c2:	b901      	cbnz	r1, 80050c6 <__ascii_mbtowc+0x6>
 80050c4:	a901      	add	r1, sp, #4
 80050c6:	b142      	cbz	r2, 80050da <__ascii_mbtowc+0x1a>
 80050c8:	b14b      	cbz	r3, 80050de <__ascii_mbtowc+0x1e>
 80050ca:	7813      	ldrb	r3, [r2, #0]
 80050cc:	600b      	str	r3, [r1, #0]
 80050ce:	7812      	ldrb	r2, [r2, #0]
 80050d0:	1c10      	adds	r0, r2, #0
 80050d2:	bf18      	it	ne
 80050d4:	2001      	movne	r0, #1
 80050d6:	b002      	add	sp, #8
 80050d8:	4770      	bx	lr
 80050da:	4610      	mov	r0, r2
 80050dc:	e7fb      	b.n	80050d6 <__ascii_mbtowc+0x16>
 80050de:	f06f 0001 	mvn.w	r0, #1
 80050e2:	e7f8      	b.n	80050d6 <__ascii_mbtowc+0x16>

080050e4 <memset>:
 80050e4:	4603      	mov	r3, r0
 80050e6:	4402      	add	r2, r0
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d100      	bne.n	80050ee <memset+0xa>
 80050ec:	4770      	bx	lr
 80050ee:	f803 1b01 	strb.w	r1, [r3], #1
 80050f2:	e7f9      	b.n	80050e8 <memset+0x4>

080050f4 <__cvt>:
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050fa:	461e      	mov	r6, r3
 80050fc:	bfbb      	ittet	lt
 80050fe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005102:	461e      	movlt	r6, r3
 8005104:	2300      	movge	r3, #0
 8005106:	232d      	movlt	r3, #45	; 0x2d
 8005108:	b088      	sub	sp, #32
 800510a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800510c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800510e:	f027 0720 	bic.w	r7, r7, #32
 8005112:	2f46      	cmp	r7, #70	; 0x46
 8005114:	4614      	mov	r4, r2
 8005116:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005118:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800511c:	700b      	strb	r3, [r1, #0]
 800511e:	d004      	beq.n	800512a <__cvt+0x36>
 8005120:	2f45      	cmp	r7, #69	; 0x45
 8005122:	d100      	bne.n	8005126 <__cvt+0x32>
 8005124:	3501      	adds	r5, #1
 8005126:	2302      	movs	r3, #2
 8005128:	e000      	b.n	800512c <__cvt+0x38>
 800512a:	2303      	movs	r3, #3
 800512c:	aa07      	add	r2, sp, #28
 800512e:	9204      	str	r2, [sp, #16]
 8005130:	aa06      	add	r2, sp, #24
 8005132:	9203      	str	r2, [sp, #12]
 8005134:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
 8005138:	4622      	mov	r2, r4
 800513a:	4633      	mov	r3, r6
 800513c:	f000 fe14 	bl	8005d68 <_dtoa_r>
 8005140:	2f47      	cmp	r7, #71	; 0x47
 8005142:	4680      	mov	r8, r0
 8005144:	d102      	bne.n	800514c <__cvt+0x58>
 8005146:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005148:	07db      	lsls	r3, r3, #31
 800514a:	d526      	bpl.n	800519a <__cvt+0xa6>
 800514c:	2f46      	cmp	r7, #70	; 0x46
 800514e:	eb08 0905 	add.w	r9, r8, r5
 8005152:	d111      	bne.n	8005178 <__cvt+0x84>
 8005154:	f898 3000 	ldrb.w	r3, [r8]
 8005158:	2b30      	cmp	r3, #48	; 0x30
 800515a:	d10a      	bne.n	8005172 <__cvt+0x7e>
 800515c:	2200      	movs	r2, #0
 800515e:	2300      	movs	r3, #0
 8005160:	4620      	mov	r0, r4
 8005162:	4631      	mov	r1, r6
 8005164:	f7fb fc1c 	bl	80009a0 <__aeabi_dcmpeq>
 8005168:	b918      	cbnz	r0, 8005172 <__cvt+0x7e>
 800516a:	f1c5 0501 	rsb	r5, r5, #1
 800516e:	f8ca 5000 	str.w	r5, [sl]
 8005172:	f8da 3000 	ldr.w	r3, [sl]
 8005176:	4499      	add	r9, r3
 8005178:	2200      	movs	r2, #0
 800517a:	2300      	movs	r3, #0
 800517c:	4620      	mov	r0, r4
 800517e:	4631      	mov	r1, r6
 8005180:	f7fb fc0e 	bl	80009a0 <__aeabi_dcmpeq>
 8005184:	b938      	cbnz	r0, 8005196 <__cvt+0xa2>
 8005186:	2230      	movs	r2, #48	; 0x30
 8005188:	9b07      	ldr	r3, [sp, #28]
 800518a:	4599      	cmp	r9, r3
 800518c:	d905      	bls.n	800519a <__cvt+0xa6>
 800518e:	1c59      	adds	r1, r3, #1
 8005190:	9107      	str	r1, [sp, #28]
 8005192:	701a      	strb	r2, [r3, #0]
 8005194:	e7f8      	b.n	8005188 <__cvt+0x94>
 8005196:	f8cd 901c 	str.w	r9, [sp, #28]
 800519a:	4640      	mov	r0, r8
 800519c:	9b07      	ldr	r3, [sp, #28]
 800519e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80051a0:	eba3 0308 	sub.w	r3, r3, r8
 80051a4:	6013      	str	r3, [r2, #0]
 80051a6:	b008      	add	sp, #32
 80051a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080051ac <__exponent>:
 80051ac:	4603      	mov	r3, r0
 80051ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051b0:	2900      	cmp	r1, #0
 80051b2:	f803 2b02 	strb.w	r2, [r3], #2
 80051b6:	bfb6      	itet	lt
 80051b8:	222d      	movlt	r2, #45	; 0x2d
 80051ba:	222b      	movge	r2, #43	; 0x2b
 80051bc:	4249      	neglt	r1, r1
 80051be:	2909      	cmp	r1, #9
 80051c0:	7042      	strb	r2, [r0, #1]
 80051c2:	dd21      	ble.n	8005208 <__exponent+0x5c>
 80051c4:	f10d 0207 	add.w	r2, sp, #7
 80051c8:	4617      	mov	r7, r2
 80051ca:	260a      	movs	r6, #10
 80051cc:	fb91 f5f6 	sdiv	r5, r1, r6
 80051d0:	fb06 1115 	mls	r1, r6, r5, r1
 80051d4:	2d09      	cmp	r5, #9
 80051d6:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80051da:	f802 1c01 	strb.w	r1, [r2, #-1]
 80051de:	f102 34ff 	add.w	r4, r2, #4294967295
 80051e2:	4629      	mov	r1, r5
 80051e4:	dc09      	bgt.n	80051fa <__exponent+0x4e>
 80051e6:	3130      	adds	r1, #48	; 0x30
 80051e8:	3a02      	subs	r2, #2
 80051ea:	f804 1c01 	strb.w	r1, [r4, #-1]
 80051ee:	42ba      	cmp	r2, r7
 80051f0:	461c      	mov	r4, r3
 80051f2:	d304      	bcc.n	80051fe <__exponent+0x52>
 80051f4:	1a20      	subs	r0, r4, r0
 80051f6:	b003      	add	sp, #12
 80051f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051fa:	4622      	mov	r2, r4
 80051fc:	e7e6      	b.n	80051cc <__exponent+0x20>
 80051fe:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005202:	f803 1b01 	strb.w	r1, [r3], #1
 8005206:	e7f2      	b.n	80051ee <__exponent+0x42>
 8005208:	2230      	movs	r2, #48	; 0x30
 800520a:	461c      	mov	r4, r3
 800520c:	4411      	add	r1, r2
 800520e:	f804 2b02 	strb.w	r2, [r4], #2
 8005212:	7059      	strb	r1, [r3, #1]
 8005214:	e7ee      	b.n	80051f4 <__exponent+0x48>
	...

08005218 <_printf_float>:
 8005218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800521c:	b091      	sub	sp, #68	; 0x44
 800521e:	460c      	mov	r4, r1
 8005220:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8005222:	4693      	mov	fp, r2
 8005224:	461e      	mov	r6, r3
 8005226:	4605      	mov	r5, r0
 8005228:	f001 fcee 	bl	8006c08 <_localeconv_r>
 800522c:	6803      	ldr	r3, [r0, #0]
 800522e:	4618      	mov	r0, r3
 8005230:	9309      	str	r3, [sp, #36]	; 0x24
 8005232:	f7fa ff8d 	bl	8000150 <strlen>
 8005236:	2300      	movs	r3, #0
 8005238:	930e      	str	r3, [sp, #56]	; 0x38
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	900a      	str	r0, [sp, #40]	; 0x28
 800523e:	3307      	adds	r3, #7
 8005240:	f023 0307 	bic.w	r3, r3, #7
 8005244:	f103 0208 	add.w	r2, r3, #8
 8005248:	f894 8018 	ldrb.w	r8, [r4, #24]
 800524c:	f8d4 a000 	ldr.w	sl, [r4]
 8005250:	603a      	str	r2, [r7, #0]
 8005252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005256:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800525a:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
 800525e:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8005260:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005264:	930b      	str	r3, [sp, #44]	; 0x2c
 8005266:	f04f 32ff 	mov.w	r2, #4294967295
 800526a:	4ba6      	ldr	r3, [pc, #664]	; (8005504 <_printf_float+0x2ec>)
 800526c:	4638      	mov	r0, r7
 800526e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005270:	f7fb fbc8 	bl	8000a04 <__aeabi_dcmpun>
 8005274:	2800      	cmp	r0, #0
 8005276:	f040 81f7 	bne.w	8005668 <_printf_float+0x450>
 800527a:	f04f 32ff 	mov.w	r2, #4294967295
 800527e:	4ba1      	ldr	r3, [pc, #644]	; (8005504 <_printf_float+0x2ec>)
 8005280:	4638      	mov	r0, r7
 8005282:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005284:	f7fb fba0 	bl	80009c8 <__aeabi_dcmple>
 8005288:	2800      	cmp	r0, #0
 800528a:	f040 81ed 	bne.w	8005668 <_printf_float+0x450>
 800528e:	2200      	movs	r2, #0
 8005290:	2300      	movs	r3, #0
 8005292:	4638      	mov	r0, r7
 8005294:	4649      	mov	r1, r9
 8005296:	f7fb fb8d 	bl	80009b4 <__aeabi_dcmplt>
 800529a:	b110      	cbz	r0, 80052a2 <_printf_float+0x8a>
 800529c:	232d      	movs	r3, #45	; 0x2d
 800529e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052a2:	4b99      	ldr	r3, [pc, #612]	; (8005508 <_printf_float+0x2f0>)
 80052a4:	4f99      	ldr	r7, [pc, #612]	; (800550c <_printf_float+0x2f4>)
 80052a6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80052aa:	bf98      	it	ls
 80052ac:	461f      	movls	r7, r3
 80052ae:	2303      	movs	r3, #3
 80052b0:	f04f 0900 	mov.w	r9, #0
 80052b4:	6123      	str	r3, [r4, #16]
 80052b6:	f02a 0304 	bic.w	r3, sl, #4
 80052ba:	6023      	str	r3, [r4, #0]
 80052bc:	9600      	str	r6, [sp, #0]
 80052be:	465b      	mov	r3, fp
 80052c0:	aa0f      	add	r2, sp, #60	; 0x3c
 80052c2:	4621      	mov	r1, r4
 80052c4:	4628      	mov	r0, r5
 80052c6:	f000 f9df 	bl	8005688 <_printf_common>
 80052ca:	3001      	adds	r0, #1
 80052cc:	f040 809a 	bne.w	8005404 <_printf_float+0x1ec>
 80052d0:	f04f 30ff 	mov.w	r0, #4294967295
 80052d4:	b011      	add	sp, #68	; 0x44
 80052d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052da:	6862      	ldr	r2, [r4, #4]
 80052dc:	a80e      	add	r0, sp, #56	; 0x38
 80052de:	1c53      	adds	r3, r2, #1
 80052e0:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
 80052e4:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
 80052e8:	d141      	bne.n	800536e <_printf_float+0x156>
 80052ea:	2206      	movs	r2, #6
 80052ec:	6062      	str	r2, [r4, #4]
 80052ee:	2100      	movs	r1, #0
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	9301      	str	r3, [sp, #4]
 80052f4:	6863      	ldr	r3, [r4, #4]
 80052f6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80052fa:	9005      	str	r0, [sp, #20]
 80052fc:	9202      	str	r2, [sp, #8]
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	463a      	mov	r2, r7
 8005302:	464b      	mov	r3, r9
 8005304:	9106      	str	r1, [sp, #24]
 8005306:	f8cd 8010 	str.w	r8, [sp, #16]
 800530a:	f8cd e00c 	str.w	lr, [sp, #12]
 800530e:	4628      	mov	r0, r5
 8005310:	f7ff fef0 	bl	80050f4 <__cvt>
 8005314:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8005318:	2b47      	cmp	r3, #71	; 0x47
 800531a:	4607      	mov	r7, r0
 800531c:	d109      	bne.n	8005332 <_printf_float+0x11a>
 800531e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005320:	1cd8      	adds	r0, r3, #3
 8005322:	db02      	blt.n	800532a <_printf_float+0x112>
 8005324:	6862      	ldr	r2, [r4, #4]
 8005326:	4293      	cmp	r3, r2
 8005328:	dd59      	ble.n	80053de <_printf_float+0x1c6>
 800532a:	f1a8 0802 	sub.w	r8, r8, #2
 800532e:	fa5f f888 	uxtb.w	r8, r8
 8005332:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005336:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005338:	d836      	bhi.n	80053a8 <_printf_float+0x190>
 800533a:	3901      	subs	r1, #1
 800533c:	4642      	mov	r2, r8
 800533e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005342:	910d      	str	r1, [sp, #52]	; 0x34
 8005344:	f7ff ff32 	bl	80051ac <__exponent>
 8005348:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800534a:	4681      	mov	r9, r0
 800534c:	1883      	adds	r3, r0, r2
 800534e:	2a01      	cmp	r2, #1
 8005350:	6123      	str	r3, [r4, #16]
 8005352:	dc02      	bgt.n	800535a <_printf_float+0x142>
 8005354:	6822      	ldr	r2, [r4, #0]
 8005356:	07d1      	lsls	r1, r2, #31
 8005358:	d501      	bpl.n	800535e <_printf_float+0x146>
 800535a:	3301      	adds	r3, #1
 800535c:	6123      	str	r3, [r4, #16]
 800535e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005362:	2b00      	cmp	r3, #0
 8005364:	d0aa      	beq.n	80052bc <_printf_float+0xa4>
 8005366:	232d      	movs	r3, #45	; 0x2d
 8005368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800536c:	e7a6      	b.n	80052bc <_printf_float+0xa4>
 800536e:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8005372:	d002      	beq.n	800537a <_printf_float+0x162>
 8005374:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005378:	d1b9      	bne.n	80052ee <_printf_float+0xd6>
 800537a:	b19a      	cbz	r2, 80053a4 <_printf_float+0x18c>
 800537c:	2100      	movs	r1, #0
 800537e:	9106      	str	r1, [sp, #24]
 8005380:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8005384:	e88d 000c 	stmia.w	sp, {r2, r3}
 8005388:	6023      	str	r3, [r4, #0]
 800538a:	9005      	str	r0, [sp, #20]
 800538c:	463a      	mov	r2, r7
 800538e:	f8cd 8010 	str.w	r8, [sp, #16]
 8005392:	f8cd e00c 	str.w	lr, [sp, #12]
 8005396:	9102      	str	r1, [sp, #8]
 8005398:	464b      	mov	r3, r9
 800539a:	4628      	mov	r0, r5
 800539c:	f7ff feaa 	bl	80050f4 <__cvt>
 80053a0:	4607      	mov	r7, r0
 80053a2:	e7bc      	b.n	800531e <_printf_float+0x106>
 80053a4:	2201      	movs	r2, #1
 80053a6:	e7a1      	b.n	80052ec <_printf_float+0xd4>
 80053a8:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80053ac:	d119      	bne.n	80053e2 <_printf_float+0x1ca>
 80053ae:	2900      	cmp	r1, #0
 80053b0:	6863      	ldr	r3, [r4, #4]
 80053b2:	dd0c      	ble.n	80053ce <_printf_float+0x1b6>
 80053b4:	6121      	str	r1, [r4, #16]
 80053b6:	b913      	cbnz	r3, 80053be <_printf_float+0x1a6>
 80053b8:	6822      	ldr	r2, [r4, #0]
 80053ba:	07d2      	lsls	r2, r2, #31
 80053bc:	d502      	bpl.n	80053c4 <_printf_float+0x1ac>
 80053be:	3301      	adds	r3, #1
 80053c0:	440b      	add	r3, r1
 80053c2:	6123      	str	r3, [r4, #16]
 80053c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053c6:	f04f 0900 	mov.w	r9, #0
 80053ca:	65a3      	str	r3, [r4, #88]	; 0x58
 80053cc:	e7c7      	b.n	800535e <_printf_float+0x146>
 80053ce:	b913      	cbnz	r3, 80053d6 <_printf_float+0x1be>
 80053d0:	6822      	ldr	r2, [r4, #0]
 80053d2:	07d0      	lsls	r0, r2, #31
 80053d4:	d501      	bpl.n	80053da <_printf_float+0x1c2>
 80053d6:	3302      	adds	r3, #2
 80053d8:	e7f3      	b.n	80053c2 <_printf_float+0x1aa>
 80053da:	2301      	movs	r3, #1
 80053dc:	e7f1      	b.n	80053c2 <_printf_float+0x1aa>
 80053de:	f04f 0867 	mov.w	r8, #103	; 0x67
 80053e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80053e6:	4293      	cmp	r3, r2
 80053e8:	db05      	blt.n	80053f6 <_printf_float+0x1de>
 80053ea:	6822      	ldr	r2, [r4, #0]
 80053ec:	6123      	str	r3, [r4, #16]
 80053ee:	07d1      	lsls	r1, r2, #31
 80053f0:	d5e8      	bpl.n	80053c4 <_printf_float+0x1ac>
 80053f2:	3301      	adds	r3, #1
 80053f4:	e7e5      	b.n	80053c2 <_printf_float+0x1aa>
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	bfcc      	ite	gt
 80053fa:	2301      	movgt	r3, #1
 80053fc:	f1c3 0302 	rsble	r3, r3, #2
 8005400:	4413      	add	r3, r2
 8005402:	e7de      	b.n	80053c2 <_printf_float+0x1aa>
 8005404:	6823      	ldr	r3, [r4, #0]
 8005406:	055a      	lsls	r2, r3, #21
 8005408:	d407      	bmi.n	800541a <_printf_float+0x202>
 800540a:	6923      	ldr	r3, [r4, #16]
 800540c:	463a      	mov	r2, r7
 800540e:	4659      	mov	r1, fp
 8005410:	4628      	mov	r0, r5
 8005412:	47b0      	blx	r6
 8005414:	3001      	adds	r0, #1
 8005416:	d12a      	bne.n	800546e <_printf_float+0x256>
 8005418:	e75a      	b.n	80052d0 <_printf_float+0xb8>
 800541a:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800541e:	f240 80dc 	bls.w	80055da <_printf_float+0x3c2>
 8005422:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005426:	2200      	movs	r2, #0
 8005428:	2300      	movs	r3, #0
 800542a:	f7fb fab9 	bl	80009a0 <__aeabi_dcmpeq>
 800542e:	2800      	cmp	r0, #0
 8005430:	d039      	beq.n	80054a6 <_printf_float+0x28e>
 8005432:	2301      	movs	r3, #1
 8005434:	4a36      	ldr	r2, [pc, #216]	; (8005510 <_printf_float+0x2f8>)
 8005436:	4659      	mov	r1, fp
 8005438:	4628      	mov	r0, r5
 800543a:	47b0      	blx	r6
 800543c:	3001      	adds	r0, #1
 800543e:	f43f af47 	beq.w	80052d0 <_printf_float+0xb8>
 8005442:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005444:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005446:	429a      	cmp	r2, r3
 8005448:	db02      	blt.n	8005450 <_printf_float+0x238>
 800544a:	6823      	ldr	r3, [r4, #0]
 800544c:	07d8      	lsls	r0, r3, #31
 800544e:	d50e      	bpl.n	800546e <_printf_float+0x256>
 8005450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005452:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005454:	4659      	mov	r1, fp
 8005456:	4628      	mov	r0, r5
 8005458:	47b0      	blx	r6
 800545a:	3001      	adds	r0, #1
 800545c:	f43f af38 	beq.w	80052d0 <_printf_float+0xb8>
 8005460:	2700      	movs	r7, #0
 8005462:	f104 081a 	add.w	r8, r4, #26
 8005466:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005468:	3b01      	subs	r3, #1
 800546a:	429f      	cmp	r7, r3
 800546c:	db11      	blt.n	8005492 <_printf_float+0x27a>
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	079f      	lsls	r7, r3, #30
 8005472:	d508      	bpl.n	8005486 <_printf_float+0x26e>
 8005474:	2700      	movs	r7, #0
 8005476:	f104 0819 	add.w	r8, r4, #25
 800547a:	68e3      	ldr	r3, [r4, #12]
 800547c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800547e:	1a9b      	subs	r3, r3, r2
 8005480:	429f      	cmp	r7, r3
 8005482:	f2c0 80e7 	blt.w	8005654 <_printf_float+0x43c>
 8005486:	68e0      	ldr	r0, [r4, #12]
 8005488:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800548a:	4298      	cmp	r0, r3
 800548c:	bfb8      	it	lt
 800548e:	4618      	movlt	r0, r3
 8005490:	e720      	b.n	80052d4 <_printf_float+0xbc>
 8005492:	2301      	movs	r3, #1
 8005494:	4642      	mov	r2, r8
 8005496:	4659      	mov	r1, fp
 8005498:	4628      	mov	r0, r5
 800549a:	47b0      	blx	r6
 800549c:	3001      	adds	r0, #1
 800549e:	f43f af17 	beq.w	80052d0 <_printf_float+0xb8>
 80054a2:	3701      	adds	r7, #1
 80054a4:	e7df      	b.n	8005466 <_printf_float+0x24e>
 80054a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	dc33      	bgt.n	8005514 <_printf_float+0x2fc>
 80054ac:	2301      	movs	r3, #1
 80054ae:	4a18      	ldr	r2, [pc, #96]	; (8005510 <_printf_float+0x2f8>)
 80054b0:	4659      	mov	r1, fp
 80054b2:	4628      	mov	r0, r5
 80054b4:	47b0      	blx	r6
 80054b6:	3001      	adds	r0, #1
 80054b8:	f43f af0a 	beq.w	80052d0 <_printf_float+0xb8>
 80054bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054be:	b923      	cbnz	r3, 80054ca <_printf_float+0x2b2>
 80054c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054c2:	b913      	cbnz	r3, 80054ca <_printf_float+0x2b2>
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	07d9      	lsls	r1, r3, #31
 80054c8:	d5d1      	bpl.n	800546e <_printf_float+0x256>
 80054ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054ce:	4659      	mov	r1, fp
 80054d0:	4628      	mov	r0, r5
 80054d2:	47b0      	blx	r6
 80054d4:	3001      	adds	r0, #1
 80054d6:	f43f aefb 	beq.w	80052d0 <_printf_float+0xb8>
 80054da:	f04f 0800 	mov.w	r8, #0
 80054de:	f104 091a 	add.w	r9, r4, #26
 80054e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054e4:	425b      	negs	r3, r3
 80054e6:	4598      	cmp	r8, r3
 80054e8:	db01      	blt.n	80054ee <_printf_float+0x2d6>
 80054ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054ec:	e78e      	b.n	800540c <_printf_float+0x1f4>
 80054ee:	2301      	movs	r3, #1
 80054f0:	464a      	mov	r2, r9
 80054f2:	4659      	mov	r1, fp
 80054f4:	4628      	mov	r0, r5
 80054f6:	47b0      	blx	r6
 80054f8:	3001      	adds	r0, #1
 80054fa:	f43f aee9 	beq.w	80052d0 <_printf_float+0xb8>
 80054fe:	f108 0801 	add.w	r8, r8, #1
 8005502:	e7ee      	b.n	80054e2 <_printf_float+0x2ca>
 8005504:	7fefffff 	.word	0x7fefffff
 8005508:	080079d6 	.word	0x080079d6
 800550c:	080079da 	.word	0x080079da
 8005510:	080079e6 	.word	0x080079e6
 8005514:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005516:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005518:	429a      	cmp	r2, r3
 800551a:	bfa8      	it	ge
 800551c:	461a      	movge	r2, r3
 800551e:	2a00      	cmp	r2, #0
 8005520:	4690      	mov	r8, r2
 8005522:	dc36      	bgt.n	8005592 <_printf_float+0x37a>
 8005524:	f04f 0a00 	mov.w	sl, #0
 8005528:	f104 031a 	add.w	r3, r4, #26
 800552c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005530:	930b      	str	r3, [sp, #44]	; 0x2c
 8005532:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8005536:	eba9 0308 	sub.w	r3, r9, r8
 800553a:	459a      	cmp	sl, r3
 800553c:	db31      	blt.n	80055a2 <_printf_float+0x38a>
 800553e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005540:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005542:	429a      	cmp	r2, r3
 8005544:	db38      	blt.n	80055b8 <_printf_float+0x3a0>
 8005546:	6823      	ldr	r3, [r4, #0]
 8005548:	07da      	lsls	r2, r3, #31
 800554a:	d435      	bmi.n	80055b8 <_printf_float+0x3a0>
 800554c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800554e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005550:	eba3 0209 	sub.w	r2, r3, r9
 8005554:	eba3 0801 	sub.w	r8, r3, r1
 8005558:	4590      	cmp	r8, r2
 800555a:	bfa8      	it	ge
 800555c:	4690      	movge	r8, r2
 800555e:	f1b8 0f00 	cmp.w	r8, #0
 8005562:	dc31      	bgt.n	80055c8 <_printf_float+0x3b0>
 8005564:	2700      	movs	r7, #0
 8005566:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800556a:	f104 091a 	add.w	r9, r4, #26
 800556e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005570:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005572:	1a9b      	subs	r3, r3, r2
 8005574:	eba3 0308 	sub.w	r3, r3, r8
 8005578:	429f      	cmp	r7, r3
 800557a:	f6bf af78 	bge.w	800546e <_printf_float+0x256>
 800557e:	2301      	movs	r3, #1
 8005580:	464a      	mov	r2, r9
 8005582:	4659      	mov	r1, fp
 8005584:	4628      	mov	r0, r5
 8005586:	47b0      	blx	r6
 8005588:	3001      	adds	r0, #1
 800558a:	f43f aea1 	beq.w	80052d0 <_printf_float+0xb8>
 800558e:	3701      	adds	r7, #1
 8005590:	e7ed      	b.n	800556e <_printf_float+0x356>
 8005592:	4613      	mov	r3, r2
 8005594:	4659      	mov	r1, fp
 8005596:	463a      	mov	r2, r7
 8005598:	4628      	mov	r0, r5
 800559a:	47b0      	blx	r6
 800559c:	3001      	adds	r0, #1
 800559e:	d1c1      	bne.n	8005524 <_printf_float+0x30c>
 80055a0:	e696      	b.n	80052d0 <_printf_float+0xb8>
 80055a2:	2301      	movs	r3, #1
 80055a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80055a6:	4659      	mov	r1, fp
 80055a8:	4628      	mov	r0, r5
 80055aa:	47b0      	blx	r6
 80055ac:	3001      	adds	r0, #1
 80055ae:	f43f ae8f 	beq.w	80052d0 <_printf_float+0xb8>
 80055b2:	f10a 0a01 	add.w	sl, sl, #1
 80055b6:	e7bc      	b.n	8005532 <_printf_float+0x31a>
 80055b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055bc:	4659      	mov	r1, fp
 80055be:	4628      	mov	r0, r5
 80055c0:	47b0      	blx	r6
 80055c2:	3001      	adds	r0, #1
 80055c4:	d1c2      	bne.n	800554c <_printf_float+0x334>
 80055c6:	e683      	b.n	80052d0 <_printf_float+0xb8>
 80055c8:	4643      	mov	r3, r8
 80055ca:	eb07 0209 	add.w	r2, r7, r9
 80055ce:	4659      	mov	r1, fp
 80055d0:	4628      	mov	r0, r5
 80055d2:	47b0      	blx	r6
 80055d4:	3001      	adds	r0, #1
 80055d6:	d1c5      	bne.n	8005564 <_printf_float+0x34c>
 80055d8:	e67a      	b.n	80052d0 <_printf_float+0xb8>
 80055da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055dc:	2a01      	cmp	r2, #1
 80055de:	dc01      	bgt.n	80055e4 <_printf_float+0x3cc>
 80055e0:	07db      	lsls	r3, r3, #31
 80055e2:	d534      	bpl.n	800564e <_printf_float+0x436>
 80055e4:	2301      	movs	r3, #1
 80055e6:	463a      	mov	r2, r7
 80055e8:	4659      	mov	r1, fp
 80055ea:	4628      	mov	r0, r5
 80055ec:	47b0      	blx	r6
 80055ee:	3001      	adds	r0, #1
 80055f0:	f43f ae6e 	beq.w	80052d0 <_printf_float+0xb8>
 80055f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055f8:	4659      	mov	r1, fp
 80055fa:	4628      	mov	r0, r5
 80055fc:	47b0      	blx	r6
 80055fe:	3001      	adds	r0, #1
 8005600:	f43f ae66 	beq.w	80052d0 <_printf_float+0xb8>
 8005604:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005608:	2200      	movs	r2, #0
 800560a:	2300      	movs	r3, #0
 800560c:	f7fb f9c8 	bl	80009a0 <__aeabi_dcmpeq>
 8005610:	b150      	cbz	r0, 8005628 <_printf_float+0x410>
 8005612:	2700      	movs	r7, #0
 8005614:	f104 081a 	add.w	r8, r4, #26
 8005618:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800561a:	3b01      	subs	r3, #1
 800561c:	429f      	cmp	r7, r3
 800561e:	db0c      	blt.n	800563a <_printf_float+0x422>
 8005620:	464b      	mov	r3, r9
 8005622:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005626:	e6f2      	b.n	800540e <_printf_float+0x1f6>
 8005628:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800562a:	1c7a      	adds	r2, r7, #1
 800562c:	3b01      	subs	r3, #1
 800562e:	4659      	mov	r1, fp
 8005630:	4628      	mov	r0, r5
 8005632:	47b0      	blx	r6
 8005634:	3001      	adds	r0, #1
 8005636:	d1f3      	bne.n	8005620 <_printf_float+0x408>
 8005638:	e64a      	b.n	80052d0 <_printf_float+0xb8>
 800563a:	2301      	movs	r3, #1
 800563c:	4642      	mov	r2, r8
 800563e:	4659      	mov	r1, fp
 8005640:	4628      	mov	r0, r5
 8005642:	47b0      	blx	r6
 8005644:	3001      	adds	r0, #1
 8005646:	f43f ae43 	beq.w	80052d0 <_printf_float+0xb8>
 800564a:	3701      	adds	r7, #1
 800564c:	e7e4      	b.n	8005618 <_printf_float+0x400>
 800564e:	2301      	movs	r3, #1
 8005650:	463a      	mov	r2, r7
 8005652:	e7ec      	b.n	800562e <_printf_float+0x416>
 8005654:	2301      	movs	r3, #1
 8005656:	4642      	mov	r2, r8
 8005658:	4659      	mov	r1, fp
 800565a:	4628      	mov	r0, r5
 800565c:	47b0      	blx	r6
 800565e:	3001      	adds	r0, #1
 8005660:	f43f ae36 	beq.w	80052d0 <_printf_float+0xb8>
 8005664:	3701      	adds	r7, #1
 8005666:	e708      	b.n	800547a <_printf_float+0x262>
 8005668:	463a      	mov	r2, r7
 800566a:	464b      	mov	r3, r9
 800566c:	4638      	mov	r0, r7
 800566e:	4649      	mov	r1, r9
 8005670:	f7fb f9c8 	bl	8000a04 <__aeabi_dcmpun>
 8005674:	2800      	cmp	r0, #0
 8005676:	f43f ae30 	beq.w	80052da <_printf_float+0xc2>
 800567a:	4b01      	ldr	r3, [pc, #4]	; (8005680 <_printf_float+0x468>)
 800567c:	4f01      	ldr	r7, [pc, #4]	; (8005684 <_printf_float+0x46c>)
 800567e:	e612      	b.n	80052a6 <_printf_float+0x8e>
 8005680:	080079de 	.word	0x080079de
 8005684:	080079e2 	.word	0x080079e2

08005688 <_printf_common>:
 8005688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800568c:	4691      	mov	r9, r2
 800568e:	461f      	mov	r7, r3
 8005690:	688a      	ldr	r2, [r1, #8]
 8005692:	690b      	ldr	r3, [r1, #16]
 8005694:	4606      	mov	r6, r0
 8005696:	4293      	cmp	r3, r2
 8005698:	bfb8      	it	lt
 800569a:	4613      	movlt	r3, r2
 800569c:	f8c9 3000 	str.w	r3, [r9]
 80056a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056a4:	460c      	mov	r4, r1
 80056a6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056aa:	b112      	cbz	r2, 80056b2 <_printf_common+0x2a>
 80056ac:	3301      	adds	r3, #1
 80056ae:	f8c9 3000 	str.w	r3, [r9]
 80056b2:	6823      	ldr	r3, [r4, #0]
 80056b4:	0699      	lsls	r1, r3, #26
 80056b6:	bf42      	ittt	mi
 80056b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80056bc:	3302      	addmi	r3, #2
 80056be:	f8c9 3000 	strmi.w	r3, [r9]
 80056c2:	6825      	ldr	r5, [r4, #0]
 80056c4:	f015 0506 	ands.w	r5, r5, #6
 80056c8:	d107      	bne.n	80056da <_printf_common+0x52>
 80056ca:	f104 0a19 	add.w	sl, r4, #25
 80056ce:	68e3      	ldr	r3, [r4, #12]
 80056d0:	f8d9 2000 	ldr.w	r2, [r9]
 80056d4:	1a9b      	subs	r3, r3, r2
 80056d6:	429d      	cmp	r5, r3
 80056d8:	db2a      	blt.n	8005730 <_printf_common+0xa8>
 80056da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80056de:	6822      	ldr	r2, [r4, #0]
 80056e0:	3300      	adds	r3, #0
 80056e2:	bf18      	it	ne
 80056e4:	2301      	movne	r3, #1
 80056e6:	0692      	lsls	r2, r2, #26
 80056e8:	d42f      	bmi.n	800574a <_printf_common+0xc2>
 80056ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056ee:	4639      	mov	r1, r7
 80056f0:	4630      	mov	r0, r6
 80056f2:	47c0      	blx	r8
 80056f4:	3001      	adds	r0, #1
 80056f6:	d022      	beq.n	800573e <_printf_common+0xb6>
 80056f8:	6823      	ldr	r3, [r4, #0]
 80056fa:	68e5      	ldr	r5, [r4, #12]
 80056fc:	f003 0306 	and.w	r3, r3, #6
 8005700:	2b04      	cmp	r3, #4
 8005702:	bf18      	it	ne
 8005704:	2500      	movne	r5, #0
 8005706:	f8d9 2000 	ldr.w	r2, [r9]
 800570a:	f04f 0900 	mov.w	r9, #0
 800570e:	bf08      	it	eq
 8005710:	1aad      	subeq	r5, r5, r2
 8005712:	68a3      	ldr	r3, [r4, #8]
 8005714:	6922      	ldr	r2, [r4, #16]
 8005716:	bf08      	it	eq
 8005718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800571c:	4293      	cmp	r3, r2
 800571e:	bfc4      	itt	gt
 8005720:	1a9b      	subgt	r3, r3, r2
 8005722:	18ed      	addgt	r5, r5, r3
 8005724:	341a      	adds	r4, #26
 8005726:	454d      	cmp	r5, r9
 8005728:	d11b      	bne.n	8005762 <_printf_common+0xda>
 800572a:	2000      	movs	r0, #0
 800572c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005730:	2301      	movs	r3, #1
 8005732:	4652      	mov	r2, sl
 8005734:	4639      	mov	r1, r7
 8005736:	4630      	mov	r0, r6
 8005738:	47c0      	blx	r8
 800573a:	3001      	adds	r0, #1
 800573c:	d103      	bne.n	8005746 <_printf_common+0xbe>
 800573e:	f04f 30ff 	mov.w	r0, #4294967295
 8005742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005746:	3501      	adds	r5, #1
 8005748:	e7c1      	b.n	80056ce <_printf_common+0x46>
 800574a:	2030      	movs	r0, #48	; 0x30
 800574c:	18e1      	adds	r1, r4, r3
 800574e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005752:	1c5a      	adds	r2, r3, #1
 8005754:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005758:	4422      	add	r2, r4
 800575a:	3302      	adds	r3, #2
 800575c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005760:	e7c3      	b.n	80056ea <_printf_common+0x62>
 8005762:	2301      	movs	r3, #1
 8005764:	4622      	mov	r2, r4
 8005766:	4639      	mov	r1, r7
 8005768:	4630      	mov	r0, r6
 800576a:	47c0      	blx	r8
 800576c:	3001      	adds	r0, #1
 800576e:	d0e6      	beq.n	800573e <_printf_common+0xb6>
 8005770:	f109 0901 	add.w	r9, r9, #1
 8005774:	e7d7      	b.n	8005726 <_printf_common+0x9e>
	...

08005778 <_printf_i>:
 8005778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800577c:	4617      	mov	r7, r2
 800577e:	7e0a      	ldrb	r2, [r1, #24]
 8005780:	b085      	sub	sp, #20
 8005782:	2a6e      	cmp	r2, #110	; 0x6e
 8005784:	4698      	mov	r8, r3
 8005786:	4606      	mov	r6, r0
 8005788:	460c      	mov	r4, r1
 800578a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800578c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005790:	f000 80bc 	beq.w	800590c <_printf_i+0x194>
 8005794:	d81a      	bhi.n	80057cc <_printf_i+0x54>
 8005796:	2a63      	cmp	r2, #99	; 0x63
 8005798:	d02e      	beq.n	80057f8 <_printf_i+0x80>
 800579a:	d80a      	bhi.n	80057b2 <_printf_i+0x3a>
 800579c:	2a00      	cmp	r2, #0
 800579e:	f000 80c8 	beq.w	8005932 <_printf_i+0x1ba>
 80057a2:	2a58      	cmp	r2, #88	; 0x58
 80057a4:	f000 808a 	beq.w	80058bc <_printf_i+0x144>
 80057a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057ac:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80057b0:	e02a      	b.n	8005808 <_printf_i+0x90>
 80057b2:	2a64      	cmp	r2, #100	; 0x64
 80057b4:	d001      	beq.n	80057ba <_printf_i+0x42>
 80057b6:	2a69      	cmp	r2, #105	; 0x69
 80057b8:	d1f6      	bne.n	80057a8 <_printf_i+0x30>
 80057ba:	6821      	ldr	r1, [r4, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	f011 0f80 	tst.w	r1, #128	; 0x80
 80057c2:	d023      	beq.n	800580c <_printf_i+0x94>
 80057c4:	1d11      	adds	r1, r2, #4
 80057c6:	6019      	str	r1, [r3, #0]
 80057c8:	6813      	ldr	r3, [r2, #0]
 80057ca:	e027      	b.n	800581c <_printf_i+0xa4>
 80057cc:	2a73      	cmp	r2, #115	; 0x73
 80057ce:	f000 80b4 	beq.w	800593a <_printf_i+0x1c2>
 80057d2:	d808      	bhi.n	80057e6 <_printf_i+0x6e>
 80057d4:	2a6f      	cmp	r2, #111	; 0x6f
 80057d6:	d02a      	beq.n	800582e <_printf_i+0xb6>
 80057d8:	2a70      	cmp	r2, #112	; 0x70
 80057da:	d1e5      	bne.n	80057a8 <_printf_i+0x30>
 80057dc:	680a      	ldr	r2, [r1, #0]
 80057de:	f042 0220 	orr.w	r2, r2, #32
 80057e2:	600a      	str	r2, [r1, #0]
 80057e4:	e003      	b.n	80057ee <_printf_i+0x76>
 80057e6:	2a75      	cmp	r2, #117	; 0x75
 80057e8:	d021      	beq.n	800582e <_printf_i+0xb6>
 80057ea:	2a78      	cmp	r2, #120	; 0x78
 80057ec:	d1dc      	bne.n	80057a8 <_printf_i+0x30>
 80057ee:	2278      	movs	r2, #120	; 0x78
 80057f0:	496f      	ldr	r1, [pc, #444]	; (80059b0 <_printf_i+0x238>)
 80057f2:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80057f6:	e064      	b.n	80058c2 <_printf_i+0x14a>
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80057fe:	1d11      	adds	r1, r2, #4
 8005800:	6019      	str	r1, [r3, #0]
 8005802:	6813      	ldr	r3, [r2, #0]
 8005804:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005808:	2301      	movs	r3, #1
 800580a:	e0a3      	b.n	8005954 <_printf_i+0x1dc>
 800580c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005810:	f102 0104 	add.w	r1, r2, #4
 8005814:	6019      	str	r1, [r3, #0]
 8005816:	d0d7      	beq.n	80057c8 <_printf_i+0x50>
 8005818:	f9b2 3000 	ldrsh.w	r3, [r2]
 800581c:	2b00      	cmp	r3, #0
 800581e:	da03      	bge.n	8005828 <_printf_i+0xb0>
 8005820:	222d      	movs	r2, #45	; 0x2d
 8005822:	425b      	negs	r3, r3
 8005824:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005828:	4962      	ldr	r1, [pc, #392]	; (80059b4 <_printf_i+0x23c>)
 800582a:	220a      	movs	r2, #10
 800582c:	e017      	b.n	800585e <_printf_i+0xe6>
 800582e:	6820      	ldr	r0, [r4, #0]
 8005830:	6819      	ldr	r1, [r3, #0]
 8005832:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005836:	d003      	beq.n	8005840 <_printf_i+0xc8>
 8005838:	1d08      	adds	r0, r1, #4
 800583a:	6018      	str	r0, [r3, #0]
 800583c:	680b      	ldr	r3, [r1, #0]
 800583e:	e006      	b.n	800584e <_printf_i+0xd6>
 8005840:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005844:	f101 0004 	add.w	r0, r1, #4
 8005848:	6018      	str	r0, [r3, #0]
 800584a:	d0f7      	beq.n	800583c <_printf_i+0xc4>
 800584c:	880b      	ldrh	r3, [r1, #0]
 800584e:	2a6f      	cmp	r2, #111	; 0x6f
 8005850:	bf14      	ite	ne
 8005852:	220a      	movne	r2, #10
 8005854:	2208      	moveq	r2, #8
 8005856:	4957      	ldr	r1, [pc, #348]	; (80059b4 <_printf_i+0x23c>)
 8005858:	2000      	movs	r0, #0
 800585a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800585e:	6865      	ldr	r5, [r4, #4]
 8005860:	2d00      	cmp	r5, #0
 8005862:	60a5      	str	r5, [r4, #8]
 8005864:	f2c0 809c 	blt.w	80059a0 <_printf_i+0x228>
 8005868:	6820      	ldr	r0, [r4, #0]
 800586a:	f020 0004 	bic.w	r0, r0, #4
 800586e:	6020      	str	r0, [r4, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d13f      	bne.n	80058f4 <_printf_i+0x17c>
 8005874:	2d00      	cmp	r5, #0
 8005876:	f040 8095 	bne.w	80059a4 <_printf_i+0x22c>
 800587a:	4675      	mov	r5, lr
 800587c:	2a08      	cmp	r2, #8
 800587e:	d10b      	bne.n	8005898 <_printf_i+0x120>
 8005880:	6823      	ldr	r3, [r4, #0]
 8005882:	07da      	lsls	r2, r3, #31
 8005884:	d508      	bpl.n	8005898 <_printf_i+0x120>
 8005886:	6923      	ldr	r3, [r4, #16]
 8005888:	6862      	ldr	r2, [r4, #4]
 800588a:	429a      	cmp	r2, r3
 800588c:	bfde      	ittt	le
 800588e:	2330      	movle	r3, #48	; 0x30
 8005890:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005894:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005898:	ebae 0305 	sub.w	r3, lr, r5
 800589c:	6123      	str	r3, [r4, #16]
 800589e:	f8cd 8000 	str.w	r8, [sp]
 80058a2:	463b      	mov	r3, r7
 80058a4:	aa03      	add	r2, sp, #12
 80058a6:	4621      	mov	r1, r4
 80058a8:	4630      	mov	r0, r6
 80058aa:	f7ff feed 	bl	8005688 <_printf_common>
 80058ae:	3001      	adds	r0, #1
 80058b0:	d155      	bne.n	800595e <_printf_i+0x1e6>
 80058b2:	f04f 30ff 	mov.w	r0, #4294967295
 80058b6:	b005      	add	sp, #20
 80058b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80058bc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80058c0:	493c      	ldr	r1, [pc, #240]	; (80059b4 <_printf_i+0x23c>)
 80058c2:	6822      	ldr	r2, [r4, #0]
 80058c4:	6818      	ldr	r0, [r3, #0]
 80058c6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80058ca:	f100 0504 	add.w	r5, r0, #4
 80058ce:	601d      	str	r5, [r3, #0]
 80058d0:	d001      	beq.n	80058d6 <_printf_i+0x15e>
 80058d2:	6803      	ldr	r3, [r0, #0]
 80058d4:	e002      	b.n	80058dc <_printf_i+0x164>
 80058d6:	0655      	lsls	r5, r2, #25
 80058d8:	d5fb      	bpl.n	80058d2 <_printf_i+0x15a>
 80058da:	8803      	ldrh	r3, [r0, #0]
 80058dc:	07d0      	lsls	r0, r2, #31
 80058de:	bf44      	itt	mi
 80058e0:	f042 0220 	orrmi.w	r2, r2, #32
 80058e4:	6022      	strmi	r2, [r4, #0]
 80058e6:	b91b      	cbnz	r3, 80058f0 <_printf_i+0x178>
 80058e8:	6822      	ldr	r2, [r4, #0]
 80058ea:	f022 0220 	bic.w	r2, r2, #32
 80058ee:	6022      	str	r2, [r4, #0]
 80058f0:	2210      	movs	r2, #16
 80058f2:	e7b1      	b.n	8005858 <_printf_i+0xe0>
 80058f4:	4675      	mov	r5, lr
 80058f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80058fa:	fb02 3310 	mls	r3, r2, r0, r3
 80058fe:	5ccb      	ldrb	r3, [r1, r3]
 8005900:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005904:	4603      	mov	r3, r0
 8005906:	2800      	cmp	r0, #0
 8005908:	d1f5      	bne.n	80058f6 <_printf_i+0x17e>
 800590a:	e7b7      	b.n	800587c <_printf_i+0x104>
 800590c:	6808      	ldr	r0, [r1, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005914:	6949      	ldr	r1, [r1, #20]
 8005916:	d004      	beq.n	8005922 <_printf_i+0x1aa>
 8005918:	1d10      	adds	r0, r2, #4
 800591a:	6018      	str	r0, [r3, #0]
 800591c:	6813      	ldr	r3, [r2, #0]
 800591e:	6019      	str	r1, [r3, #0]
 8005920:	e007      	b.n	8005932 <_printf_i+0x1ba>
 8005922:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005926:	f102 0004 	add.w	r0, r2, #4
 800592a:	6018      	str	r0, [r3, #0]
 800592c:	6813      	ldr	r3, [r2, #0]
 800592e:	d0f6      	beq.n	800591e <_printf_i+0x1a6>
 8005930:	8019      	strh	r1, [r3, #0]
 8005932:	2300      	movs	r3, #0
 8005934:	4675      	mov	r5, lr
 8005936:	6123      	str	r3, [r4, #16]
 8005938:	e7b1      	b.n	800589e <_printf_i+0x126>
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	1d11      	adds	r1, r2, #4
 800593e:	6019      	str	r1, [r3, #0]
 8005940:	6815      	ldr	r5, [r2, #0]
 8005942:	2100      	movs	r1, #0
 8005944:	6862      	ldr	r2, [r4, #4]
 8005946:	4628      	mov	r0, r5
 8005948:	f001 f9d8 	bl	8006cfc <memchr>
 800594c:	b108      	cbz	r0, 8005952 <_printf_i+0x1da>
 800594e:	1b40      	subs	r0, r0, r5
 8005950:	6060      	str	r0, [r4, #4]
 8005952:	6863      	ldr	r3, [r4, #4]
 8005954:	6123      	str	r3, [r4, #16]
 8005956:	2300      	movs	r3, #0
 8005958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800595c:	e79f      	b.n	800589e <_printf_i+0x126>
 800595e:	6923      	ldr	r3, [r4, #16]
 8005960:	462a      	mov	r2, r5
 8005962:	4639      	mov	r1, r7
 8005964:	4630      	mov	r0, r6
 8005966:	47c0      	blx	r8
 8005968:	3001      	adds	r0, #1
 800596a:	d0a2      	beq.n	80058b2 <_printf_i+0x13a>
 800596c:	6823      	ldr	r3, [r4, #0]
 800596e:	079b      	lsls	r3, r3, #30
 8005970:	d507      	bpl.n	8005982 <_printf_i+0x20a>
 8005972:	2500      	movs	r5, #0
 8005974:	f104 0919 	add.w	r9, r4, #25
 8005978:	68e3      	ldr	r3, [r4, #12]
 800597a:	9a03      	ldr	r2, [sp, #12]
 800597c:	1a9b      	subs	r3, r3, r2
 800597e:	429d      	cmp	r5, r3
 8005980:	db05      	blt.n	800598e <_printf_i+0x216>
 8005982:	68e0      	ldr	r0, [r4, #12]
 8005984:	9b03      	ldr	r3, [sp, #12]
 8005986:	4298      	cmp	r0, r3
 8005988:	bfb8      	it	lt
 800598a:	4618      	movlt	r0, r3
 800598c:	e793      	b.n	80058b6 <_printf_i+0x13e>
 800598e:	2301      	movs	r3, #1
 8005990:	464a      	mov	r2, r9
 8005992:	4639      	mov	r1, r7
 8005994:	4630      	mov	r0, r6
 8005996:	47c0      	blx	r8
 8005998:	3001      	adds	r0, #1
 800599a:	d08a      	beq.n	80058b2 <_printf_i+0x13a>
 800599c:	3501      	adds	r5, #1
 800599e:	e7eb      	b.n	8005978 <_printf_i+0x200>
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1a7      	bne.n	80058f4 <_printf_i+0x17c>
 80059a4:	780b      	ldrb	r3, [r1, #0]
 80059a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059ae:	e765      	b.n	800587c <_printf_i+0x104>
 80059b0:	080079f9 	.word	0x080079f9
 80059b4:	080079e8 	.word	0x080079e8

080059b8 <iprintf>:
 80059b8:	b40f      	push	{r0, r1, r2, r3}
 80059ba:	4b0a      	ldr	r3, [pc, #40]	; (80059e4 <iprintf+0x2c>)
 80059bc:	b513      	push	{r0, r1, r4, lr}
 80059be:	681c      	ldr	r4, [r3, #0]
 80059c0:	b124      	cbz	r4, 80059cc <iprintf+0x14>
 80059c2:	69a3      	ldr	r3, [r4, #24]
 80059c4:	b913      	cbnz	r3, 80059cc <iprintf+0x14>
 80059c6:	4620      	mov	r0, r4
 80059c8:	f001 f894 	bl	8006af4 <__sinit>
 80059cc:	ab05      	add	r3, sp, #20
 80059ce:	9a04      	ldr	r2, [sp, #16]
 80059d0:	68a1      	ldr	r1, [r4, #8]
 80059d2:	4620      	mov	r0, r4
 80059d4:	9301      	str	r3, [sp, #4]
 80059d6:	f001 fd5b 	bl	8007490 <_vfiprintf_r>
 80059da:	b002      	add	sp, #8
 80059dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059e0:	b004      	add	sp, #16
 80059e2:	4770      	bx	lr
 80059e4:	2000000c 	.word	0x2000000c

080059e8 <_puts_r>:
 80059e8:	b570      	push	{r4, r5, r6, lr}
 80059ea:	460e      	mov	r6, r1
 80059ec:	4605      	mov	r5, r0
 80059ee:	b118      	cbz	r0, 80059f8 <_puts_r+0x10>
 80059f0:	6983      	ldr	r3, [r0, #24]
 80059f2:	b90b      	cbnz	r3, 80059f8 <_puts_r+0x10>
 80059f4:	f001 f87e 	bl	8006af4 <__sinit>
 80059f8:	69ab      	ldr	r3, [r5, #24]
 80059fa:	68ac      	ldr	r4, [r5, #8]
 80059fc:	b913      	cbnz	r3, 8005a04 <_puts_r+0x1c>
 80059fe:	4628      	mov	r0, r5
 8005a00:	f001 f878 	bl	8006af4 <__sinit>
 8005a04:	4b23      	ldr	r3, [pc, #140]	; (8005a94 <_puts_r+0xac>)
 8005a06:	429c      	cmp	r4, r3
 8005a08:	d117      	bne.n	8005a3a <_puts_r+0x52>
 8005a0a:	686c      	ldr	r4, [r5, #4]
 8005a0c:	89a3      	ldrh	r3, [r4, #12]
 8005a0e:	071b      	lsls	r3, r3, #28
 8005a10:	d51d      	bpl.n	8005a4e <_puts_r+0x66>
 8005a12:	6923      	ldr	r3, [r4, #16]
 8005a14:	b1db      	cbz	r3, 8005a4e <_puts_r+0x66>
 8005a16:	3e01      	subs	r6, #1
 8005a18:	68a3      	ldr	r3, [r4, #8]
 8005a1a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	60a3      	str	r3, [r4, #8]
 8005a22:	b9e9      	cbnz	r1, 8005a60 <_puts_r+0x78>
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	da2e      	bge.n	8005a86 <_puts_r+0x9e>
 8005a28:	4622      	mov	r2, r4
 8005a2a:	210a      	movs	r1, #10
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	f000 f83f 	bl	8005ab0 <__swbuf_r>
 8005a32:	3001      	adds	r0, #1
 8005a34:	d011      	beq.n	8005a5a <_puts_r+0x72>
 8005a36:	200a      	movs	r0, #10
 8005a38:	bd70      	pop	{r4, r5, r6, pc}
 8005a3a:	4b17      	ldr	r3, [pc, #92]	; (8005a98 <_puts_r+0xb0>)
 8005a3c:	429c      	cmp	r4, r3
 8005a3e:	d101      	bne.n	8005a44 <_puts_r+0x5c>
 8005a40:	68ac      	ldr	r4, [r5, #8]
 8005a42:	e7e3      	b.n	8005a0c <_puts_r+0x24>
 8005a44:	4b15      	ldr	r3, [pc, #84]	; (8005a9c <_puts_r+0xb4>)
 8005a46:	429c      	cmp	r4, r3
 8005a48:	bf08      	it	eq
 8005a4a:	68ec      	ldreq	r4, [r5, #12]
 8005a4c:	e7de      	b.n	8005a0c <_puts_r+0x24>
 8005a4e:	4621      	mov	r1, r4
 8005a50:	4628      	mov	r0, r5
 8005a52:	f000 f88d 	bl	8005b70 <__swsetup_r>
 8005a56:	2800      	cmp	r0, #0
 8005a58:	d0dd      	beq.n	8005a16 <_puts_r+0x2e>
 8005a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a5e:	bd70      	pop	{r4, r5, r6, pc}
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	da04      	bge.n	8005a6e <_puts_r+0x86>
 8005a64:	69a2      	ldr	r2, [r4, #24]
 8005a66:	4293      	cmp	r3, r2
 8005a68:	db06      	blt.n	8005a78 <_puts_r+0x90>
 8005a6a:	290a      	cmp	r1, #10
 8005a6c:	d004      	beq.n	8005a78 <_puts_r+0x90>
 8005a6e:	6823      	ldr	r3, [r4, #0]
 8005a70:	1c5a      	adds	r2, r3, #1
 8005a72:	6022      	str	r2, [r4, #0]
 8005a74:	7019      	strb	r1, [r3, #0]
 8005a76:	e7cf      	b.n	8005a18 <_puts_r+0x30>
 8005a78:	4622      	mov	r2, r4
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	f000 f818 	bl	8005ab0 <__swbuf_r>
 8005a80:	3001      	adds	r0, #1
 8005a82:	d1c9      	bne.n	8005a18 <_puts_r+0x30>
 8005a84:	e7e9      	b.n	8005a5a <_puts_r+0x72>
 8005a86:	200a      	movs	r0, #10
 8005a88:	6823      	ldr	r3, [r4, #0]
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	6022      	str	r2, [r4, #0]
 8005a8e:	7018      	strb	r0, [r3, #0]
 8005a90:	bd70      	pop	{r4, r5, r6, pc}
 8005a92:	bf00      	nop
 8005a94:	08007b38 	.word	0x08007b38
 8005a98:	08007b58 	.word	0x08007b58
 8005a9c:	08007b18 	.word	0x08007b18

08005aa0 <puts>:
 8005aa0:	4b02      	ldr	r3, [pc, #8]	; (8005aac <puts+0xc>)
 8005aa2:	4601      	mov	r1, r0
 8005aa4:	6818      	ldr	r0, [r3, #0]
 8005aa6:	f7ff bf9f 	b.w	80059e8 <_puts_r>
 8005aaa:	bf00      	nop
 8005aac:	2000000c 	.word	0x2000000c

08005ab0 <__swbuf_r>:
 8005ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab2:	460e      	mov	r6, r1
 8005ab4:	4614      	mov	r4, r2
 8005ab6:	4605      	mov	r5, r0
 8005ab8:	b118      	cbz	r0, 8005ac2 <__swbuf_r+0x12>
 8005aba:	6983      	ldr	r3, [r0, #24]
 8005abc:	b90b      	cbnz	r3, 8005ac2 <__swbuf_r+0x12>
 8005abe:	f001 f819 	bl	8006af4 <__sinit>
 8005ac2:	4b21      	ldr	r3, [pc, #132]	; (8005b48 <__swbuf_r+0x98>)
 8005ac4:	429c      	cmp	r4, r3
 8005ac6:	d12a      	bne.n	8005b1e <__swbuf_r+0x6e>
 8005ac8:	686c      	ldr	r4, [r5, #4]
 8005aca:	69a3      	ldr	r3, [r4, #24]
 8005acc:	60a3      	str	r3, [r4, #8]
 8005ace:	89a3      	ldrh	r3, [r4, #12]
 8005ad0:	071a      	lsls	r2, r3, #28
 8005ad2:	d52e      	bpl.n	8005b32 <__swbuf_r+0x82>
 8005ad4:	6923      	ldr	r3, [r4, #16]
 8005ad6:	b363      	cbz	r3, 8005b32 <__swbuf_r+0x82>
 8005ad8:	6923      	ldr	r3, [r4, #16]
 8005ada:	6820      	ldr	r0, [r4, #0]
 8005adc:	b2f6      	uxtb	r6, r6
 8005ade:	1ac0      	subs	r0, r0, r3
 8005ae0:	6963      	ldr	r3, [r4, #20]
 8005ae2:	4637      	mov	r7, r6
 8005ae4:	4298      	cmp	r0, r3
 8005ae6:	db04      	blt.n	8005af2 <__swbuf_r+0x42>
 8005ae8:	4621      	mov	r1, r4
 8005aea:	4628      	mov	r0, r5
 8005aec:	f000 ff98 	bl	8006a20 <_fflush_r>
 8005af0:	bb28      	cbnz	r0, 8005b3e <__swbuf_r+0x8e>
 8005af2:	68a3      	ldr	r3, [r4, #8]
 8005af4:	3001      	adds	r0, #1
 8005af6:	3b01      	subs	r3, #1
 8005af8:	60a3      	str	r3, [r4, #8]
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	1c5a      	adds	r2, r3, #1
 8005afe:	6022      	str	r2, [r4, #0]
 8005b00:	701e      	strb	r6, [r3, #0]
 8005b02:	6963      	ldr	r3, [r4, #20]
 8005b04:	4298      	cmp	r0, r3
 8005b06:	d004      	beq.n	8005b12 <__swbuf_r+0x62>
 8005b08:	89a3      	ldrh	r3, [r4, #12]
 8005b0a:	07db      	lsls	r3, r3, #31
 8005b0c:	d519      	bpl.n	8005b42 <__swbuf_r+0x92>
 8005b0e:	2e0a      	cmp	r6, #10
 8005b10:	d117      	bne.n	8005b42 <__swbuf_r+0x92>
 8005b12:	4621      	mov	r1, r4
 8005b14:	4628      	mov	r0, r5
 8005b16:	f000 ff83 	bl	8006a20 <_fflush_r>
 8005b1a:	b190      	cbz	r0, 8005b42 <__swbuf_r+0x92>
 8005b1c:	e00f      	b.n	8005b3e <__swbuf_r+0x8e>
 8005b1e:	4b0b      	ldr	r3, [pc, #44]	; (8005b4c <__swbuf_r+0x9c>)
 8005b20:	429c      	cmp	r4, r3
 8005b22:	d101      	bne.n	8005b28 <__swbuf_r+0x78>
 8005b24:	68ac      	ldr	r4, [r5, #8]
 8005b26:	e7d0      	b.n	8005aca <__swbuf_r+0x1a>
 8005b28:	4b09      	ldr	r3, [pc, #36]	; (8005b50 <__swbuf_r+0xa0>)
 8005b2a:	429c      	cmp	r4, r3
 8005b2c:	bf08      	it	eq
 8005b2e:	68ec      	ldreq	r4, [r5, #12]
 8005b30:	e7cb      	b.n	8005aca <__swbuf_r+0x1a>
 8005b32:	4621      	mov	r1, r4
 8005b34:	4628      	mov	r0, r5
 8005b36:	f000 f81b 	bl	8005b70 <__swsetup_r>
 8005b3a:	2800      	cmp	r0, #0
 8005b3c:	d0cc      	beq.n	8005ad8 <__swbuf_r+0x28>
 8005b3e:	f04f 37ff 	mov.w	r7, #4294967295
 8005b42:	4638      	mov	r0, r7
 8005b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b46:	bf00      	nop
 8005b48:	08007b38 	.word	0x08007b38
 8005b4c:	08007b58 	.word	0x08007b58
 8005b50:	08007b18 	.word	0x08007b18

08005b54 <__ascii_wctomb>:
 8005b54:	b149      	cbz	r1, 8005b6a <__ascii_wctomb+0x16>
 8005b56:	2aff      	cmp	r2, #255	; 0xff
 8005b58:	bf8b      	itete	hi
 8005b5a:	238a      	movhi	r3, #138	; 0x8a
 8005b5c:	700a      	strbls	r2, [r1, #0]
 8005b5e:	6003      	strhi	r3, [r0, #0]
 8005b60:	2001      	movls	r0, #1
 8005b62:	bf88      	it	hi
 8005b64:	f04f 30ff 	movhi.w	r0, #4294967295
 8005b68:	4770      	bx	lr
 8005b6a:	4608      	mov	r0, r1
 8005b6c:	4770      	bx	lr
	...

08005b70 <__swsetup_r>:
 8005b70:	4b32      	ldr	r3, [pc, #200]	; (8005c3c <__swsetup_r+0xcc>)
 8005b72:	b570      	push	{r4, r5, r6, lr}
 8005b74:	681d      	ldr	r5, [r3, #0]
 8005b76:	4606      	mov	r6, r0
 8005b78:	460c      	mov	r4, r1
 8005b7a:	b125      	cbz	r5, 8005b86 <__swsetup_r+0x16>
 8005b7c:	69ab      	ldr	r3, [r5, #24]
 8005b7e:	b913      	cbnz	r3, 8005b86 <__swsetup_r+0x16>
 8005b80:	4628      	mov	r0, r5
 8005b82:	f000 ffb7 	bl	8006af4 <__sinit>
 8005b86:	4b2e      	ldr	r3, [pc, #184]	; (8005c40 <__swsetup_r+0xd0>)
 8005b88:	429c      	cmp	r4, r3
 8005b8a:	d10f      	bne.n	8005bac <__swsetup_r+0x3c>
 8005b8c:	686c      	ldr	r4, [r5, #4]
 8005b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	0715      	lsls	r5, r2, #28
 8005b96:	d42c      	bmi.n	8005bf2 <__swsetup_r+0x82>
 8005b98:	06d0      	lsls	r0, r2, #27
 8005b9a:	d411      	bmi.n	8005bc0 <__swsetup_r+0x50>
 8005b9c:	2209      	movs	r2, #9
 8005b9e:	6032      	str	r2, [r6, #0]
 8005ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ba4:	81a3      	strh	r3, [r4, #12]
 8005ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8005baa:	bd70      	pop	{r4, r5, r6, pc}
 8005bac:	4b25      	ldr	r3, [pc, #148]	; (8005c44 <__swsetup_r+0xd4>)
 8005bae:	429c      	cmp	r4, r3
 8005bb0:	d101      	bne.n	8005bb6 <__swsetup_r+0x46>
 8005bb2:	68ac      	ldr	r4, [r5, #8]
 8005bb4:	e7eb      	b.n	8005b8e <__swsetup_r+0x1e>
 8005bb6:	4b24      	ldr	r3, [pc, #144]	; (8005c48 <__swsetup_r+0xd8>)
 8005bb8:	429c      	cmp	r4, r3
 8005bba:	bf08      	it	eq
 8005bbc:	68ec      	ldreq	r4, [r5, #12]
 8005bbe:	e7e6      	b.n	8005b8e <__swsetup_r+0x1e>
 8005bc0:	0751      	lsls	r1, r2, #29
 8005bc2:	d512      	bpl.n	8005bea <__swsetup_r+0x7a>
 8005bc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bc6:	b141      	cbz	r1, 8005bda <__swsetup_r+0x6a>
 8005bc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bcc:	4299      	cmp	r1, r3
 8005bce:	d002      	beq.n	8005bd6 <__swsetup_r+0x66>
 8005bd0:	4630      	mov	r0, r6
 8005bd2:	f001 fb8b 	bl	80072ec <_free_r>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	6363      	str	r3, [r4, #52]	; 0x34
 8005bda:	89a3      	ldrh	r3, [r4, #12]
 8005bdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005be0:	81a3      	strh	r3, [r4, #12]
 8005be2:	2300      	movs	r3, #0
 8005be4:	6063      	str	r3, [r4, #4]
 8005be6:	6923      	ldr	r3, [r4, #16]
 8005be8:	6023      	str	r3, [r4, #0]
 8005bea:	89a3      	ldrh	r3, [r4, #12]
 8005bec:	f043 0308 	orr.w	r3, r3, #8
 8005bf0:	81a3      	strh	r3, [r4, #12]
 8005bf2:	6923      	ldr	r3, [r4, #16]
 8005bf4:	b94b      	cbnz	r3, 8005c0a <__swsetup_r+0x9a>
 8005bf6:	89a3      	ldrh	r3, [r4, #12]
 8005bf8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c00:	d003      	beq.n	8005c0a <__swsetup_r+0x9a>
 8005c02:	4621      	mov	r1, r4
 8005c04:	4630      	mov	r0, r6
 8005c06:	f001 f831 	bl	8006c6c <__smakebuf_r>
 8005c0a:	89a2      	ldrh	r2, [r4, #12]
 8005c0c:	f012 0301 	ands.w	r3, r2, #1
 8005c10:	d00c      	beq.n	8005c2c <__swsetup_r+0xbc>
 8005c12:	2300      	movs	r3, #0
 8005c14:	60a3      	str	r3, [r4, #8]
 8005c16:	6963      	ldr	r3, [r4, #20]
 8005c18:	425b      	negs	r3, r3
 8005c1a:	61a3      	str	r3, [r4, #24]
 8005c1c:	6923      	ldr	r3, [r4, #16]
 8005c1e:	b953      	cbnz	r3, 8005c36 <__swsetup_r+0xc6>
 8005c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c24:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005c28:	d1ba      	bne.n	8005ba0 <__swsetup_r+0x30>
 8005c2a:	bd70      	pop	{r4, r5, r6, pc}
 8005c2c:	0792      	lsls	r2, r2, #30
 8005c2e:	bf58      	it	pl
 8005c30:	6963      	ldrpl	r3, [r4, #20]
 8005c32:	60a3      	str	r3, [r4, #8]
 8005c34:	e7f2      	b.n	8005c1c <__swsetup_r+0xac>
 8005c36:	2000      	movs	r0, #0
 8005c38:	e7f7      	b.n	8005c2a <__swsetup_r+0xba>
 8005c3a:	bf00      	nop
 8005c3c:	2000000c 	.word	0x2000000c
 8005c40:	08007b38 	.word	0x08007b38
 8005c44:	08007b58 	.word	0x08007b58
 8005c48:	08007b18 	.word	0x08007b18

08005c4c <quorem>:
 8005c4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c50:	6903      	ldr	r3, [r0, #16]
 8005c52:	690c      	ldr	r4, [r1, #16]
 8005c54:	4680      	mov	r8, r0
 8005c56:	429c      	cmp	r4, r3
 8005c58:	f300 8082 	bgt.w	8005d60 <quorem+0x114>
 8005c5c:	3c01      	subs	r4, #1
 8005c5e:	f101 0714 	add.w	r7, r1, #20
 8005c62:	f100 0614 	add.w	r6, r0, #20
 8005c66:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005c6a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005c6e:	3501      	adds	r5, #1
 8005c70:	fbb0 f5f5 	udiv	r5, r0, r5
 8005c74:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8005c78:	eb06 030e 	add.w	r3, r6, lr
 8005c7c:	eb07 090e 	add.w	r9, r7, lr
 8005c80:	9301      	str	r3, [sp, #4]
 8005c82:	b38d      	cbz	r5, 8005ce8 <quorem+0x9c>
 8005c84:	f04f 0a00 	mov.w	sl, #0
 8005c88:	4638      	mov	r0, r7
 8005c8a:	46b4      	mov	ip, r6
 8005c8c:	46d3      	mov	fp, sl
 8005c8e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c92:	b293      	uxth	r3, r2
 8005c94:	fb05 a303 	mla	r3, r5, r3, sl
 8005c98:	0c12      	lsrs	r2, r2, #16
 8005c9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005c9e:	fb05 a202 	mla	r2, r5, r2, sl
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	ebab 0303 	sub.w	r3, fp, r3
 8005ca8:	f8bc b000 	ldrh.w	fp, [ip]
 8005cac:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005cb0:	445b      	add	r3, fp
 8005cb2:	fa1f fb82 	uxth.w	fp, r2
 8005cb6:	f8dc 2000 	ldr.w	r2, [ip]
 8005cba:	4581      	cmp	r9, r0
 8005cbc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005cc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cca:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005cce:	f84c 3b04 	str.w	r3, [ip], #4
 8005cd2:	d2dc      	bcs.n	8005c8e <quorem+0x42>
 8005cd4:	f856 300e 	ldr.w	r3, [r6, lr]
 8005cd8:	b933      	cbnz	r3, 8005ce8 <quorem+0x9c>
 8005cda:	9b01      	ldr	r3, [sp, #4]
 8005cdc:	3b04      	subs	r3, #4
 8005cde:	429e      	cmp	r6, r3
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	d331      	bcc.n	8005d48 <quorem+0xfc>
 8005ce4:	f8c8 4010 	str.w	r4, [r8, #16]
 8005ce8:	4640      	mov	r0, r8
 8005cea:	f001 fa28 	bl	800713e <__mcmp>
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	db26      	blt.n	8005d40 <quorem+0xf4>
 8005cf2:	4630      	mov	r0, r6
 8005cf4:	f04f 0e00 	mov.w	lr, #0
 8005cf8:	3501      	adds	r5, #1
 8005cfa:	f857 1b04 	ldr.w	r1, [r7], #4
 8005cfe:	f8d0 c000 	ldr.w	ip, [r0]
 8005d02:	b28b      	uxth	r3, r1
 8005d04:	ebae 0303 	sub.w	r3, lr, r3
 8005d08:	fa1f f28c 	uxth.w	r2, ip
 8005d0c:	4413      	add	r3, r2
 8005d0e:	0c0a      	lsrs	r2, r1, #16
 8005d10:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005d14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d1e:	45b9      	cmp	r9, r7
 8005d20:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005d24:	f840 3b04 	str.w	r3, [r0], #4
 8005d28:	d2e7      	bcs.n	8005cfa <quorem+0xae>
 8005d2a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005d2e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005d32:	b92a      	cbnz	r2, 8005d40 <quorem+0xf4>
 8005d34:	3b04      	subs	r3, #4
 8005d36:	429e      	cmp	r6, r3
 8005d38:	461a      	mov	r2, r3
 8005d3a:	d30b      	bcc.n	8005d54 <quorem+0x108>
 8005d3c:	f8c8 4010 	str.w	r4, [r8, #16]
 8005d40:	4628      	mov	r0, r5
 8005d42:	b003      	add	sp, #12
 8005d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d48:	6812      	ldr	r2, [r2, #0]
 8005d4a:	3b04      	subs	r3, #4
 8005d4c:	2a00      	cmp	r2, #0
 8005d4e:	d1c9      	bne.n	8005ce4 <quorem+0x98>
 8005d50:	3c01      	subs	r4, #1
 8005d52:	e7c4      	b.n	8005cde <quorem+0x92>
 8005d54:	6812      	ldr	r2, [r2, #0]
 8005d56:	3b04      	subs	r3, #4
 8005d58:	2a00      	cmp	r2, #0
 8005d5a:	d1ef      	bne.n	8005d3c <quorem+0xf0>
 8005d5c:	3c01      	subs	r4, #1
 8005d5e:	e7ea      	b.n	8005d36 <quorem+0xea>
 8005d60:	2000      	movs	r0, #0
 8005d62:	e7ee      	b.n	8005d42 <quorem+0xf6>
 8005d64:	0000      	movs	r0, r0
	...

08005d68 <_dtoa_r>:
 8005d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d6c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005d6e:	b095      	sub	sp, #84	; 0x54
 8005d70:	4604      	mov	r4, r0
 8005d72:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8005d74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d78:	b93e      	cbnz	r6, 8005d8a <_dtoa_r+0x22>
 8005d7a:	2010      	movs	r0, #16
 8005d7c:	f000 ffb6 	bl	8006cec <malloc>
 8005d80:	6260      	str	r0, [r4, #36]	; 0x24
 8005d82:	6046      	str	r6, [r0, #4]
 8005d84:	6086      	str	r6, [r0, #8]
 8005d86:	6006      	str	r6, [r0, #0]
 8005d88:	60c6      	str	r6, [r0, #12]
 8005d8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d8c:	6819      	ldr	r1, [r3, #0]
 8005d8e:	b151      	cbz	r1, 8005da6 <_dtoa_r+0x3e>
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	2301      	movs	r3, #1
 8005d94:	4093      	lsls	r3, r2
 8005d96:	604a      	str	r2, [r1, #4]
 8005d98:	608b      	str	r3, [r1, #8]
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	f000 fffb 	bl	8006d96 <_Bfree>
 8005da0:	2200      	movs	r2, #0
 8005da2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005da4:	601a      	str	r2, [r3, #0]
 8005da6:	9b03      	ldr	r3, [sp, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	bfb7      	itett	lt
 8005dac:	2301      	movlt	r3, #1
 8005dae:	2300      	movge	r3, #0
 8005db0:	602b      	strlt	r3, [r5, #0]
 8005db2:	9b03      	ldrlt	r3, [sp, #12]
 8005db4:	bfae      	itee	ge
 8005db6:	602b      	strge	r3, [r5, #0]
 8005db8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005dbc:	9303      	strlt	r3, [sp, #12]
 8005dbe:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005dc2:	4bab      	ldr	r3, [pc, #684]	; (8006070 <_dtoa_r+0x308>)
 8005dc4:	ea33 0309 	bics.w	r3, r3, r9
 8005dc8:	d11b      	bne.n	8005e02 <_dtoa_r+0x9a>
 8005dca:	f242 730f 	movw	r3, #9999	; 0x270f
 8005dce:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005dd0:	6013      	str	r3, [r2, #0]
 8005dd2:	9b02      	ldr	r3, [sp, #8]
 8005dd4:	b923      	cbnz	r3, 8005de0 <_dtoa_r+0x78>
 8005dd6:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8005dda:	2800      	cmp	r0, #0
 8005ddc:	f000 8583 	beq.w	80068e6 <_dtoa_r+0xb7e>
 8005de0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005de2:	b953      	cbnz	r3, 8005dfa <_dtoa_r+0x92>
 8005de4:	4ba3      	ldr	r3, [pc, #652]	; (8006074 <_dtoa_r+0x30c>)
 8005de6:	e021      	b.n	8005e2c <_dtoa_r+0xc4>
 8005de8:	4ba3      	ldr	r3, [pc, #652]	; (8006078 <_dtoa_r+0x310>)
 8005dea:	9306      	str	r3, [sp, #24]
 8005dec:	3308      	adds	r3, #8
 8005dee:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005df0:	6013      	str	r3, [r2, #0]
 8005df2:	9806      	ldr	r0, [sp, #24]
 8005df4:	b015      	add	sp, #84	; 0x54
 8005df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dfa:	4b9e      	ldr	r3, [pc, #632]	; (8006074 <_dtoa_r+0x30c>)
 8005dfc:	9306      	str	r3, [sp, #24]
 8005dfe:	3303      	adds	r3, #3
 8005e00:	e7f5      	b.n	8005dee <_dtoa_r+0x86>
 8005e02:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005e06:	2200      	movs	r2, #0
 8005e08:	2300      	movs	r3, #0
 8005e0a:	4630      	mov	r0, r6
 8005e0c:	4639      	mov	r1, r7
 8005e0e:	f7fa fdc7 	bl	80009a0 <__aeabi_dcmpeq>
 8005e12:	4680      	mov	r8, r0
 8005e14:	b160      	cbz	r0, 8005e30 <_dtoa_r+0xc8>
 8005e16:	2301      	movs	r3, #1
 8005e18:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005e1a:	6013      	str	r3, [r2, #0]
 8005e1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f000 855e 	beq.w	80068e0 <_dtoa_r+0xb78>
 8005e24:	4b95      	ldr	r3, [pc, #596]	; (800607c <_dtoa_r+0x314>)
 8005e26:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	9306      	str	r3, [sp, #24]
 8005e2e:	e7e0      	b.n	8005df2 <_dtoa_r+0x8a>
 8005e30:	ab12      	add	r3, sp, #72	; 0x48
 8005e32:	9301      	str	r3, [sp, #4]
 8005e34:	ab13      	add	r3, sp, #76	; 0x4c
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	4632      	mov	r2, r6
 8005e3a:	463b      	mov	r3, r7
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	f001 f9f7 	bl	8007230 <__d2b>
 8005e42:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005e46:	4682      	mov	sl, r0
 8005e48:	2d00      	cmp	r5, #0
 8005e4a:	d07d      	beq.n	8005f48 <_dtoa_r+0x1e0>
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005e52:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005e56:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005e5a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005e5e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005e62:	2200      	movs	r2, #0
 8005e64:	4b86      	ldr	r3, [pc, #536]	; (8006080 <_dtoa_r+0x318>)
 8005e66:	f7fa f97f 	bl	8000168 <__aeabi_dsub>
 8005e6a:	a37b      	add	r3, pc, #492	; (adr r3, 8006058 <_dtoa_r+0x2f0>)
 8005e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e70:	f7fa fb2e 	bl	80004d0 <__aeabi_dmul>
 8005e74:	a37a      	add	r3, pc, #488	; (adr r3, 8006060 <_dtoa_r+0x2f8>)
 8005e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7a:	f7fa f977 	bl	800016c <__adddf3>
 8005e7e:	4606      	mov	r6, r0
 8005e80:	4628      	mov	r0, r5
 8005e82:	460f      	mov	r7, r1
 8005e84:	f7fa fabe 	bl	8000404 <__aeabi_i2d>
 8005e88:	a377      	add	r3, pc, #476	; (adr r3, 8006068 <_dtoa_r+0x300>)
 8005e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8e:	f7fa fb1f 	bl	80004d0 <__aeabi_dmul>
 8005e92:	4602      	mov	r2, r0
 8005e94:	460b      	mov	r3, r1
 8005e96:	4630      	mov	r0, r6
 8005e98:	4639      	mov	r1, r7
 8005e9a:	f7fa f967 	bl	800016c <__adddf3>
 8005e9e:	4606      	mov	r6, r0
 8005ea0:	460f      	mov	r7, r1
 8005ea2:	f7fa fdc5 	bl	8000a30 <__aeabi_d2iz>
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	4683      	mov	fp, r0
 8005eaa:	2300      	movs	r3, #0
 8005eac:	4630      	mov	r0, r6
 8005eae:	4639      	mov	r1, r7
 8005eb0:	f7fa fd80 	bl	80009b4 <__aeabi_dcmplt>
 8005eb4:	b158      	cbz	r0, 8005ece <_dtoa_r+0x166>
 8005eb6:	4658      	mov	r0, fp
 8005eb8:	f7fa faa4 	bl	8000404 <__aeabi_i2d>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	4630      	mov	r0, r6
 8005ec2:	4639      	mov	r1, r7
 8005ec4:	f7fa fd6c 	bl	80009a0 <__aeabi_dcmpeq>
 8005ec8:	b908      	cbnz	r0, 8005ece <_dtoa_r+0x166>
 8005eca:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005ece:	f1bb 0f16 	cmp.w	fp, #22
 8005ed2:	d858      	bhi.n	8005f86 <_dtoa_r+0x21e>
 8005ed4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ed8:	496a      	ldr	r1, [pc, #424]	; (8006084 <_dtoa_r+0x31c>)
 8005eda:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8005ede:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ee2:	f7fa fd85 	bl	80009f0 <__aeabi_dcmpgt>
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	d04f      	beq.n	8005f8a <_dtoa_r+0x222>
 8005eea:	2300      	movs	r3, #0
 8005eec:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005ef0:	930d      	str	r3, [sp, #52]	; 0x34
 8005ef2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ef4:	1b5d      	subs	r5, r3, r5
 8005ef6:	1e6b      	subs	r3, r5, #1
 8005ef8:	9307      	str	r3, [sp, #28]
 8005efa:	bf43      	ittte	mi
 8005efc:	2300      	movmi	r3, #0
 8005efe:	f1c5 0801 	rsbmi	r8, r5, #1
 8005f02:	9307      	strmi	r3, [sp, #28]
 8005f04:	f04f 0800 	movpl.w	r8, #0
 8005f08:	f1bb 0f00 	cmp.w	fp, #0
 8005f0c:	db3f      	blt.n	8005f8e <_dtoa_r+0x226>
 8005f0e:	9b07      	ldr	r3, [sp, #28]
 8005f10:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8005f14:	445b      	add	r3, fp
 8005f16:	9307      	str	r3, [sp, #28]
 8005f18:	2300      	movs	r3, #0
 8005f1a:	9308      	str	r3, [sp, #32]
 8005f1c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005f1e:	2b09      	cmp	r3, #9
 8005f20:	f200 80b4 	bhi.w	800608c <_dtoa_r+0x324>
 8005f24:	2b05      	cmp	r3, #5
 8005f26:	bfc4      	itt	gt
 8005f28:	3b04      	subgt	r3, #4
 8005f2a:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005f2c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005f2e:	bfc8      	it	gt
 8005f30:	2600      	movgt	r6, #0
 8005f32:	f1a3 0302 	sub.w	r3, r3, #2
 8005f36:	bfd8      	it	le
 8005f38:	2601      	movle	r6, #1
 8005f3a:	2b03      	cmp	r3, #3
 8005f3c:	f200 80b2 	bhi.w	80060a4 <_dtoa_r+0x33c>
 8005f40:	e8df f003 	tbb	[pc, r3]
 8005f44:	782d8684 	.word	0x782d8684
 8005f48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005f4a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8005f4c:	441d      	add	r5, r3
 8005f4e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005f52:	2b20      	cmp	r3, #32
 8005f54:	dd11      	ble.n	8005f7a <_dtoa_r+0x212>
 8005f56:	9a02      	ldr	r2, [sp, #8]
 8005f58:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005f5c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005f60:	fa22 f000 	lsr.w	r0, r2, r0
 8005f64:	fa09 f303 	lsl.w	r3, r9, r3
 8005f68:	4318      	orrs	r0, r3
 8005f6a:	f7fa fa3b 	bl	80003e4 <__aeabi_ui2d>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005f74:	3d01      	subs	r5, #1
 8005f76:	9310      	str	r3, [sp, #64]	; 0x40
 8005f78:	e773      	b.n	8005e62 <_dtoa_r+0xfa>
 8005f7a:	f1c3 0020 	rsb	r0, r3, #32
 8005f7e:	9b02      	ldr	r3, [sp, #8]
 8005f80:	fa03 f000 	lsl.w	r0, r3, r0
 8005f84:	e7f1      	b.n	8005f6a <_dtoa_r+0x202>
 8005f86:	2301      	movs	r3, #1
 8005f88:	e7b2      	b.n	8005ef0 <_dtoa_r+0x188>
 8005f8a:	900d      	str	r0, [sp, #52]	; 0x34
 8005f8c:	e7b1      	b.n	8005ef2 <_dtoa_r+0x18a>
 8005f8e:	f1cb 0300 	rsb	r3, fp, #0
 8005f92:	9308      	str	r3, [sp, #32]
 8005f94:	2300      	movs	r3, #0
 8005f96:	eba8 080b 	sub.w	r8, r8, fp
 8005f9a:	930c      	str	r3, [sp, #48]	; 0x30
 8005f9c:	e7be      	b.n	8005f1c <_dtoa_r+0x1b4>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8005fa2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f340 8080 	ble.w	80060aa <_dtoa_r+0x342>
 8005faa:	4699      	mov	r9, r3
 8005fac:	9304      	str	r3, [sp, #16]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	2104      	movs	r1, #4
 8005fb2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005fb4:	606a      	str	r2, [r5, #4]
 8005fb6:	f101 0214 	add.w	r2, r1, #20
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d97a      	bls.n	80060b4 <_dtoa_r+0x34c>
 8005fbe:	6869      	ldr	r1, [r5, #4]
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	f000 feb4 	bl	8006d2e <_Balloc>
 8005fc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fc8:	6028      	str	r0, [r5, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f1b9 0f0e 	cmp.w	r9, #14
 8005fd0:	9306      	str	r3, [sp, #24]
 8005fd2:	f200 80f0 	bhi.w	80061b6 <_dtoa_r+0x44e>
 8005fd6:	2e00      	cmp	r6, #0
 8005fd8:	f000 80ed 	beq.w	80061b6 <_dtoa_r+0x44e>
 8005fdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005fe0:	f1bb 0f00 	cmp.w	fp, #0
 8005fe4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005fe8:	dd79      	ble.n	80060de <_dtoa_r+0x376>
 8005fea:	4a26      	ldr	r2, [pc, #152]	; (8006084 <_dtoa_r+0x31c>)
 8005fec:	f00b 030f 	and.w	r3, fp, #15
 8005ff0:	ea4f 162b 	mov.w	r6, fp, asr #4
 8005ff4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005ff8:	06f0      	lsls	r0, r6, #27
 8005ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006002:	d55c      	bpl.n	80060be <_dtoa_r+0x356>
 8006004:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006008:	4b1f      	ldr	r3, [pc, #124]	; (8006088 <_dtoa_r+0x320>)
 800600a:	2503      	movs	r5, #3
 800600c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006010:	f7fa fb88 	bl	8000724 <__aeabi_ddiv>
 8006014:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006018:	f006 060f 	and.w	r6, r6, #15
 800601c:	4f1a      	ldr	r7, [pc, #104]	; (8006088 <_dtoa_r+0x320>)
 800601e:	2e00      	cmp	r6, #0
 8006020:	d14f      	bne.n	80060c2 <_dtoa_r+0x35a>
 8006022:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006026:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800602a:	f7fa fb7b 	bl	8000724 <__aeabi_ddiv>
 800602e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006032:	e06e      	b.n	8006112 <_dtoa_r+0x3aa>
 8006034:	2301      	movs	r3, #1
 8006036:	9309      	str	r3, [sp, #36]	; 0x24
 8006038:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800603a:	445b      	add	r3, fp
 800603c:	f103 0901 	add.w	r9, r3, #1
 8006040:	9304      	str	r3, [sp, #16]
 8006042:	464b      	mov	r3, r9
 8006044:	2b01      	cmp	r3, #1
 8006046:	bfb8      	it	lt
 8006048:	2301      	movlt	r3, #1
 800604a:	e7b0      	b.n	8005fae <_dtoa_r+0x246>
 800604c:	2300      	movs	r3, #0
 800604e:	e7a7      	b.n	8005fa0 <_dtoa_r+0x238>
 8006050:	2300      	movs	r3, #0
 8006052:	e7f0      	b.n	8006036 <_dtoa_r+0x2ce>
 8006054:	f3af 8000 	nop.w
 8006058:	636f4361 	.word	0x636f4361
 800605c:	3fd287a7 	.word	0x3fd287a7
 8006060:	8b60c8b3 	.word	0x8b60c8b3
 8006064:	3fc68a28 	.word	0x3fc68a28
 8006068:	509f79fb 	.word	0x509f79fb
 800606c:	3fd34413 	.word	0x3fd34413
 8006070:	7ff00000 	.word	0x7ff00000
 8006074:	08007b14 	.word	0x08007b14
 8006078:	08007b0b 	.word	0x08007b0b
 800607c:	080079e7 	.word	0x080079e7
 8006080:	3ff80000 	.word	0x3ff80000
 8006084:	08007ba0 	.word	0x08007ba0
 8006088:	08007b78 	.word	0x08007b78
 800608c:	2601      	movs	r6, #1
 800608e:	2300      	movs	r3, #0
 8006090:	9609      	str	r6, [sp, #36]	; 0x24
 8006092:	931e      	str	r3, [sp, #120]	; 0x78
 8006094:	f04f 33ff 	mov.w	r3, #4294967295
 8006098:	2200      	movs	r2, #0
 800609a:	9304      	str	r3, [sp, #16]
 800609c:	4699      	mov	r9, r3
 800609e:	2312      	movs	r3, #18
 80060a0:	921f      	str	r2, [sp, #124]	; 0x7c
 80060a2:	e784      	b.n	8005fae <_dtoa_r+0x246>
 80060a4:	2301      	movs	r3, #1
 80060a6:	9309      	str	r3, [sp, #36]	; 0x24
 80060a8:	e7f4      	b.n	8006094 <_dtoa_r+0x32c>
 80060aa:	2301      	movs	r3, #1
 80060ac:	9304      	str	r3, [sp, #16]
 80060ae:	4699      	mov	r9, r3
 80060b0:	461a      	mov	r2, r3
 80060b2:	e7f5      	b.n	80060a0 <_dtoa_r+0x338>
 80060b4:	686a      	ldr	r2, [r5, #4]
 80060b6:	0049      	lsls	r1, r1, #1
 80060b8:	3201      	adds	r2, #1
 80060ba:	606a      	str	r2, [r5, #4]
 80060bc:	e77b      	b.n	8005fb6 <_dtoa_r+0x24e>
 80060be:	2502      	movs	r5, #2
 80060c0:	e7ac      	b.n	800601c <_dtoa_r+0x2b4>
 80060c2:	07f1      	lsls	r1, r6, #31
 80060c4:	d508      	bpl.n	80060d8 <_dtoa_r+0x370>
 80060c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80060ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060ce:	f7fa f9ff 	bl	80004d0 <__aeabi_dmul>
 80060d2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80060d6:	3501      	adds	r5, #1
 80060d8:	1076      	asrs	r6, r6, #1
 80060da:	3708      	adds	r7, #8
 80060dc:	e79f      	b.n	800601e <_dtoa_r+0x2b6>
 80060de:	f000 80a5 	beq.w	800622c <_dtoa_r+0x4c4>
 80060e2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80060e6:	f1cb 0600 	rsb	r6, fp, #0
 80060ea:	4ba2      	ldr	r3, [pc, #648]	; (8006374 <_dtoa_r+0x60c>)
 80060ec:	f006 020f 	and.w	r2, r6, #15
 80060f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f8:	f7fa f9ea 	bl	80004d0 <__aeabi_dmul>
 80060fc:	2502      	movs	r5, #2
 80060fe:	2300      	movs	r3, #0
 8006100:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006104:	4f9c      	ldr	r7, [pc, #624]	; (8006378 <_dtoa_r+0x610>)
 8006106:	1136      	asrs	r6, r6, #4
 8006108:	2e00      	cmp	r6, #0
 800610a:	f040 8084 	bne.w	8006216 <_dtoa_r+0x4ae>
 800610e:	2b00      	cmp	r3, #0
 8006110:	d18d      	bne.n	800602e <_dtoa_r+0x2c6>
 8006112:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006114:	2b00      	cmp	r3, #0
 8006116:	f000 808b 	beq.w	8006230 <_dtoa_r+0x4c8>
 800611a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800611e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006122:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006126:	2200      	movs	r2, #0
 8006128:	4b94      	ldr	r3, [pc, #592]	; (800637c <_dtoa_r+0x614>)
 800612a:	f7fa fc43 	bl	80009b4 <__aeabi_dcmplt>
 800612e:	2800      	cmp	r0, #0
 8006130:	d07e      	beq.n	8006230 <_dtoa_r+0x4c8>
 8006132:	f1b9 0f00 	cmp.w	r9, #0
 8006136:	d07b      	beq.n	8006230 <_dtoa_r+0x4c8>
 8006138:	9b04      	ldr	r3, [sp, #16]
 800613a:	2b00      	cmp	r3, #0
 800613c:	dd37      	ble.n	80061ae <_dtoa_r+0x446>
 800613e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006142:	2200      	movs	r2, #0
 8006144:	4b8e      	ldr	r3, [pc, #568]	; (8006380 <_dtoa_r+0x618>)
 8006146:	f7fa f9c3 	bl	80004d0 <__aeabi_dmul>
 800614a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800614e:	9e04      	ldr	r6, [sp, #16]
 8006150:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006154:	3501      	adds	r5, #1
 8006156:	4628      	mov	r0, r5
 8006158:	f7fa f954 	bl	8000404 <__aeabi_i2d>
 800615c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006160:	f7fa f9b6 	bl	80004d0 <__aeabi_dmul>
 8006164:	4b87      	ldr	r3, [pc, #540]	; (8006384 <_dtoa_r+0x61c>)
 8006166:	2200      	movs	r2, #0
 8006168:	f7fa f800 	bl	800016c <__adddf3>
 800616c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006172:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 8006176:	950b      	str	r5, [sp, #44]	; 0x2c
 8006178:	2e00      	cmp	r6, #0
 800617a:	d15c      	bne.n	8006236 <_dtoa_r+0x4ce>
 800617c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006180:	2200      	movs	r2, #0
 8006182:	4b81      	ldr	r3, [pc, #516]	; (8006388 <_dtoa_r+0x620>)
 8006184:	f7f9 fff0 	bl	8000168 <__aeabi_dsub>
 8006188:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800618a:	462b      	mov	r3, r5
 800618c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006190:	f7fa fc2e 	bl	80009f0 <__aeabi_dcmpgt>
 8006194:	2800      	cmp	r0, #0
 8006196:	f040 82f7 	bne.w	8006788 <_dtoa_r+0xa20>
 800619a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800619e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061a0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80061a4:	f7fa fc06 	bl	80009b4 <__aeabi_dcmplt>
 80061a8:	2800      	cmp	r0, #0
 80061aa:	f040 82eb 	bne.w	8006784 <_dtoa_r+0xa1c>
 80061ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80061b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f2c0 8150 	blt.w	800645e <_dtoa_r+0x6f6>
 80061be:	f1bb 0f0e 	cmp.w	fp, #14
 80061c2:	f300 814c 	bgt.w	800645e <_dtoa_r+0x6f6>
 80061c6:	4b6b      	ldr	r3, [pc, #428]	; (8006374 <_dtoa_r+0x60c>)
 80061c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80061cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80061d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f280 80da 	bge.w	8006390 <_dtoa_r+0x628>
 80061dc:	f1b9 0f00 	cmp.w	r9, #0
 80061e0:	f300 80d6 	bgt.w	8006390 <_dtoa_r+0x628>
 80061e4:	f040 82cd 	bne.w	8006782 <_dtoa_r+0xa1a>
 80061e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061ec:	2200      	movs	r2, #0
 80061ee:	4b66      	ldr	r3, [pc, #408]	; (8006388 <_dtoa_r+0x620>)
 80061f0:	f7fa f96e 	bl	80004d0 <__aeabi_dmul>
 80061f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061f8:	f7fa fbf0 	bl	80009dc <__aeabi_dcmpge>
 80061fc:	464e      	mov	r6, r9
 80061fe:	464f      	mov	r7, r9
 8006200:	2800      	cmp	r0, #0
 8006202:	f040 82a4 	bne.w	800674e <_dtoa_r+0x9e6>
 8006206:	9b06      	ldr	r3, [sp, #24]
 8006208:	9a06      	ldr	r2, [sp, #24]
 800620a:	1c5d      	adds	r5, r3, #1
 800620c:	2331      	movs	r3, #49	; 0x31
 800620e:	f10b 0b01 	add.w	fp, fp, #1
 8006212:	7013      	strb	r3, [r2, #0]
 8006214:	e29f      	b.n	8006756 <_dtoa_r+0x9ee>
 8006216:	07f2      	lsls	r2, r6, #31
 8006218:	d505      	bpl.n	8006226 <_dtoa_r+0x4be>
 800621a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800621e:	f7fa f957 	bl	80004d0 <__aeabi_dmul>
 8006222:	2301      	movs	r3, #1
 8006224:	3501      	adds	r5, #1
 8006226:	1076      	asrs	r6, r6, #1
 8006228:	3708      	adds	r7, #8
 800622a:	e76d      	b.n	8006108 <_dtoa_r+0x3a0>
 800622c:	2502      	movs	r5, #2
 800622e:	e770      	b.n	8006112 <_dtoa_r+0x3aa>
 8006230:	465f      	mov	r7, fp
 8006232:	464e      	mov	r6, r9
 8006234:	e78f      	b.n	8006156 <_dtoa_r+0x3ee>
 8006236:	9a06      	ldr	r2, [sp, #24]
 8006238:	4b4e      	ldr	r3, [pc, #312]	; (8006374 <_dtoa_r+0x60c>)
 800623a:	4432      	add	r2, r6
 800623c:	9211      	str	r2, [sp, #68]	; 0x44
 800623e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006240:	1e71      	subs	r1, r6, #1
 8006242:	2a00      	cmp	r2, #0
 8006244:	d048      	beq.n	80062d8 <_dtoa_r+0x570>
 8006246:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800624a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624e:	2000      	movs	r0, #0
 8006250:	494e      	ldr	r1, [pc, #312]	; (800638c <_dtoa_r+0x624>)
 8006252:	f7fa fa67 	bl	8000724 <__aeabi_ddiv>
 8006256:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800625a:	f7f9 ff85 	bl	8000168 <__aeabi_dsub>
 800625e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006262:	9d06      	ldr	r5, [sp, #24]
 8006264:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006268:	f7fa fbe2 	bl	8000a30 <__aeabi_d2iz>
 800626c:	4606      	mov	r6, r0
 800626e:	f7fa f8c9 	bl	8000404 <__aeabi_i2d>
 8006272:	4602      	mov	r2, r0
 8006274:	460b      	mov	r3, r1
 8006276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800627a:	f7f9 ff75 	bl	8000168 <__aeabi_dsub>
 800627e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006282:	3630      	adds	r6, #48	; 0x30
 8006284:	f805 6b01 	strb.w	r6, [r5], #1
 8006288:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800628c:	f7fa fb92 	bl	80009b4 <__aeabi_dcmplt>
 8006290:	2800      	cmp	r0, #0
 8006292:	d164      	bne.n	800635e <_dtoa_r+0x5f6>
 8006294:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006298:	2000      	movs	r0, #0
 800629a:	4938      	ldr	r1, [pc, #224]	; (800637c <_dtoa_r+0x614>)
 800629c:	f7f9 ff64 	bl	8000168 <__aeabi_dsub>
 80062a0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80062a4:	f7fa fb86 	bl	80009b4 <__aeabi_dcmplt>
 80062a8:	2800      	cmp	r0, #0
 80062aa:	f040 80b9 	bne.w	8006420 <_dtoa_r+0x6b8>
 80062ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062b0:	429d      	cmp	r5, r3
 80062b2:	f43f af7c 	beq.w	80061ae <_dtoa_r+0x446>
 80062b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80062ba:	2200      	movs	r2, #0
 80062bc:	4b30      	ldr	r3, [pc, #192]	; (8006380 <_dtoa_r+0x618>)
 80062be:	f7fa f907 	bl	80004d0 <__aeabi_dmul>
 80062c2:	2200      	movs	r2, #0
 80062c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80062c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062cc:	4b2c      	ldr	r3, [pc, #176]	; (8006380 <_dtoa_r+0x618>)
 80062ce:	f7fa f8ff 	bl	80004d0 <__aeabi_dmul>
 80062d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062d6:	e7c5      	b.n	8006264 <_dtoa_r+0x4fc>
 80062d8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80062dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80062e4:	f7fa f8f4 	bl	80004d0 <__aeabi_dmul>
 80062e8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80062ec:	9d06      	ldr	r5, [sp, #24]
 80062ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062f2:	f7fa fb9d 	bl	8000a30 <__aeabi_d2iz>
 80062f6:	4606      	mov	r6, r0
 80062f8:	f7fa f884 	bl	8000404 <__aeabi_i2d>
 80062fc:	4602      	mov	r2, r0
 80062fe:	460b      	mov	r3, r1
 8006300:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006304:	f7f9 ff30 	bl	8000168 <__aeabi_dsub>
 8006308:	3630      	adds	r6, #48	; 0x30
 800630a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800630c:	f805 6b01 	strb.w	r6, [r5], #1
 8006310:	42ab      	cmp	r3, r5
 8006312:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006316:	f04f 0200 	mov.w	r2, #0
 800631a:	d124      	bne.n	8006366 <_dtoa_r+0x5fe>
 800631c:	4b1b      	ldr	r3, [pc, #108]	; (800638c <_dtoa_r+0x624>)
 800631e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006322:	f7f9 ff23 	bl	800016c <__adddf3>
 8006326:	4602      	mov	r2, r0
 8006328:	460b      	mov	r3, r1
 800632a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800632e:	f7fa fb5f 	bl	80009f0 <__aeabi_dcmpgt>
 8006332:	2800      	cmp	r0, #0
 8006334:	d174      	bne.n	8006420 <_dtoa_r+0x6b8>
 8006336:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800633a:	2000      	movs	r0, #0
 800633c:	4913      	ldr	r1, [pc, #76]	; (800638c <_dtoa_r+0x624>)
 800633e:	f7f9 ff13 	bl	8000168 <__aeabi_dsub>
 8006342:	4602      	mov	r2, r0
 8006344:	460b      	mov	r3, r1
 8006346:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800634a:	f7fa fb33 	bl	80009b4 <__aeabi_dcmplt>
 800634e:	2800      	cmp	r0, #0
 8006350:	f43f af2d 	beq.w	80061ae <_dtoa_r+0x446>
 8006354:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006358:	1e6a      	subs	r2, r5, #1
 800635a:	2b30      	cmp	r3, #48	; 0x30
 800635c:	d001      	beq.n	8006362 <_dtoa_r+0x5fa>
 800635e:	46bb      	mov	fp, r7
 8006360:	e04d      	b.n	80063fe <_dtoa_r+0x696>
 8006362:	4615      	mov	r5, r2
 8006364:	e7f6      	b.n	8006354 <_dtoa_r+0x5ec>
 8006366:	4b06      	ldr	r3, [pc, #24]	; (8006380 <_dtoa_r+0x618>)
 8006368:	f7fa f8b2 	bl	80004d0 <__aeabi_dmul>
 800636c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006370:	e7bd      	b.n	80062ee <_dtoa_r+0x586>
 8006372:	bf00      	nop
 8006374:	08007ba0 	.word	0x08007ba0
 8006378:	08007b78 	.word	0x08007b78
 800637c:	3ff00000 	.word	0x3ff00000
 8006380:	40240000 	.word	0x40240000
 8006384:	401c0000 	.word	0x401c0000
 8006388:	40140000 	.word	0x40140000
 800638c:	3fe00000 	.word	0x3fe00000
 8006390:	9d06      	ldr	r5, [sp, #24]
 8006392:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006396:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800639a:	4630      	mov	r0, r6
 800639c:	4639      	mov	r1, r7
 800639e:	f7fa f9c1 	bl	8000724 <__aeabi_ddiv>
 80063a2:	f7fa fb45 	bl	8000a30 <__aeabi_d2iz>
 80063a6:	4680      	mov	r8, r0
 80063a8:	f7fa f82c 	bl	8000404 <__aeabi_i2d>
 80063ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063b0:	f7fa f88e 	bl	80004d0 <__aeabi_dmul>
 80063b4:	4602      	mov	r2, r0
 80063b6:	460b      	mov	r3, r1
 80063b8:	4630      	mov	r0, r6
 80063ba:	4639      	mov	r1, r7
 80063bc:	f7f9 fed4 	bl	8000168 <__aeabi_dsub>
 80063c0:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80063c4:	f805 6b01 	strb.w	r6, [r5], #1
 80063c8:	9e06      	ldr	r6, [sp, #24]
 80063ca:	4602      	mov	r2, r0
 80063cc:	1bae      	subs	r6, r5, r6
 80063ce:	45b1      	cmp	r9, r6
 80063d0:	460b      	mov	r3, r1
 80063d2:	d137      	bne.n	8006444 <_dtoa_r+0x6dc>
 80063d4:	f7f9 feca 	bl	800016c <__adddf3>
 80063d8:	4606      	mov	r6, r0
 80063da:	460f      	mov	r7, r1
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063e4:	f7fa fae6 	bl	80009b4 <__aeabi_dcmplt>
 80063e8:	b9c8      	cbnz	r0, 800641e <_dtoa_r+0x6b6>
 80063ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063ee:	4632      	mov	r2, r6
 80063f0:	463b      	mov	r3, r7
 80063f2:	f7fa fad5 	bl	80009a0 <__aeabi_dcmpeq>
 80063f6:	b110      	cbz	r0, 80063fe <_dtoa_r+0x696>
 80063f8:	f018 0f01 	tst.w	r8, #1
 80063fc:	d10f      	bne.n	800641e <_dtoa_r+0x6b6>
 80063fe:	4651      	mov	r1, sl
 8006400:	4620      	mov	r0, r4
 8006402:	f000 fcc8 	bl	8006d96 <_Bfree>
 8006406:	2300      	movs	r3, #0
 8006408:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800640a:	702b      	strb	r3, [r5, #0]
 800640c:	f10b 0301 	add.w	r3, fp, #1
 8006410:	6013      	str	r3, [r2, #0]
 8006412:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006414:	2b00      	cmp	r3, #0
 8006416:	f43f acec 	beq.w	8005df2 <_dtoa_r+0x8a>
 800641a:	601d      	str	r5, [r3, #0]
 800641c:	e4e9      	b.n	8005df2 <_dtoa_r+0x8a>
 800641e:	465f      	mov	r7, fp
 8006420:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006424:	1e6b      	subs	r3, r5, #1
 8006426:	2a39      	cmp	r2, #57	; 0x39
 8006428:	d106      	bne.n	8006438 <_dtoa_r+0x6d0>
 800642a:	9a06      	ldr	r2, [sp, #24]
 800642c:	429a      	cmp	r2, r3
 800642e:	d107      	bne.n	8006440 <_dtoa_r+0x6d8>
 8006430:	2330      	movs	r3, #48	; 0x30
 8006432:	7013      	strb	r3, [r2, #0]
 8006434:	4613      	mov	r3, r2
 8006436:	3701      	adds	r7, #1
 8006438:	781a      	ldrb	r2, [r3, #0]
 800643a:	3201      	adds	r2, #1
 800643c:	701a      	strb	r2, [r3, #0]
 800643e:	e78e      	b.n	800635e <_dtoa_r+0x5f6>
 8006440:	461d      	mov	r5, r3
 8006442:	e7ed      	b.n	8006420 <_dtoa_r+0x6b8>
 8006444:	2200      	movs	r2, #0
 8006446:	4bb5      	ldr	r3, [pc, #724]	; (800671c <_dtoa_r+0x9b4>)
 8006448:	f7fa f842 	bl	80004d0 <__aeabi_dmul>
 800644c:	2200      	movs	r2, #0
 800644e:	2300      	movs	r3, #0
 8006450:	4606      	mov	r6, r0
 8006452:	460f      	mov	r7, r1
 8006454:	f7fa faa4 	bl	80009a0 <__aeabi_dcmpeq>
 8006458:	2800      	cmp	r0, #0
 800645a:	d09c      	beq.n	8006396 <_dtoa_r+0x62e>
 800645c:	e7cf      	b.n	80063fe <_dtoa_r+0x696>
 800645e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006460:	2a00      	cmp	r2, #0
 8006462:	f000 8129 	beq.w	80066b8 <_dtoa_r+0x950>
 8006466:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006468:	2a01      	cmp	r2, #1
 800646a:	f300 810e 	bgt.w	800668a <_dtoa_r+0x922>
 800646e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006470:	2a00      	cmp	r2, #0
 8006472:	f000 8106 	beq.w	8006682 <_dtoa_r+0x91a>
 8006476:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800647a:	4645      	mov	r5, r8
 800647c:	9e08      	ldr	r6, [sp, #32]
 800647e:	9a07      	ldr	r2, [sp, #28]
 8006480:	2101      	movs	r1, #1
 8006482:	441a      	add	r2, r3
 8006484:	4620      	mov	r0, r4
 8006486:	4498      	add	r8, r3
 8006488:	9207      	str	r2, [sp, #28]
 800648a:	f000 fd24 	bl	8006ed6 <__i2b>
 800648e:	4607      	mov	r7, r0
 8006490:	2d00      	cmp	r5, #0
 8006492:	dd0b      	ble.n	80064ac <_dtoa_r+0x744>
 8006494:	9b07      	ldr	r3, [sp, #28]
 8006496:	2b00      	cmp	r3, #0
 8006498:	dd08      	ble.n	80064ac <_dtoa_r+0x744>
 800649a:	42ab      	cmp	r3, r5
 800649c:	bfa8      	it	ge
 800649e:	462b      	movge	r3, r5
 80064a0:	9a07      	ldr	r2, [sp, #28]
 80064a2:	eba8 0803 	sub.w	r8, r8, r3
 80064a6:	1aed      	subs	r5, r5, r3
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	9307      	str	r3, [sp, #28]
 80064ac:	9b08      	ldr	r3, [sp, #32]
 80064ae:	b1fb      	cbz	r3, 80064f0 <_dtoa_r+0x788>
 80064b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 8104 	beq.w	80066c0 <_dtoa_r+0x958>
 80064b8:	2e00      	cmp	r6, #0
 80064ba:	dd11      	ble.n	80064e0 <_dtoa_r+0x778>
 80064bc:	4639      	mov	r1, r7
 80064be:	4632      	mov	r2, r6
 80064c0:	4620      	mov	r0, r4
 80064c2:	f000 fd9d 	bl	8007000 <__pow5mult>
 80064c6:	4652      	mov	r2, sl
 80064c8:	4601      	mov	r1, r0
 80064ca:	4607      	mov	r7, r0
 80064cc:	4620      	mov	r0, r4
 80064ce:	f000 fd0b 	bl	8006ee8 <__multiply>
 80064d2:	4651      	mov	r1, sl
 80064d4:	900a      	str	r0, [sp, #40]	; 0x28
 80064d6:	4620      	mov	r0, r4
 80064d8:	f000 fc5d 	bl	8006d96 <_Bfree>
 80064dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064de:	469a      	mov	sl, r3
 80064e0:	9b08      	ldr	r3, [sp, #32]
 80064e2:	1b9a      	subs	r2, r3, r6
 80064e4:	d004      	beq.n	80064f0 <_dtoa_r+0x788>
 80064e6:	4651      	mov	r1, sl
 80064e8:	4620      	mov	r0, r4
 80064ea:	f000 fd89 	bl	8007000 <__pow5mult>
 80064ee:	4682      	mov	sl, r0
 80064f0:	2101      	movs	r1, #1
 80064f2:	4620      	mov	r0, r4
 80064f4:	f000 fcef 	bl	8006ed6 <__i2b>
 80064f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064fa:	4606      	mov	r6, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f340 80e1 	ble.w	80066c4 <_dtoa_r+0x95c>
 8006502:	461a      	mov	r2, r3
 8006504:	4601      	mov	r1, r0
 8006506:	4620      	mov	r0, r4
 8006508:	f000 fd7a 	bl	8007000 <__pow5mult>
 800650c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800650e:	4606      	mov	r6, r0
 8006510:	2b01      	cmp	r3, #1
 8006512:	f340 80da 	ble.w	80066ca <_dtoa_r+0x962>
 8006516:	2300      	movs	r3, #0
 8006518:	9308      	str	r3, [sp, #32]
 800651a:	6933      	ldr	r3, [r6, #16]
 800651c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006520:	6918      	ldr	r0, [r3, #16]
 8006522:	f000 fc8a 	bl	8006e3a <__hi0bits>
 8006526:	f1c0 0020 	rsb	r0, r0, #32
 800652a:	9b07      	ldr	r3, [sp, #28]
 800652c:	4418      	add	r0, r3
 800652e:	f010 001f 	ands.w	r0, r0, #31
 8006532:	f000 80f0 	beq.w	8006716 <_dtoa_r+0x9ae>
 8006536:	f1c0 0320 	rsb	r3, r0, #32
 800653a:	2b04      	cmp	r3, #4
 800653c:	f340 80e2 	ble.w	8006704 <_dtoa_r+0x99c>
 8006540:	9b07      	ldr	r3, [sp, #28]
 8006542:	f1c0 001c 	rsb	r0, r0, #28
 8006546:	4480      	add	r8, r0
 8006548:	4405      	add	r5, r0
 800654a:	4403      	add	r3, r0
 800654c:	9307      	str	r3, [sp, #28]
 800654e:	f1b8 0f00 	cmp.w	r8, #0
 8006552:	dd05      	ble.n	8006560 <_dtoa_r+0x7f8>
 8006554:	4651      	mov	r1, sl
 8006556:	4642      	mov	r2, r8
 8006558:	4620      	mov	r0, r4
 800655a:	f000 fd9f 	bl	800709c <__lshift>
 800655e:	4682      	mov	sl, r0
 8006560:	9b07      	ldr	r3, [sp, #28]
 8006562:	2b00      	cmp	r3, #0
 8006564:	dd05      	ble.n	8006572 <_dtoa_r+0x80a>
 8006566:	4631      	mov	r1, r6
 8006568:	461a      	mov	r2, r3
 800656a:	4620      	mov	r0, r4
 800656c:	f000 fd96 	bl	800709c <__lshift>
 8006570:	4606      	mov	r6, r0
 8006572:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006574:	2b00      	cmp	r3, #0
 8006576:	f000 80d3 	beq.w	8006720 <_dtoa_r+0x9b8>
 800657a:	4631      	mov	r1, r6
 800657c:	4650      	mov	r0, sl
 800657e:	f000 fdde 	bl	800713e <__mcmp>
 8006582:	2800      	cmp	r0, #0
 8006584:	f280 80cc 	bge.w	8006720 <_dtoa_r+0x9b8>
 8006588:	2300      	movs	r3, #0
 800658a:	4651      	mov	r1, sl
 800658c:	220a      	movs	r2, #10
 800658e:	4620      	mov	r0, r4
 8006590:	f000 fc18 	bl	8006dc4 <__multadd>
 8006594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006596:	f10b 3bff 	add.w	fp, fp, #4294967295
 800659a:	4682      	mov	sl, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 81a9 	beq.w	80068f4 <_dtoa_r+0xb8c>
 80065a2:	2300      	movs	r3, #0
 80065a4:	4639      	mov	r1, r7
 80065a6:	220a      	movs	r2, #10
 80065a8:	4620      	mov	r0, r4
 80065aa:	f000 fc0b 	bl	8006dc4 <__multadd>
 80065ae:	9b04      	ldr	r3, [sp, #16]
 80065b0:	4607      	mov	r7, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	dc03      	bgt.n	80065be <_dtoa_r+0x856>
 80065b6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	f300 80b9 	bgt.w	8006730 <_dtoa_r+0x9c8>
 80065be:	2d00      	cmp	r5, #0
 80065c0:	dd05      	ble.n	80065ce <_dtoa_r+0x866>
 80065c2:	4639      	mov	r1, r7
 80065c4:	462a      	mov	r2, r5
 80065c6:	4620      	mov	r0, r4
 80065c8:	f000 fd68 	bl	800709c <__lshift>
 80065cc:	4607      	mov	r7, r0
 80065ce:	9b08      	ldr	r3, [sp, #32]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f000 8110 	beq.w	80067f6 <_dtoa_r+0xa8e>
 80065d6:	6879      	ldr	r1, [r7, #4]
 80065d8:	4620      	mov	r0, r4
 80065da:	f000 fba8 	bl	8006d2e <_Balloc>
 80065de:	4605      	mov	r5, r0
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	f107 010c 	add.w	r1, r7, #12
 80065e6:	3202      	adds	r2, #2
 80065e8:	0092      	lsls	r2, r2, #2
 80065ea:	300c      	adds	r0, #12
 80065ec:	f000 fb94 	bl	8006d18 <memcpy>
 80065f0:	2201      	movs	r2, #1
 80065f2:	4629      	mov	r1, r5
 80065f4:	4620      	mov	r0, r4
 80065f6:	f000 fd51 	bl	800709c <__lshift>
 80065fa:	9707      	str	r7, [sp, #28]
 80065fc:	4607      	mov	r7, r0
 80065fe:	9b02      	ldr	r3, [sp, #8]
 8006600:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	9308      	str	r3, [sp, #32]
 800660a:	4631      	mov	r1, r6
 800660c:	4650      	mov	r0, sl
 800660e:	f7ff fb1d 	bl	8005c4c <quorem>
 8006612:	9907      	ldr	r1, [sp, #28]
 8006614:	4605      	mov	r5, r0
 8006616:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800661a:	4650      	mov	r0, sl
 800661c:	f000 fd8f 	bl	800713e <__mcmp>
 8006620:	463a      	mov	r2, r7
 8006622:	9002      	str	r0, [sp, #8]
 8006624:	4631      	mov	r1, r6
 8006626:	4620      	mov	r0, r4
 8006628:	f000 fda3 	bl	8007172 <__mdiff>
 800662c:	68c3      	ldr	r3, [r0, #12]
 800662e:	4602      	mov	r2, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	f040 80e2 	bne.w	80067fa <_dtoa_r+0xa92>
 8006636:	4601      	mov	r1, r0
 8006638:	9009      	str	r0, [sp, #36]	; 0x24
 800663a:	4650      	mov	r0, sl
 800663c:	f000 fd7f 	bl	800713e <__mcmp>
 8006640:	4603      	mov	r3, r0
 8006642:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006644:	4611      	mov	r1, r2
 8006646:	4620      	mov	r0, r4
 8006648:	9309      	str	r3, [sp, #36]	; 0x24
 800664a:	f000 fba4 	bl	8006d96 <_Bfree>
 800664e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006650:	2b00      	cmp	r3, #0
 8006652:	f040 80d4 	bne.w	80067fe <_dtoa_r+0xa96>
 8006656:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006658:	2a00      	cmp	r2, #0
 800665a:	f040 80d0 	bne.w	80067fe <_dtoa_r+0xa96>
 800665e:	9a08      	ldr	r2, [sp, #32]
 8006660:	2a00      	cmp	r2, #0
 8006662:	f040 80cc 	bne.w	80067fe <_dtoa_r+0xa96>
 8006666:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800666a:	f000 80e8 	beq.w	800683e <_dtoa_r+0xad6>
 800666e:	9b02      	ldr	r3, [sp, #8]
 8006670:	2b00      	cmp	r3, #0
 8006672:	dd01      	ble.n	8006678 <_dtoa_r+0x910>
 8006674:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8006678:	f108 0501 	add.w	r5, r8, #1
 800667c:	f888 9000 	strb.w	r9, [r8]
 8006680:	e06b      	b.n	800675a <_dtoa_r+0x9f2>
 8006682:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006684:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006688:	e6f7      	b.n	800647a <_dtoa_r+0x712>
 800668a:	9b08      	ldr	r3, [sp, #32]
 800668c:	f109 36ff 	add.w	r6, r9, #4294967295
 8006690:	42b3      	cmp	r3, r6
 8006692:	bfb7      	itett	lt
 8006694:	9b08      	ldrlt	r3, [sp, #32]
 8006696:	1b9e      	subge	r6, r3, r6
 8006698:	1af2      	sublt	r2, r6, r3
 800669a:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800669c:	bfbf      	itttt	lt
 800669e:	9608      	strlt	r6, [sp, #32]
 80066a0:	189b      	addlt	r3, r3, r2
 80066a2:	930c      	strlt	r3, [sp, #48]	; 0x30
 80066a4:	2600      	movlt	r6, #0
 80066a6:	f1b9 0f00 	cmp.w	r9, #0
 80066aa:	bfb9      	ittee	lt
 80066ac:	eba8 0509 	sublt.w	r5, r8, r9
 80066b0:	2300      	movlt	r3, #0
 80066b2:	4645      	movge	r5, r8
 80066b4:	464b      	movge	r3, r9
 80066b6:	e6e2      	b.n	800647e <_dtoa_r+0x716>
 80066b8:	9e08      	ldr	r6, [sp, #32]
 80066ba:	4645      	mov	r5, r8
 80066bc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80066be:	e6e7      	b.n	8006490 <_dtoa_r+0x728>
 80066c0:	9a08      	ldr	r2, [sp, #32]
 80066c2:	e710      	b.n	80064e6 <_dtoa_r+0x77e>
 80066c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	dc18      	bgt.n	80066fc <_dtoa_r+0x994>
 80066ca:	9b02      	ldr	r3, [sp, #8]
 80066cc:	b9b3      	cbnz	r3, 80066fc <_dtoa_r+0x994>
 80066ce:	9b03      	ldr	r3, [sp, #12]
 80066d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066d4:	b9a3      	cbnz	r3, 8006700 <_dtoa_r+0x998>
 80066d6:	9b03      	ldr	r3, [sp, #12]
 80066d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066dc:	0d1b      	lsrs	r3, r3, #20
 80066de:	051b      	lsls	r3, r3, #20
 80066e0:	b12b      	cbz	r3, 80066ee <_dtoa_r+0x986>
 80066e2:	9b07      	ldr	r3, [sp, #28]
 80066e4:	f108 0801 	add.w	r8, r8, #1
 80066e8:	3301      	adds	r3, #1
 80066ea:	9307      	str	r3, [sp, #28]
 80066ec:	2301      	movs	r3, #1
 80066ee:	9308      	str	r3, [sp, #32]
 80066f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f47f af11 	bne.w	800651a <_dtoa_r+0x7b2>
 80066f8:	2001      	movs	r0, #1
 80066fa:	e716      	b.n	800652a <_dtoa_r+0x7c2>
 80066fc:	2300      	movs	r3, #0
 80066fe:	e7f6      	b.n	80066ee <_dtoa_r+0x986>
 8006700:	9b02      	ldr	r3, [sp, #8]
 8006702:	e7f4      	b.n	80066ee <_dtoa_r+0x986>
 8006704:	f43f af23 	beq.w	800654e <_dtoa_r+0x7e6>
 8006708:	9a07      	ldr	r2, [sp, #28]
 800670a:	331c      	adds	r3, #28
 800670c:	441a      	add	r2, r3
 800670e:	4498      	add	r8, r3
 8006710:	441d      	add	r5, r3
 8006712:	4613      	mov	r3, r2
 8006714:	e71a      	b.n	800654c <_dtoa_r+0x7e4>
 8006716:	4603      	mov	r3, r0
 8006718:	e7f6      	b.n	8006708 <_dtoa_r+0x9a0>
 800671a:	bf00      	nop
 800671c:	40240000 	.word	0x40240000
 8006720:	f1b9 0f00 	cmp.w	r9, #0
 8006724:	dc33      	bgt.n	800678e <_dtoa_r+0xa26>
 8006726:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006728:	2b02      	cmp	r3, #2
 800672a:	dd30      	ble.n	800678e <_dtoa_r+0xa26>
 800672c:	f8cd 9010 	str.w	r9, [sp, #16]
 8006730:	9b04      	ldr	r3, [sp, #16]
 8006732:	b963      	cbnz	r3, 800674e <_dtoa_r+0x9e6>
 8006734:	4631      	mov	r1, r6
 8006736:	2205      	movs	r2, #5
 8006738:	4620      	mov	r0, r4
 800673a:	f000 fb43 	bl	8006dc4 <__multadd>
 800673e:	4601      	mov	r1, r0
 8006740:	4606      	mov	r6, r0
 8006742:	4650      	mov	r0, sl
 8006744:	f000 fcfb 	bl	800713e <__mcmp>
 8006748:	2800      	cmp	r0, #0
 800674a:	f73f ad5c 	bgt.w	8006206 <_dtoa_r+0x49e>
 800674e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006750:	9d06      	ldr	r5, [sp, #24]
 8006752:	ea6f 0b03 	mvn.w	fp, r3
 8006756:	2300      	movs	r3, #0
 8006758:	9307      	str	r3, [sp, #28]
 800675a:	4631      	mov	r1, r6
 800675c:	4620      	mov	r0, r4
 800675e:	f000 fb1a 	bl	8006d96 <_Bfree>
 8006762:	2f00      	cmp	r7, #0
 8006764:	f43f ae4b 	beq.w	80063fe <_dtoa_r+0x696>
 8006768:	9b07      	ldr	r3, [sp, #28]
 800676a:	b12b      	cbz	r3, 8006778 <_dtoa_r+0xa10>
 800676c:	42bb      	cmp	r3, r7
 800676e:	d003      	beq.n	8006778 <_dtoa_r+0xa10>
 8006770:	4619      	mov	r1, r3
 8006772:	4620      	mov	r0, r4
 8006774:	f000 fb0f 	bl	8006d96 <_Bfree>
 8006778:	4639      	mov	r1, r7
 800677a:	4620      	mov	r0, r4
 800677c:	f000 fb0b 	bl	8006d96 <_Bfree>
 8006780:	e63d      	b.n	80063fe <_dtoa_r+0x696>
 8006782:	2600      	movs	r6, #0
 8006784:	4637      	mov	r7, r6
 8006786:	e7e2      	b.n	800674e <_dtoa_r+0x9e6>
 8006788:	46bb      	mov	fp, r7
 800678a:	4637      	mov	r7, r6
 800678c:	e53b      	b.n	8006206 <_dtoa_r+0x49e>
 800678e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006790:	f8cd 9010 	str.w	r9, [sp, #16]
 8006794:	2b00      	cmp	r3, #0
 8006796:	f47f af12 	bne.w	80065be <_dtoa_r+0x856>
 800679a:	9d06      	ldr	r5, [sp, #24]
 800679c:	4631      	mov	r1, r6
 800679e:	4650      	mov	r0, sl
 80067a0:	f7ff fa54 	bl	8005c4c <quorem>
 80067a4:	9b06      	ldr	r3, [sp, #24]
 80067a6:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80067aa:	f805 9b01 	strb.w	r9, [r5], #1
 80067ae:	9a04      	ldr	r2, [sp, #16]
 80067b0:	1aeb      	subs	r3, r5, r3
 80067b2:	429a      	cmp	r2, r3
 80067b4:	f300 8081 	bgt.w	80068ba <_dtoa_r+0xb52>
 80067b8:	9b06      	ldr	r3, [sp, #24]
 80067ba:	2a01      	cmp	r2, #1
 80067bc:	bfac      	ite	ge
 80067be:	189b      	addge	r3, r3, r2
 80067c0:	3301      	addlt	r3, #1
 80067c2:	4698      	mov	r8, r3
 80067c4:	2300      	movs	r3, #0
 80067c6:	9307      	str	r3, [sp, #28]
 80067c8:	4651      	mov	r1, sl
 80067ca:	2201      	movs	r2, #1
 80067cc:	4620      	mov	r0, r4
 80067ce:	f000 fc65 	bl	800709c <__lshift>
 80067d2:	4631      	mov	r1, r6
 80067d4:	4682      	mov	sl, r0
 80067d6:	f000 fcb2 	bl	800713e <__mcmp>
 80067da:	2800      	cmp	r0, #0
 80067dc:	dc34      	bgt.n	8006848 <_dtoa_r+0xae0>
 80067de:	d102      	bne.n	80067e6 <_dtoa_r+0xa7e>
 80067e0:	f019 0f01 	tst.w	r9, #1
 80067e4:	d130      	bne.n	8006848 <_dtoa_r+0xae0>
 80067e6:	4645      	mov	r5, r8
 80067e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80067ec:	1e6a      	subs	r2, r5, #1
 80067ee:	2b30      	cmp	r3, #48	; 0x30
 80067f0:	d1b3      	bne.n	800675a <_dtoa_r+0x9f2>
 80067f2:	4615      	mov	r5, r2
 80067f4:	e7f8      	b.n	80067e8 <_dtoa_r+0xa80>
 80067f6:	4638      	mov	r0, r7
 80067f8:	e6ff      	b.n	80065fa <_dtoa_r+0x892>
 80067fa:	2301      	movs	r3, #1
 80067fc:	e722      	b.n	8006644 <_dtoa_r+0x8dc>
 80067fe:	9a02      	ldr	r2, [sp, #8]
 8006800:	2a00      	cmp	r2, #0
 8006802:	db04      	blt.n	800680e <_dtoa_r+0xaa6>
 8006804:	d128      	bne.n	8006858 <_dtoa_r+0xaf0>
 8006806:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006808:	bb32      	cbnz	r2, 8006858 <_dtoa_r+0xaf0>
 800680a:	9a08      	ldr	r2, [sp, #32]
 800680c:	bb22      	cbnz	r2, 8006858 <_dtoa_r+0xaf0>
 800680e:	2b00      	cmp	r3, #0
 8006810:	f77f af32 	ble.w	8006678 <_dtoa_r+0x910>
 8006814:	4651      	mov	r1, sl
 8006816:	2201      	movs	r2, #1
 8006818:	4620      	mov	r0, r4
 800681a:	f000 fc3f 	bl	800709c <__lshift>
 800681e:	4631      	mov	r1, r6
 8006820:	4682      	mov	sl, r0
 8006822:	f000 fc8c 	bl	800713e <__mcmp>
 8006826:	2800      	cmp	r0, #0
 8006828:	dc05      	bgt.n	8006836 <_dtoa_r+0xace>
 800682a:	f47f af25 	bne.w	8006678 <_dtoa_r+0x910>
 800682e:	f019 0f01 	tst.w	r9, #1
 8006832:	f43f af21 	beq.w	8006678 <_dtoa_r+0x910>
 8006836:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800683a:	f47f af1b 	bne.w	8006674 <_dtoa_r+0x90c>
 800683e:	2339      	movs	r3, #57	; 0x39
 8006840:	f108 0801 	add.w	r8, r8, #1
 8006844:	f808 3c01 	strb.w	r3, [r8, #-1]
 8006848:	4645      	mov	r5, r8
 800684a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800684e:	1e6a      	subs	r2, r5, #1
 8006850:	2b39      	cmp	r3, #57	; 0x39
 8006852:	d03a      	beq.n	80068ca <_dtoa_r+0xb62>
 8006854:	3301      	adds	r3, #1
 8006856:	e03f      	b.n	80068d8 <_dtoa_r+0xb70>
 8006858:	2b00      	cmp	r3, #0
 800685a:	f108 0501 	add.w	r5, r8, #1
 800685e:	dd05      	ble.n	800686c <_dtoa_r+0xb04>
 8006860:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006864:	d0eb      	beq.n	800683e <_dtoa_r+0xad6>
 8006866:	f109 0901 	add.w	r9, r9, #1
 800686a:	e707      	b.n	800667c <_dtoa_r+0x914>
 800686c:	9b06      	ldr	r3, [sp, #24]
 800686e:	9a04      	ldr	r2, [sp, #16]
 8006870:	1aeb      	subs	r3, r5, r3
 8006872:	4293      	cmp	r3, r2
 8006874:	46a8      	mov	r8, r5
 8006876:	f805 9c01 	strb.w	r9, [r5, #-1]
 800687a:	d0a5      	beq.n	80067c8 <_dtoa_r+0xa60>
 800687c:	4651      	mov	r1, sl
 800687e:	2300      	movs	r3, #0
 8006880:	220a      	movs	r2, #10
 8006882:	4620      	mov	r0, r4
 8006884:	f000 fa9e 	bl	8006dc4 <__multadd>
 8006888:	9b07      	ldr	r3, [sp, #28]
 800688a:	4682      	mov	sl, r0
 800688c:	42bb      	cmp	r3, r7
 800688e:	f04f 020a 	mov.w	r2, #10
 8006892:	f04f 0300 	mov.w	r3, #0
 8006896:	9907      	ldr	r1, [sp, #28]
 8006898:	4620      	mov	r0, r4
 800689a:	d104      	bne.n	80068a6 <_dtoa_r+0xb3e>
 800689c:	f000 fa92 	bl	8006dc4 <__multadd>
 80068a0:	9007      	str	r0, [sp, #28]
 80068a2:	4607      	mov	r7, r0
 80068a4:	e6b1      	b.n	800660a <_dtoa_r+0x8a2>
 80068a6:	f000 fa8d 	bl	8006dc4 <__multadd>
 80068aa:	2300      	movs	r3, #0
 80068ac:	9007      	str	r0, [sp, #28]
 80068ae:	220a      	movs	r2, #10
 80068b0:	4639      	mov	r1, r7
 80068b2:	4620      	mov	r0, r4
 80068b4:	f000 fa86 	bl	8006dc4 <__multadd>
 80068b8:	e7f3      	b.n	80068a2 <_dtoa_r+0xb3a>
 80068ba:	4651      	mov	r1, sl
 80068bc:	2300      	movs	r3, #0
 80068be:	220a      	movs	r2, #10
 80068c0:	4620      	mov	r0, r4
 80068c2:	f000 fa7f 	bl	8006dc4 <__multadd>
 80068c6:	4682      	mov	sl, r0
 80068c8:	e768      	b.n	800679c <_dtoa_r+0xa34>
 80068ca:	9b06      	ldr	r3, [sp, #24]
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d105      	bne.n	80068dc <_dtoa_r+0xb74>
 80068d0:	2331      	movs	r3, #49	; 0x31
 80068d2:	9a06      	ldr	r2, [sp, #24]
 80068d4:	f10b 0b01 	add.w	fp, fp, #1
 80068d8:	7013      	strb	r3, [r2, #0]
 80068da:	e73e      	b.n	800675a <_dtoa_r+0x9f2>
 80068dc:	4615      	mov	r5, r2
 80068de:	e7b4      	b.n	800684a <_dtoa_r+0xae2>
 80068e0:	4b09      	ldr	r3, [pc, #36]	; (8006908 <_dtoa_r+0xba0>)
 80068e2:	f7ff baa3 	b.w	8005e2c <_dtoa_r+0xc4>
 80068e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f47f aa7d 	bne.w	8005de8 <_dtoa_r+0x80>
 80068ee:	4b07      	ldr	r3, [pc, #28]	; (800690c <_dtoa_r+0xba4>)
 80068f0:	f7ff ba9c 	b.w	8005e2c <_dtoa_r+0xc4>
 80068f4:	9b04      	ldr	r3, [sp, #16]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f73f af4f 	bgt.w	800679a <_dtoa_r+0xa32>
 80068fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80068fe:	2b02      	cmp	r3, #2
 8006900:	f77f af4b 	ble.w	800679a <_dtoa_r+0xa32>
 8006904:	e714      	b.n	8006730 <_dtoa_r+0x9c8>
 8006906:	bf00      	nop
 8006908:	080079e6 	.word	0x080079e6
 800690c:	08007b0b 	.word	0x08007b0b

08006910 <__sflush_r>:
 8006910:	898a      	ldrh	r2, [r1, #12]
 8006912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006916:	4605      	mov	r5, r0
 8006918:	0710      	lsls	r0, r2, #28
 800691a:	460c      	mov	r4, r1
 800691c:	d45a      	bmi.n	80069d4 <__sflush_r+0xc4>
 800691e:	684b      	ldr	r3, [r1, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	dc05      	bgt.n	8006930 <__sflush_r+0x20>
 8006924:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006926:	2b00      	cmp	r3, #0
 8006928:	dc02      	bgt.n	8006930 <__sflush_r+0x20>
 800692a:	2000      	movs	r0, #0
 800692c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006930:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006932:	2e00      	cmp	r6, #0
 8006934:	d0f9      	beq.n	800692a <__sflush_r+0x1a>
 8006936:	2300      	movs	r3, #0
 8006938:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800693c:	682f      	ldr	r7, [r5, #0]
 800693e:	602b      	str	r3, [r5, #0]
 8006940:	d033      	beq.n	80069aa <__sflush_r+0x9a>
 8006942:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006944:	89a3      	ldrh	r3, [r4, #12]
 8006946:	075a      	lsls	r2, r3, #29
 8006948:	d505      	bpl.n	8006956 <__sflush_r+0x46>
 800694a:	6863      	ldr	r3, [r4, #4]
 800694c:	1ac0      	subs	r0, r0, r3
 800694e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006950:	b10b      	cbz	r3, 8006956 <__sflush_r+0x46>
 8006952:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006954:	1ac0      	subs	r0, r0, r3
 8006956:	2300      	movs	r3, #0
 8006958:	4602      	mov	r2, r0
 800695a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800695c:	6a21      	ldr	r1, [r4, #32]
 800695e:	4628      	mov	r0, r5
 8006960:	47b0      	blx	r6
 8006962:	1c43      	adds	r3, r0, #1
 8006964:	89a3      	ldrh	r3, [r4, #12]
 8006966:	d106      	bne.n	8006976 <__sflush_r+0x66>
 8006968:	6829      	ldr	r1, [r5, #0]
 800696a:	291d      	cmp	r1, #29
 800696c:	d84b      	bhi.n	8006a06 <__sflush_r+0xf6>
 800696e:	4a2b      	ldr	r2, [pc, #172]	; (8006a1c <__sflush_r+0x10c>)
 8006970:	40ca      	lsrs	r2, r1
 8006972:	07d6      	lsls	r6, r2, #31
 8006974:	d547      	bpl.n	8006a06 <__sflush_r+0xf6>
 8006976:	2200      	movs	r2, #0
 8006978:	6062      	str	r2, [r4, #4]
 800697a:	6922      	ldr	r2, [r4, #16]
 800697c:	04d9      	lsls	r1, r3, #19
 800697e:	6022      	str	r2, [r4, #0]
 8006980:	d504      	bpl.n	800698c <__sflush_r+0x7c>
 8006982:	1c42      	adds	r2, r0, #1
 8006984:	d101      	bne.n	800698a <__sflush_r+0x7a>
 8006986:	682b      	ldr	r3, [r5, #0]
 8006988:	b903      	cbnz	r3, 800698c <__sflush_r+0x7c>
 800698a:	6560      	str	r0, [r4, #84]	; 0x54
 800698c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800698e:	602f      	str	r7, [r5, #0]
 8006990:	2900      	cmp	r1, #0
 8006992:	d0ca      	beq.n	800692a <__sflush_r+0x1a>
 8006994:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006998:	4299      	cmp	r1, r3
 800699a:	d002      	beq.n	80069a2 <__sflush_r+0x92>
 800699c:	4628      	mov	r0, r5
 800699e:	f000 fca5 	bl	80072ec <_free_r>
 80069a2:	2000      	movs	r0, #0
 80069a4:	6360      	str	r0, [r4, #52]	; 0x34
 80069a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069aa:	6a21      	ldr	r1, [r4, #32]
 80069ac:	2301      	movs	r3, #1
 80069ae:	4628      	mov	r0, r5
 80069b0:	47b0      	blx	r6
 80069b2:	1c41      	adds	r1, r0, #1
 80069b4:	d1c6      	bne.n	8006944 <__sflush_r+0x34>
 80069b6:	682b      	ldr	r3, [r5, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d0c3      	beq.n	8006944 <__sflush_r+0x34>
 80069bc:	2b1d      	cmp	r3, #29
 80069be:	d001      	beq.n	80069c4 <__sflush_r+0xb4>
 80069c0:	2b16      	cmp	r3, #22
 80069c2:	d101      	bne.n	80069c8 <__sflush_r+0xb8>
 80069c4:	602f      	str	r7, [r5, #0]
 80069c6:	e7b0      	b.n	800692a <__sflush_r+0x1a>
 80069c8:	89a3      	ldrh	r3, [r4, #12]
 80069ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069ce:	81a3      	strh	r3, [r4, #12]
 80069d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069d4:	690f      	ldr	r7, [r1, #16]
 80069d6:	2f00      	cmp	r7, #0
 80069d8:	d0a7      	beq.n	800692a <__sflush_r+0x1a>
 80069da:	0793      	lsls	r3, r2, #30
 80069dc:	bf18      	it	ne
 80069de:	2300      	movne	r3, #0
 80069e0:	680e      	ldr	r6, [r1, #0]
 80069e2:	bf08      	it	eq
 80069e4:	694b      	ldreq	r3, [r1, #20]
 80069e6:	eba6 0807 	sub.w	r8, r6, r7
 80069ea:	600f      	str	r7, [r1, #0]
 80069ec:	608b      	str	r3, [r1, #8]
 80069ee:	f1b8 0f00 	cmp.w	r8, #0
 80069f2:	dd9a      	ble.n	800692a <__sflush_r+0x1a>
 80069f4:	4643      	mov	r3, r8
 80069f6:	463a      	mov	r2, r7
 80069f8:	6a21      	ldr	r1, [r4, #32]
 80069fa:	4628      	mov	r0, r5
 80069fc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80069fe:	47b0      	blx	r6
 8006a00:	2800      	cmp	r0, #0
 8006a02:	dc07      	bgt.n	8006a14 <__sflush_r+0x104>
 8006a04:	89a3      	ldrh	r3, [r4, #12]
 8006a06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a0a:	81a3      	strh	r3, [r4, #12]
 8006a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a14:	4407      	add	r7, r0
 8006a16:	eba8 0800 	sub.w	r8, r8, r0
 8006a1a:	e7e8      	b.n	80069ee <__sflush_r+0xde>
 8006a1c:	20400001 	.word	0x20400001

08006a20 <_fflush_r>:
 8006a20:	b538      	push	{r3, r4, r5, lr}
 8006a22:	690b      	ldr	r3, [r1, #16]
 8006a24:	4605      	mov	r5, r0
 8006a26:	460c      	mov	r4, r1
 8006a28:	b1db      	cbz	r3, 8006a62 <_fflush_r+0x42>
 8006a2a:	b118      	cbz	r0, 8006a34 <_fflush_r+0x14>
 8006a2c:	6983      	ldr	r3, [r0, #24]
 8006a2e:	b90b      	cbnz	r3, 8006a34 <_fflush_r+0x14>
 8006a30:	f000 f860 	bl	8006af4 <__sinit>
 8006a34:	4b0c      	ldr	r3, [pc, #48]	; (8006a68 <_fflush_r+0x48>)
 8006a36:	429c      	cmp	r4, r3
 8006a38:	d109      	bne.n	8006a4e <_fflush_r+0x2e>
 8006a3a:	686c      	ldr	r4, [r5, #4]
 8006a3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a40:	b17b      	cbz	r3, 8006a62 <_fflush_r+0x42>
 8006a42:	4621      	mov	r1, r4
 8006a44:	4628      	mov	r0, r5
 8006a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a4a:	f7ff bf61 	b.w	8006910 <__sflush_r>
 8006a4e:	4b07      	ldr	r3, [pc, #28]	; (8006a6c <_fflush_r+0x4c>)
 8006a50:	429c      	cmp	r4, r3
 8006a52:	d101      	bne.n	8006a58 <_fflush_r+0x38>
 8006a54:	68ac      	ldr	r4, [r5, #8]
 8006a56:	e7f1      	b.n	8006a3c <_fflush_r+0x1c>
 8006a58:	4b05      	ldr	r3, [pc, #20]	; (8006a70 <_fflush_r+0x50>)
 8006a5a:	429c      	cmp	r4, r3
 8006a5c:	bf08      	it	eq
 8006a5e:	68ec      	ldreq	r4, [r5, #12]
 8006a60:	e7ec      	b.n	8006a3c <_fflush_r+0x1c>
 8006a62:	2000      	movs	r0, #0
 8006a64:	bd38      	pop	{r3, r4, r5, pc}
 8006a66:	bf00      	nop
 8006a68:	08007b38 	.word	0x08007b38
 8006a6c:	08007b58 	.word	0x08007b58
 8006a70:	08007b18 	.word	0x08007b18

08006a74 <_cleanup_r>:
 8006a74:	4901      	ldr	r1, [pc, #4]	; (8006a7c <_cleanup_r+0x8>)
 8006a76:	f000 b8a9 	b.w	8006bcc <_fwalk_reent>
 8006a7a:	bf00      	nop
 8006a7c:	08006a21 	.word	0x08006a21

08006a80 <std.isra.0>:
 8006a80:	2300      	movs	r3, #0
 8006a82:	b510      	push	{r4, lr}
 8006a84:	4604      	mov	r4, r0
 8006a86:	6003      	str	r3, [r0, #0]
 8006a88:	6043      	str	r3, [r0, #4]
 8006a8a:	6083      	str	r3, [r0, #8]
 8006a8c:	8181      	strh	r1, [r0, #12]
 8006a8e:	6643      	str	r3, [r0, #100]	; 0x64
 8006a90:	81c2      	strh	r2, [r0, #14]
 8006a92:	6103      	str	r3, [r0, #16]
 8006a94:	6143      	str	r3, [r0, #20]
 8006a96:	6183      	str	r3, [r0, #24]
 8006a98:	4619      	mov	r1, r3
 8006a9a:	2208      	movs	r2, #8
 8006a9c:	305c      	adds	r0, #92	; 0x5c
 8006a9e:	f7fe fb21 	bl	80050e4 <memset>
 8006aa2:	4b05      	ldr	r3, [pc, #20]	; (8006ab8 <std.isra.0+0x38>)
 8006aa4:	6224      	str	r4, [r4, #32]
 8006aa6:	6263      	str	r3, [r4, #36]	; 0x24
 8006aa8:	4b04      	ldr	r3, [pc, #16]	; (8006abc <std.isra.0+0x3c>)
 8006aaa:	62a3      	str	r3, [r4, #40]	; 0x28
 8006aac:	4b04      	ldr	r3, [pc, #16]	; (8006ac0 <std.isra.0+0x40>)
 8006aae:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ab0:	4b04      	ldr	r3, [pc, #16]	; (8006ac4 <std.isra.0+0x44>)
 8006ab2:	6323      	str	r3, [r4, #48]	; 0x30
 8006ab4:	bd10      	pop	{r4, pc}
 8006ab6:	bf00      	nop
 8006ab8:	080076dd 	.word	0x080076dd
 8006abc:	080076ff 	.word	0x080076ff
 8006ac0:	08007737 	.word	0x08007737
 8006ac4:	0800775b 	.word	0x0800775b

08006ac8 <__sfmoreglue>:
 8006ac8:	b570      	push	{r4, r5, r6, lr}
 8006aca:	2568      	movs	r5, #104	; 0x68
 8006acc:	1e4a      	subs	r2, r1, #1
 8006ace:	4355      	muls	r5, r2
 8006ad0:	460e      	mov	r6, r1
 8006ad2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006ad6:	f000 fc55 	bl	8007384 <_malloc_r>
 8006ada:	4604      	mov	r4, r0
 8006adc:	b140      	cbz	r0, 8006af0 <__sfmoreglue+0x28>
 8006ade:	2100      	movs	r1, #0
 8006ae0:	e880 0042 	stmia.w	r0, {r1, r6}
 8006ae4:	300c      	adds	r0, #12
 8006ae6:	60a0      	str	r0, [r4, #8]
 8006ae8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006aec:	f7fe fafa 	bl	80050e4 <memset>
 8006af0:	4620      	mov	r0, r4
 8006af2:	bd70      	pop	{r4, r5, r6, pc}

08006af4 <__sinit>:
 8006af4:	6983      	ldr	r3, [r0, #24]
 8006af6:	b510      	push	{r4, lr}
 8006af8:	4604      	mov	r4, r0
 8006afa:	bb33      	cbnz	r3, 8006b4a <__sinit+0x56>
 8006afc:	6483      	str	r3, [r0, #72]	; 0x48
 8006afe:	64c3      	str	r3, [r0, #76]	; 0x4c
 8006b00:	6503      	str	r3, [r0, #80]	; 0x50
 8006b02:	4b12      	ldr	r3, [pc, #72]	; (8006b4c <__sinit+0x58>)
 8006b04:	4a12      	ldr	r2, [pc, #72]	; (8006b50 <__sinit+0x5c>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	6282      	str	r2, [r0, #40]	; 0x28
 8006b0a:	4298      	cmp	r0, r3
 8006b0c:	bf04      	itt	eq
 8006b0e:	2301      	moveq	r3, #1
 8006b10:	6183      	streq	r3, [r0, #24]
 8006b12:	f000 f81f 	bl	8006b54 <__sfp>
 8006b16:	6060      	str	r0, [r4, #4]
 8006b18:	4620      	mov	r0, r4
 8006b1a:	f000 f81b 	bl	8006b54 <__sfp>
 8006b1e:	60a0      	str	r0, [r4, #8]
 8006b20:	4620      	mov	r0, r4
 8006b22:	f000 f817 	bl	8006b54 <__sfp>
 8006b26:	2200      	movs	r2, #0
 8006b28:	60e0      	str	r0, [r4, #12]
 8006b2a:	2104      	movs	r1, #4
 8006b2c:	6860      	ldr	r0, [r4, #4]
 8006b2e:	f7ff ffa7 	bl	8006a80 <std.isra.0>
 8006b32:	2201      	movs	r2, #1
 8006b34:	2109      	movs	r1, #9
 8006b36:	68a0      	ldr	r0, [r4, #8]
 8006b38:	f7ff ffa2 	bl	8006a80 <std.isra.0>
 8006b3c:	2202      	movs	r2, #2
 8006b3e:	2112      	movs	r1, #18
 8006b40:	68e0      	ldr	r0, [r4, #12]
 8006b42:	f7ff ff9d 	bl	8006a80 <std.isra.0>
 8006b46:	2301      	movs	r3, #1
 8006b48:	61a3      	str	r3, [r4, #24]
 8006b4a:	bd10      	pop	{r4, pc}
 8006b4c:	080079c8 	.word	0x080079c8
 8006b50:	08006a75 	.word	0x08006a75

08006b54 <__sfp>:
 8006b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b56:	4b1c      	ldr	r3, [pc, #112]	; (8006bc8 <__sfp+0x74>)
 8006b58:	4607      	mov	r7, r0
 8006b5a:	681e      	ldr	r6, [r3, #0]
 8006b5c:	69b3      	ldr	r3, [r6, #24]
 8006b5e:	b913      	cbnz	r3, 8006b66 <__sfp+0x12>
 8006b60:	4630      	mov	r0, r6
 8006b62:	f7ff ffc7 	bl	8006af4 <__sinit>
 8006b66:	3648      	adds	r6, #72	; 0x48
 8006b68:	68b4      	ldr	r4, [r6, #8]
 8006b6a:	6873      	ldr	r3, [r6, #4]
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	d503      	bpl.n	8006b78 <__sfp+0x24>
 8006b70:	6833      	ldr	r3, [r6, #0]
 8006b72:	b133      	cbz	r3, 8006b82 <__sfp+0x2e>
 8006b74:	6836      	ldr	r6, [r6, #0]
 8006b76:	e7f7      	b.n	8006b68 <__sfp+0x14>
 8006b78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006b7c:	b16d      	cbz	r5, 8006b9a <__sfp+0x46>
 8006b7e:	3468      	adds	r4, #104	; 0x68
 8006b80:	e7f4      	b.n	8006b6c <__sfp+0x18>
 8006b82:	2104      	movs	r1, #4
 8006b84:	4638      	mov	r0, r7
 8006b86:	f7ff ff9f 	bl	8006ac8 <__sfmoreglue>
 8006b8a:	6030      	str	r0, [r6, #0]
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	d1f1      	bne.n	8006b74 <__sfp+0x20>
 8006b90:	230c      	movs	r3, #12
 8006b92:	4604      	mov	r4, r0
 8006b94:	603b      	str	r3, [r7, #0]
 8006b96:	4620      	mov	r0, r4
 8006b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006b9e:	81e3      	strh	r3, [r4, #14]
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	6665      	str	r5, [r4, #100]	; 0x64
 8006ba4:	81a3      	strh	r3, [r4, #12]
 8006ba6:	6025      	str	r5, [r4, #0]
 8006ba8:	60a5      	str	r5, [r4, #8]
 8006baa:	6065      	str	r5, [r4, #4]
 8006bac:	6125      	str	r5, [r4, #16]
 8006bae:	6165      	str	r5, [r4, #20]
 8006bb0:	61a5      	str	r5, [r4, #24]
 8006bb2:	2208      	movs	r2, #8
 8006bb4:	4629      	mov	r1, r5
 8006bb6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006bba:	f7fe fa93 	bl	80050e4 <memset>
 8006bbe:	6365      	str	r5, [r4, #52]	; 0x34
 8006bc0:	63a5      	str	r5, [r4, #56]	; 0x38
 8006bc2:	64a5      	str	r5, [r4, #72]	; 0x48
 8006bc4:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006bc6:	e7e6      	b.n	8006b96 <__sfp+0x42>
 8006bc8:	080079c8 	.word	0x080079c8

08006bcc <_fwalk_reent>:
 8006bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bd0:	4680      	mov	r8, r0
 8006bd2:	4689      	mov	r9, r1
 8006bd4:	2600      	movs	r6, #0
 8006bd6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006bda:	b914      	cbnz	r4, 8006be2 <_fwalk_reent+0x16>
 8006bdc:	4630      	mov	r0, r6
 8006bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006be2:	68a5      	ldr	r5, [r4, #8]
 8006be4:	6867      	ldr	r7, [r4, #4]
 8006be6:	3f01      	subs	r7, #1
 8006be8:	d501      	bpl.n	8006bee <_fwalk_reent+0x22>
 8006bea:	6824      	ldr	r4, [r4, #0]
 8006bec:	e7f5      	b.n	8006bda <_fwalk_reent+0xe>
 8006bee:	89ab      	ldrh	r3, [r5, #12]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d907      	bls.n	8006c04 <_fwalk_reent+0x38>
 8006bf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	d003      	beq.n	8006c04 <_fwalk_reent+0x38>
 8006bfc:	4629      	mov	r1, r5
 8006bfe:	4640      	mov	r0, r8
 8006c00:	47c8      	blx	r9
 8006c02:	4306      	orrs	r6, r0
 8006c04:	3568      	adds	r5, #104	; 0x68
 8006c06:	e7ee      	b.n	8006be6 <_fwalk_reent+0x1a>

08006c08 <_localeconv_r>:
 8006c08:	4b04      	ldr	r3, [pc, #16]	; (8006c1c <_localeconv_r+0x14>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6a18      	ldr	r0, [r3, #32]
 8006c0e:	4b04      	ldr	r3, [pc, #16]	; (8006c20 <_localeconv_r+0x18>)
 8006c10:	2800      	cmp	r0, #0
 8006c12:	bf08      	it	eq
 8006c14:	4618      	moveq	r0, r3
 8006c16:	30f0      	adds	r0, #240	; 0xf0
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	2000000c 	.word	0x2000000c
 8006c20:	20000070 	.word	0x20000070

08006c24 <__swhatbuf_r>:
 8006c24:	b570      	push	{r4, r5, r6, lr}
 8006c26:	460e      	mov	r6, r1
 8006c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c2c:	b090      	sub	sp, #64	; 0x40
 8006c2e:	2900      	cmp	r1, #0
 8006c30:	4614      	mov	r4, r2
 8006c32:	461d      	mov	r5, r3
 8006c34:	da07      	bge.n	8006c46 <__swhatbuf_r+0x22>
 8006c36:	2300      	movs	r3, #0
 8006c38:	602b      	str	r3, [r5, #0]
 8006c3a:	89b3      	ldrh	r3, [r6, #12]
 8006c3c:	061a      	lsls	r2, r3, #24
 8006c3e:	d410      	bmi.n	8006c62 <__swhatbuf_r+0x3e>
 8006c40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c44:	e00e      	b.n	8006c64 <__swhatbuf_r+0x40>
 8006c46:	aa01      	add	r2, sp, #4
 8006c48:	f000 fdae 	bl	80077a8 <_fstat_r>
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	dbf2      	blt.n	8006c36 <__swhatbuf_r+0x12>
 8006c50:	9a02      	ldr	r2, [sp, #8]
 8006c52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006c56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006c5a:	425a      	negs	r2, r3
 8006c5c:	415a      	adcs	r2, r3
 8006c5e:	602a      	str	r2, [r5, #0]
 8006c60:	e7ee      	b.n	8006c40 <__swhatbuf_r+0x1c>
 8006c62:	2340      	movs	r3, #64	; 0x40
 8006c64:	2000      	movs	r0, #0
 8006c66:	6023      	str	r3, [r4, #0]
 8006c68:	b010      	add	sp, #64	; 0x40
 8006c6a:	bd70      	pop	{r4, r5, r6, pc}

08006c6c <__smakebuf_r>:
 8006c6c:	898b      	ldrh	r3, [r1, #12]
 8006c6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c70:	079d      	lsls	r5, r3, #30
 8006c72:	4606      	mov	r6, r0
 8006c74:	460c      	mov	r4, r1
 8006c76:	d507      	bpl.n	8006c88 <__smakebuf_r+0x1c>
 8006c78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c7c:	6023      	str	r3, [r4, #0]
 8006c7e:	6123      	str	r3, [r4, #16]
 8006c80:	2301      	movs	r3, #1
 8006c82:	6163      	str	r3, [r4, #20]
 8006c84:	b002      	add	sp, #8
 8006c86:	bd70      	pop	{r4, r5, r6, pc}
 8006c88:	ab01      	add	r3, sp, #4
 8006c8a:	466a      	mov	r2, sp
 8006c8c:	f7ff ffca 	bl	8006c24 <__swhatbuf_r>
 8006c90:	9900      	ldr	r1, [sp, #0]
 8006c92:	4605      	mov	r5, r0
 8006c94:	4630      	mov	r0, r6
 8006c96:	f000 fb75 	bl	8007384 <_malloc_r>
 8006c9a:	b948      	cbnz	r0, 8006cb0 <__smakebuf_r+0x44>
 8006c9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ca0:	059a      	lsls	r2, r3, #22
 8006ca2:	d4ef      	bmi.n	8006c84 <__smakebuf_r+0x18>
 8006ca4:	f023 0303 	bic.w	r3, r3, #3
 8006ca8:	f043 0302 	orr.w	r3, r3, #2
 8006cac:	81a3      	strh	r3, [r4, #12]
 8006cae:	e7e3      	b.n	8006c78 <__smakebuf_r+0xc>
 8006cb0:	4b0d      	ldr	r3, [pc, #52]	; (8006ce8 <__smakebuf_r+0x7c>)
 8006cb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8006cb4:	89a3      	ldrh	r3, [r4, #12]
 8006cb6:	6020      	str	r0, [r4, #0]
 8006cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cbc:	81a3      	strh	r3, [r4, #12]
 8006cbe:	9b00      	ldr	r3, [sp, #0]
 8006cc0:	6120      	str	r0, [r4, #16]
 8006cc2:	6163      	str	r3, [r4, #20]
 8006cc4:	9b01      	ldr	r3, [sp, #4]
 8006cc6:	b15b      	cbz	r3, 8006ce0 <__smakebuf_r+0x74>
 8006cc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ccc:	4630      	mov	r0, r6
 8006cce:	f000 fd7d 	bl	80077cc <_isatty_r>
 8006cd2:	b128      	cbz	r0, 8006ce0 <__smakebuf_r+0x74>
 8006cd4:	89a3      	ldrh	r3, [r4, #12]
 8006cd6:	f023 0303 	bic.w	r3, r3, #3
 8006cda:	f043 0301 	orr.w	r3, r3, #1
 8006cde:	81a3      	strh	r3, [r4, #12]
 8006ce0:	89a3      	ldrh	r3, [r4, #12]
 8006ce2:	431d      	orrs	r5, r3
 8006ce4:	81a5      	strh	r5, [r4, #12]
 8006ce6:	e7cd      	b.n	8006c84 <__smakebuf_r+0x18>
 8006ce8:	08006a75 	.word	0x08006a75

08006cec <malloc>:
 8006cec:	4b02      	ldr	r3, [pc, #8]	; (8006cf8 <malloc+0xc>)
 8006cee:	4601      	mov	r1, r0
 8006cf0:	6818      	ldr	r0, [r3, #0]
 8006cf2:	f000 bb47 	b.w	8007384 <_malloc_r>
 8006cf6:	bf00      	nop
 8006cf8:	2000000c 	.word	0x2000000c

08006cfc <memchr>:
 8006cfc:	b510      	push	{r4, lr}
 8006cfe:	b2c9      	uxtb	r1, r1
 8006d00:	4402      	add	r2, r0
 8006d02:	4290      	cmp	r0, r2
 8006d04:	4603      	mov	r3, r0
 8006d06:	d101      	bne.n	8006d0c <memchr+0x10>
 8006d08:	2000      	movs	r0, #0
 8006d0a:	bd10      	pop	{r4, pc}
 8006d0c:	781c      	ldrb	r4, [r3, #0]
 8006d0e:	3001      	adds	r0, #1
 8006d10:	428c      	cmp	r4, r1
 8006d12:	d1f6      	bne.n	8006d02 <memchr+0x6>
 8006d14:	4618      	mov	r0, r3
 8006d16:	bd10      	pop	{r4, pc}

08006d18 <memcpy>:
 8006d18:	b510      	push	{r4, lr}
 8006d1a:	1e43      	subs	r3, r0, #1
 8006d1c:	440a      	add	r2, r1
 8006d1e:	4291      	cmp	r1, r2
 8006d20:	d100      	bne.n	8006d24 <memcpy+0xc>
 8006d22:	bd10      	pop	{r4, pc}
 8006d24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d2c:	e7f7      	b.n	8006d1e <memcpy+0x6>

08006d2e <_Balloc>:
 8006d2e:	b570      	push	{r4, r5, r6, lr}
 8006d30:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006d32:	4604      	mov	r4, r0
 8006d34:	460e      	mov	r6, r1
 8006d36:	b93d      	cbnz	r5, 8006d48 <_Balloc+0x1a>
 8006d38:	2010      	movs	r0, #16
 8006d3a:	f7ff ffd7 	bl	8006cec <malloc>
 8006d3e:	6260      	str	r0, [r4, #36]	; 0x24
 8006d40:	6045      	str	r5, [r0, #4]
 8006d42:	6085      	str	r5, [r0, #8]
 8006d44:	6005      	str	r5, [r0, #0]
 8006d46:	60c5      	str	r5, [r0, #12]
 8006d48:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006d4a:	68eb      	ldr	r3, [r5, #12]
 8006d4c:	b183      	cbz	r3, 8006d70 <_Balloc+0x42>
 8006d4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006d56:	b9b8      	cbnz	r0, 8006d88 <_Balloc+0x5a>
 8006d58:	2101      	movs	r1, #1
 8006d5a:	fa01 f506 	lsl.w	r5, r1, r6
 8006d5e:	1d6a      	adds	r2, r5, #5
 8006d60:	0092      	lsls	r2, r2, #2
 8006d62:	4620      	mov	r0, r4
 8006d64:	f000 fab3 	bl	80072ce <_calloc_r>
 8006d68:	b160      	cbz	r0, 8006d84 <_Balloc+0x56>
 8006d6a:	6046      	str	r6, [r0, #4]
 8006d6c:	6085      	str	r5, [r0, #8]
 8006d6e:	e00e      	b.n	8006d8e <_Balloc+0x60>
 8006d70:	2221      	movs	r2, #33	; 0x21
 8006d72:	2104      	movs	r1, #4
 8006d74:	4620      	mov	r0, r4
 8006d76:	f000 faaa 	bl	80072ce <_calloc_r>
 8006d7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d7c:	60e8      	str	r0, [r5, #12]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1e4      	bne.n	8006d4e <_Balloc+0x20>
 8006d84:	2000      	movs	r0, #0
 8006d86:	bd70      	pop	{r4, r5, r6, pc}
 8006d88:	6802      	ldr	r2, [r0, #0]
 8006d8a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006d8e:	2300      	movs	r3, #0
 8006d90:	6103      	str	r3, [r0, #16]
 8006d92:	60c3      	str	r3, [r0, #12]
 8006d94:	bd70      	pop	{r4, r5, r6, pc}

08006d96 <_Bfree>:
 8006d96:	b570      	push	{r4, r5, r6, lr}
 8006d98:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006d9a:	4606      	mov	r6, r0
 8006d9c:	460d      	mov	r5, r1
 8006d9e:	b93c      	cbnz	r4, 8006db0 <_Bfree+0x1a>
 8006da0:	2010      	movs	r0, #16
 8006da2:	f7ff ffa3 	bl	8006cec <malloc>
 8006da6:	6270      	str	r0, [r6, #36]	; 0x24
 8006da8:	6044      	str	r4, [r0, #4]
 8006daa:	6084      	str	r4, [r0, #8]
 8006dac:	6004      	str	r4, [r0, #0]
 8006dae:	60c4      	str	r4, [r0, #12]
 8006db0:	b13d      	cbz	r5, 8006dc2 <_Bfree+0x2c>
 8006db2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006db4:	686a      	ldr	r2, [r5, #4]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006dbc:	6029      	str	r1, [r5, #0]
 8006dbe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006dc2:	bd70      	pop	{r4, r5, r6, pc}

08006dc4 <__multadd>:
 8006dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dc8:	461f      	mov	r7, r3
 8006dca:	4606      	mov	r6, r0
 8006dcc:	460c      	mov	r4, r1
 8006dce:	2300      	movs	r3, #0
 8006dd0:	690d      	ldr	r5, [r1, #16]
 8006dd2:	f101 0e14 	add.w	lr, r1, #20
 8006dd6:	f8de 0000 	ldr.w	r0, [lr]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	b281      	uxth	r1, r0
 8006dde:	fb02 7101 	mla	r1, r2, r1, r7
 8006de2:	0c00      	lsrs	r0, r0, #16
 8006de4:	0c0f      	lsrs	r7, r1, #16
 8006de6:	fb02 7000 	mla	r0, r2, r0, r7
 8006dea:	b289      	uxth	r1, r1
 8006dec:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006df0:	429d      	cmp	r5, r3
 8006df2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006df6:	f84e 1b04 	str.w	r1, [lr], #4
 8006dfa:	dcec      	bgt.n	8006dd6 <__multadd+0x12>
 8006dfc:	b1d7      	cbz	r7, 8006e34 <__multadd+0x70>
 8006dfe:	68a3      	ldr	r3, [r4, #8]
 8006e00:	429d      	cmp	r5, r3
 8006e02:	db12      	blt.n	8006e2a <__multadd+0x66>
 8006e04:	6861      	ldr	r1, [r4, #4]
 8006e06:	4630      	mov	r0, r6
 8006e08:	3101      	adds	r1, #1
 8006e0a:	f7ff ff90 	bl	8006d2e <_Balloc>
 8006e0e:	4680      	mov	r8, r0
 8006e10:	6922      	ldr	r2, [r4, #16]
 8006e12:	f104 010c 	add.w	r1, r4, #12
 8006e16:	3202      	adds	r2, #2
 8006e18:	0092      	lsls	r2, r2, #2
 8006e1a:	300c      	adds	r0, #12
 8006e1c:	f7ff ff7c 	bl	8006d18 <memcpy>
 8006e20:	4621      	mov	r1, r4
 8006e22:	4630      	mov	r0, r6
 8006e24:	f7ff ffb7 	bl	8006d96 <_Bfree>
 8006e28:	4644      	mov	r4, r8
 8006e2a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e2e:	3501      	adds	r5, #1
 8006e30:	615f      	str	r7, [r3, #20]
 8006e32:	6125      	str	r5, [r4, #16]
 8006e34:	4620      	mov	r0, r4
 8006e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006e3a <__hi0bits>:
 8006e3a:	0c02      	lsrs	r2, r0, #16
 8006e3c:	0412      	lsls	r2, r2, #16
 8006e3e:	4603      	mov	r3, r0
 8006e40:	b9b2      	cbnz	r2, 8006e70 <__hi0bits+0x36>
 8006e42:	0403      	lsls	r3, r0, #16
 8006e44:	2010      	movs	r0, #16
 8006e46:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006e4a:	bf04      	itt	eq
 8006e4c:	021b      	lsleq	r3, r3, #8
 8006e4e:	3008      	addeq	r0, #8
 8006e50:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006e54:	bf04      	itt	eq
 8006e56:	011b      	lsleq	r3, r3, #4
 8006e58:	3004      	addeq	r0, #4
 8006e5a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006e5e:	bf04      	itt	eq
 8006e60:	009b      	lsleq	r3, r3, #2
 8006e62:	3002      	addeq	r0, #2
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	db06      	blt.n	8006e76 <__hi0bits+0x3c>
 8006e68:	005b      	lsls	r3, r3, #1
 8006e6a:	d503      	bpl.n	8006e74 <__hi0bits+0x3a>
 8006e6c:	3001      	adds	r0, #1
 8006e6e:	4770      	bx	lr
 8006e70:	2000      	movs	r0, #0
 8006e72:	e7e8      	b.n	8006e46 <__hi0bits+0xc>
 8006e74:	2020      	movs	r0, #32
 8006e76:	4770      	bx	lr

08006e78 <__lo0bits>:
 8006e78:	6803      	ldr	r3, [r0, #0]
 8006e7a:	4601      	mov	r1, r0
 8006e7c:	f013 0207 	ands.w	r2, r3, #7
 8006e80:	d00b      	beq.n	8006e9a <__lo0bits+0x22>
 8006e82:	07da      	lsls	r2, r3, #31
 8006e84:	d423      	bmi.n	8006ece <__lo0bits+0x56>
 8006e86:	0798      	lsls	r0, r3, #30
 8006e88:	bf49      	itett	mi
 8006e8a:	085b      	lsrmi	r3, r3, #1
 8006e8c:	089b      	lsrpl	r3, r3, #2
 8006e8e:	2001      	movmi	r0, #1
 8006e90:	600b      	strmi	r3, [r1, #0]
 8006e92:	bf5c      	itt	pl
 8006e94:	600b      	strpl	r3, [r1, #0]
 8006e96:	2002      	movpl	r0, #2
 8006e98:	4770      	bx	lr
 8006e9a:	b298      	uxth	r0, r3
 8006e9c:	b9a8      	cbnz	r0, 8006eca <__lo0bits+0x52>
 8006e9e:	2010      	movs	r0, #16
 8006ea0:	0c1b      	lsrs	r3, r3, #16
 8006ea2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006ea6:	bf04      	itt	eq
 8006ea8:	0a1b      	lsreq	r3, r3, #8
 8006eaa:	3008      	addeq	r0, #8
 8006eac:	071a      	lsls	r2, r3, #28
 8006eae:	bf04      	itt	eq
 8006eb0:	091b      	lsreq	r3, r3, #4
 8006eb2:	3004      	addeq	r0, #4
 8006eb4:	079a      	lsls	r2, r3, #30
 8006eb6:	bf04      	itt	eq
 8006eb8:	089b      	lsreq	r3, r3, #2
 8006eba:	3002      	addeq	r0, #2
 8006ebc:	07da      	lsls	r2, r3, #31
 8006ebe:	d402      	bmi.n	8006ec6 <__lo0bits+0x4e>
 8006ec0:	085b      	lsrs	r3, r3, #1
 8006ec2:	d006      	beq.n	8006ed2 <__lo0bits+0x5a>
 8006ec4:	3001      	adds	r0, #1
 8006ec6:	600b      	str	r3, [r1, #0]
 8006ec8:	4770      	bx	lr
 8006eca:	4610      	mov	r0, r2
 8006ecc:	e7e9      	b.n	8006ea2 <__lo0bits+0x2a>
 8006ece:	2000      	movs	r0, #0
 8006ed0:	4770      	bx	lr
 8006ed2:	2020      	movs	r0, #32
 8006ed4:	4770      	bx	lr

08006ed6 <__i2b>:
 8006ed6:	b510      	push	{r4, lr}
 8006ed8:	460c      	mov	r4, r1
 8006eda:	2101      	movs	r1, #1
 8006edc:	f7ff ff27 	bl	8006d2e <_Balloc>
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	6144      	str	r4, [r0, #20]
 8006ee4:	6102      	str	r2, [r0, #16]
 8006ee6:	bd10      	pop	{r4, pc}

08006ee8 <__multiply>:
 8006ee8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eec:	4614      	mov	r4, r2
 8006eee:	690a      	ldr	r2, [r1, #16]
 8006ef0:	6923      	ldr	r3, [r4, #16]
 8006ef2:	4689      	mov	r9, r1
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	bfbe      	ittt	lt
 8006ef8:	460b      	movlt	r3, r1
 8006efa:	46a1      	movlt	r9, r4
 8006efc:	461c      	movlt	r4, r3
 8006efe:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006f02:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006f06:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006f0a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006f0e:	eb07 060a 	add.w	r6, r7, sl
 8006f12:	429e      	cmp	r6, r3
 8006f14:	bfc8      	it	gt
 8006f16:	3101      	addgt	r1, #1
 8006f18:	f7ff ff09 	bl	8006d2e <_Balloc>
 8006f1c:	f100 0514 	add.w	r5, r0, #20
 8006f20:	462b      	mov	r3, r5
 8006f22:	2200      	movs	r2, #0
 8006f24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006f28:	4543      	cmp	r3, r8
 8006f2a:	d316      	bcc.n	8006f5a <__multiply+0x72>
 8006f2c:	f104 0214 	add.w	r2, r4, #20
 8006f30:	f109 0114 	add.w	r1, r9, #20
 8006f34:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8006f38:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006f3c:	9301      	str	r3, [sp, #4]
 8006f3e:	9c01      	ldr	r4, [sp, #4]
 8006f40:	4613      	mov	r3, r2
 8006f42:	4294      	cmp	r4, r2
 8006f44:	d80c      	bhi.n	8006f60 <__multiply+0x78>
 8006f46:	2e00      	cmp	r6, #0
 8006f48:	dd03      	ble.n	8006f52 <__multiply+0x6a>
 8006f4a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d054      	beq.n	8006ffc <__multiply+0x114>
 8006f52:	6106      	str	r6, [r0, #16]
 8006f54:	b003      	add	sp, #12
 8006f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f5a:	f843 2b04 	str.w	r2, [r3], #4
 8006f5e:	e7e3      	b.n	8006f28 <__multiply+0x40>
 8006f60:	f8b3 a000 	ldrh.w	sl, [r3]
 8006f64:	3204      	adds	r2, #4
 8006f66:	f1ba 0f00 	cmp.w	sl, #0
 8006f6a:	d020      	beq.n	8006fae <__multiply+0xc6>
 8006f6c:	46ae      	mov	lr, r5
 8006f6e:	4689      	mov	r9, r1
 8006f70:	f04f 0c00 	mov.w	ip, #0
 8006f74:	f859 4b04 	ldr.w	r4, [r9], #4
 8006f78:	f8be b000 	ldrh.w	fp, [lr]
 8006f7c:	b2a3      	uxth	r3, r4
 8006f7e:	fb0a b303 	mla	r3, sl, r3, fp
 8006f82:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8006f86:	f8de 4000 	ldr.w	r4, [lr]
 8006f8a:	4463      	add	r3, ip
 8006f8c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006f90:	fb0a c40b 	mla	r4, sl, fp, ip
 8006f94:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006f9e:	454f      	cmp	r7, r9
 8006fa0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006fa4:	f84e 3b04 	str.w	r3, [lr], #4
 8006fa8:	d8e4      	bhi.n	8006f74 <__multiply+0x8c>
 8006faa:	f8ce c000 	str.w	ip, [lr]
 8006fae:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8006fb2:	f1b9 0f00 	cmp.w	r9, #0
 8006fb6:	d01f      	beq.n	8006ff8 <__multiply+0x110>
 8006fb8:	46ae      	mov	lr, r5
 8006fba:	468c      	mov	ip, r1
 8006fbc:	f04f 0a00 	mov.w	sl, #0
 8006fc0:	682b      	ldr	r3, [r5, #0]
 8006fc2:	f8bc 4000 	ldrh.w	r4, [ip]
 8006fc6:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	fb09 b404 	mla	r4, r9, r4, fp
 8006fd0:	44a2      	add	sl, r4
 8006fd2:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8006fd6:	f84e 3b04 	str.w	r3, [lr], #4
 8006fda:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006fde:	f8be 4000 	ldrh.w	r4, [lr]
 8006fe2:	0c1b      	lsrs	r3, r3, #16
 8006fe4:	fb09 4303 	mla	r3, r9, r3, r4
 8006fe8:	4567      	cmp	r7, ip
 8006fea:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8006fee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ff2:	d8e6      	bhi.n	8006fc2 <__multiply+0xda>
 8006ff4:	f8ce 3000 	str.w	r3, [lr]
 8006ff8:	3504      	adds	r5, #4
 8006ffa:	e7a0      	b.n	8006f3e <__multiply+0x56>
 8006ffc:	3e01      	subs	r6, #1
 8006ffe:	e7a2      	b.n	8006f46 <__multiply+0x5e>

08007000 <__pow5mult>:
 8007000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007004:	4615      	mov	r5, r2
 8007006:	f012 0203 	ands.w	r2, r2, #3
 800700a:	4606      	mov	r6, r0
 800700c:	460f      	mov	r7, r1
 800700e:	d007      	beq.n	8007020 <__pow5mult+0x20>
 8007010:	4c21      	ldr	r4, [pc, #132]	; (8007098 <__pow5mult+0x98>)
 8007012:	3a01      	subs	r2, #1
 8007014:	2300      	movs	r3, #0
 8007016:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800701a:	f7ff fed3 	bl	8006dc4 <__multadd>
 800701e:	4607      	mov	r7, r0
 8007020:	10ad      	asrs	r5, r5, #2
 8007022:	d035      	beq.n	8007090 <__pow5mult+0x90>
 8007024:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007026:	b93c      	cbnz	r4, 8007038 <__pow5mult+0x38>
 8007028:	2010      	movs	r0, #16
 800702a:	f7ff fe5f 	bl	8006cec <malloc>
 800702e:	6270      	str	r0, [r6, #36]	; 0x24
 8007030:	6044      	str	r4, [r0, #4]
 8007032:	6084      	str	r4, [r0, #8]
 8007034:	6004      	str	r4, [r0, #0]
 8007036:	60c4      	str	r4, [r0, #12]
 8007038:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800703c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007040:	b94c      	cbnz	r4, 8007056 <__pow5mult+0x56>
 8007042:	f240 2171 	movw	r1, #625	; 0x271
 8007046:	4630      	mov	r0, r6
 8007048:	f7ff ff45 	bl	8006ed6 <__i2b>
 800704c:	2300      	movs	r3, #0
 800704e:	4604      	mov	r4, r0
 8007050:	f8c8 0008 	str.w	r0, [r8, #8]
 8007054:	6003      	str	r3, [r0, #0]
 8007056:	f04f 0800 	mov.w	r8, #0
 800705a:	07eb      	lsls	r3, r5, #31
 800705c:	d50a      	bpl.n	8007074 <__pow5mult+0x74>
 800705e:	4639      	mov	r1, r7
 8007060:	4622      	mov	r2, r4
 8007062:	4630      	mov	r0, r6
 8007064:	f7ff ff40 	bl	8006ee8 <__multiply>
 8007068:	4681      	mov	r9, r0
 800706a:	4639      	mov	r1, r7
 800706c:	4630      	mov	r0, r6
 800706e:	f7ff fe92 	bl	8006d96 <_Bfree>
 8007072:	464f      	mov	r7, r9
 8007074:	106d      	asrs	r5, r5, #1
 8007076:	d00b      	beq.n	8007090 <__pow5mult+0x90>
 8007078:	6820      	ldr	r0, [r4, #0]
 800707a:	b938      	cbnz	r0, 800708c <__pow5mult+0x8c>
 800707c:	4622      	mov	r2, r4
 800707e:	4621      	mov	r1, r4
 8007080:	4630      	mov	r0, r6
 8007082:	f7ff ff31 	bl	8006ee8 <__multiply>
 8007086:	6020      	str	r0, [r4, #0]
 8007088:	f8c0 8000 	str.w	r8, [r0]
 800708c:	4604      	mov	r4, r0
 800708e:	e7e4      	b.n	800705a <__pow5mult+0x5a>
 8007090:	4638      	mov	r0, r7
 8007092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007096:	bf00      	nop
 8007098:	08007c68 	.word	0x08007c68

0800709c <__lshift>:
 800709c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070a0:	460c      	mov	r4, r1
 80070a2:	4607      	mov	r7, r0
 80070a4:	4616      	mov	r6, r2
 80070a6:	6923      	ldr	r3, [r4, #16]
 80070a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80070ac:	eb0a 0903 	add.w	r9, sl, r3
 80070b0:	6849      	ldr	r1, [r1, #4]
 80070b2:	68a3      	ldr	r3, [r4, #8]
 80070b4:	f109 0501 	add.w	r5, r9, #1
 80070b8:	42ab      	cmp	r3, r5
 80070ba:	db31      	blt.n	8007120 <__lshift+0x84>
 80070bc:	4638      	mov	r0, r7
 80070be:	f7ff fe36 	bl	8006d2e <_Balloc>
 80070c2:	2200      	movs	r2, #0
 80070c4:	4680      	mov	r8, r0
 80070c6:	4611      	mov	r1, r2
 80070c8:	f100 0314 	add.w	r3, r0, #20
 80070cc:	4552      	cmp	r2, sl
 80070ce:	db2a      	blt.n	8007126 <__lshift+0x8a>
 80070d0:	6920      	ldr	r0, [r4, #16]
 80070d2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80070d6:	f104 0114 	add.w	r1, r4, #20
 80070da:	f016 021f 	ands.w	r2, r6, #31
 80070de:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80070e2:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80070e6:	d022      	beq.n	800712e <__lshift+0x92>
 80070e8:	2000      	movs	r0, #0
 80070ea:	f1c2 0c20 	rsb	ip, r2, #32
 80070ee:	680e      	ldr	r6, [r1, #0]
 80070f0:	4096      	lsls	r6, r2
 80070f2:	4330      	orrs	r0, r6
 80070f4:	f843 0b04 	str.w	r0, [r3], #4
 80070f8:	f851 0b04 	ldr.w	r0, [r1], #4
 80070fc:	458e      	cmp	lr, r1
 80070fe:	fa20 f00c 	lsr.w	r0, r0, ip
 8007102:	d8f4      	bhi.n	80070ee <__lshift+0x52>
 8007104:	6018      	str	r0, [r3, #0]
 8007106:	b108      	cbz	r0, 800710c <__lshift+0x70>
 8007108:	f109 0502 	add.w	r5, r9, #2
 800710c:	3d01      	subs	r5, #1
 800710e:	4638      	mov	r0, r7
 8007110:	f8c8 5010 	str.w	r5, [r8, #16]
 8007114:	4621      	mov	r1, r4
 8007116:	f7ff fe3e 	bl	8006d96 <_Bfree>
 800711a:	4640      	mov	r0, r8
 800711c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007120:	3101      	adds	r1, #1
 8007122:	005b      	lsls	r3, r3, #1
 8007124:	e7c8      	b.n	80070b8 <__lshift+0x1c>
 8007126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800712a:	3201      	adds	r2, #1
 800712c:	e7ce      	b.n	80070cc <__lshift+0x30>
 800712e:	3b04      	subs	r3, #4
 8007130:	f851 2b04 	ldr.w	r2, [r1], #4
 8007134:	458e      	cmp	lr, r1
 8007136:	f843 2f04 	str.w	r2, [r3, #4]!
 800713a:	d8f9      	bhi.n	8007130 <__lshift+0x94>
 800713c:	e7e6      	b.n	800710c <__lshift+0x70>

0800713e <__mcmp>:
 800713e:	6903      	ldr	r3, [r0, #16]
 8007140:	690a      	ldr	r2, [r1, #16]
 8007142:	b530      	push	{r4, r5, lr}
 8007144:	1a9b      	subs	r3, r3, r2
 8007146:	d10c      	bne.n	8007162 <__mcmp+0x24>
 8007148:	0092      	lsls	r2, r2, #2
 800714a:	3014      	adds	r0, #20
 800714c:	3114      	adds	r1, #20
 800714e:	1884      	adds	r4, r0, r2
 8007150:	4411      	add	r1, r2
 8007152:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007156:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800715a:	4295      	cmp	r5, r2
 800715c:	d003      	beq.n	8007166 <__mcmp+0x28>
 800715e:	d305      	bcc.n	800716c <__mcmp+0x2e>
 8007160:	2301      	movs	r3, #1
 8007162:	4618      	mov	r0, r3
 8007164:	bd30      	pop	{r4, r5, pc}
 8007166:	42a0      	cmp	r0, r4
 8007168:	d3f3      	bcc.n	8007152 <__mcmp+0x14>
 800716a:	e7fa      	b.n	8007162 <__mcmp+0x24>
 800716c:	f04f 33ff 	mov.w	r3, #4294967295
 8007170:	e7f7      	b.n	8007162 <__mcmp+0x24>

08007172 <__mdiff>:
 8007172:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007176:	460d      	mov	r5, r1
 8007178:	4607      	mov	r7, r0
 800717a:	4611      	mov	r1, r2
 800717c:	4628      	mov	r0, r5
 800717e:	4614      	mov	r4, r2
 8007180:	f7ff ffdd 	bl	800713e <__mcmp>
 8007184:	1e06      	subs	r6, r0, #0
 8007186:	d108      	bne.n	800719a <__mdiff+0x28>
 8007188:	4631      	mov	r1, r6
 800718a:	4638      	mov	r0, r7
 800718c:	f7ff fdcf 	bl	8006d2e <_Balloc>
 8007190:	2301      	movs	r3, #1
 8007192:	6146      	str	r6, [r0, #20]
 8007194:	6103      	str	r3, [r0, #16]
 8007196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800719a:	bfa4      	itt	ge
 800719c:	4623      	movge	r3, r4
 800719e:	462c      	movge	r4, r5
 80071a0:	4638      	mov	r0, r7
 80071a2:	6861      	ldr	r1, [r4, #4]
 80071a4:	bfa6      	itte	ge
 80071a6:	461d      	movge	r5, r3
 80071a8:	2600      	movge	r6, #0
 80071aa:	2601      	movlt	r6, #1
 80071ac:	f7ff fdbf 	bl	8006d2e <_Balloc>
 80071b0:	f04f 0c00 	mov.w	ip, #0
 80071b4:	60c6      	str	r6, [r0, #12]
 80071b6:	692b      	ldr	r3, [r5, #16]
 80071b8:	6926      	ldr	r6, [r4, #16]
 80071ba:	f104 0214 	add.w	r2, r4, #20
 80071be:	f105 0914 	add.w	r9, r5, #20
 80071c2:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80071c6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80071ca:	f100 0114 	add.w	r1, r0, #20
 80071ce:	f852 ab04 	ldr.w	sl, [r2], #4
 80071d2:	f859 5b04 	ldr.w	r5, [r9], #4
 80071d6:	fa1f f38a 	uxth.w	r3, sl
 80071da:	4463      	add	r3, ip
 80071dc:	b2ac      	uxth	r4, r5
 80071de:	1b1b      	subs	r3, r3, r4
 80071e0:	0c2c      	lsrs	r4, r5, #16
 80071e2:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80071e6:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80071f0:	45c8      	cmp	r8, r9
 80071f2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80071f6:	4696      	mov	lr, r2
 80071f8:	f841 4b04 	str.w	r4, [r1], #4
 80071fc:	d8e7      	bhi.n	80071ce <__mdiff+0x5c>
 80071fe:	45be      	cmp	lr, r7
 8007200:	d305      	bcc.n	800720e <__mdiff+0x9c>
 8007202:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007206:	b18b      	cbz	r3, 800722c <__mdiff+0xba>
 8007208:	6106      	str	r6, [r0, #16]
 800720a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800720e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007212:	b2a2      	uxth	r2, r4
 8007214:	4462      	add	r2, ip
 8007216:	1413      	asrs	r3, r2, #16
 8007218:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800721c:	b292      	uxth	r2, r2
 800721e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007222:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007226:	f841 2b04 	str.w	r2, [r1], #4
 800722a:	e7e8      	b.n	80071fe <__mdiff+0x8c>
 800722c:	3e01      	subs	r6, #1
 800722e:	e7e8      	b.n	8007202 <__mdiff+0x90>

08007230 <__d2b>:
 8007230:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007234:	461c      	mov	r4, r3
 8007236:	2101      	movs	r1, #1
 8007238:	4690      	mov	r8, r2
 800723a:	9e08      	ldr	r6, [sp, #32]
 800723c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800723e:	f7ff fd76 	bl	8006d2e <_Balloc>
 8007242:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007246:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800724a:	4607      	mov	r7, r0
 800724c:	bb34      	cbnz	r4, 800729c <__d2b+0x6c>
 800724e:	9201      	str	r2, [sp, #4]
 8007250:	f1b8 0f00 	cmp.w	r8, #0
 8007254:	d027      	beq.n	80072a6 <__d2b+0x76>
 8007256:	a802      	add	r0, sp, #8
 8007258:	f840 8d08 	str.w	r8, [r0, #-8]!
 800725c:	f7ff fe0c 	bl	8006e78 <__lo0bits>
 8007260:	9900      	ldr	r1, [sp, #0]
 8007262:	b1f0      	cbz	r0, 80072a2 <__d2b+0x72>
 8007264:	9a01      	ldr	r2, [sp, #4]
 8007266:	f1c0 0320 	rsb	r3, r0, #32
 800726a:	fa02 f303 	lsl.w	r3, r2, r3
 800726e:	430b      	orrs	r3, r1
 8007270:	40c2      	lsrs	r2, r0
 8007272:	617b      	str	r3, [r7, #20]
 8007274:	9201      	str	r2, [sp, #4]
 8007276:	9b01      	ldr	r3, [sp, #4]
 8007278:	2b00      	cmp	r3, #0
 800727a:	bf14      	ite	ne
 800727c:	2102      	movne	r1, #2
 800727e:	2101      	moveq	r1, #1
 8007280:	61bb      	str	r3, [r7, #24]
 8007282:	6139      	str	r1, [r7, #16]
 8007284:	b1c4      	cbz	r4, 80072b8 <__d2b+0x88>
 8007286:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800728a:	4404      	add	r4, r0
 800728c:	6034      	str	r4, [r6, #0]
 800728e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007292:	6028      	str	r0, [r5, #0]
 8007294:	4638      	mov	r0, r7
 8007296:	b002      	add	sp, #8
 8007298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800729c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80072a0:	e7d5      	b.n	800724e <__d2b+0x1e>
 80072a2:	6179      	str	r1, [r7, #20]
 80072a4:	e7e7      	b.n	8007276 <__d2b+0x46>
 80072a6:	a801      	add	r0, sp, #4
 80072a8:	f7ff fde6 	bl	8006e78 <__lo0bits>
 80072ac:	2101      	movs	r1, #1
 80072ae:	9b01      	ldr	r3, [sp, #4]
 80072b0:	6139      	str	r1, [r7, #16]
 80072b2:	617b      	str	r3, [r7, #20]
 80072b4:	3020      	adds	r0, #32
 80072b6:	e7e5      	b.n	8007284 <__d2b+0x54>
 80072b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80072bc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80072c0:	6030      	str	r0, [r6, #0]
 80072c2:	6918      	ldr	r0, [r3, #16]
 80072c4:	f7ff fdb9 	bl	8006e3a <__hi0bits>
 80072c8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80072cc:	e7e1      	b.n	8007292 <__d2b+0x62>

080072ce <_calloc_r>:
 80072ce:	b538      	push	{r3, r4, r5, lr}
 80072d0:	fb02 f401 	mul.w	r4, r2, r1
 80072d4:	4621      	mov	r1, r4
 80072d6:	f000 f855 	bl	8007384 <_malloc_r>
 80072da:	4605      	mov	r5, r0
 80072dc:	b118      	cbz	r0, 80072e6 <_calloc_r+0x18>
 80072de:	4622      	mov	r2, r4
 80072e0:	2100      	movs	r1, #0
 80072e2:	f7fd feff 	bl	80050e4 <memset>
 80072e6:	4628      	mov	r0, r5
 80072e8:	bd38      	pop	{r3, r4, r5, pc}
	...

080072ec <_free_r>:
 80072ec:	b538      	push	{r3, r4, r5, lr}
 80072ee:	4605      	mov	r5, r0
 80072f0:	2900      	cmp	r1, #0
 80072f2:	d043      	beq.n	800737c <_free_r+0x90>
 80072f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072f8:	1f0c      	subs	r4, r1, #4
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	bfb8      	it	lt
 80072fe:	18e4      	addlt	r4, r4, r3
 8007300:	f000 fa86 	bl	8007810 <__malloc_lock>
 8007304:	4a1e      	ldr	r2, [pc, #120]	; (8007380 <_free_r+0x94>)
 8007306:	6813      	ldr	r3, [r2, #0]
 8007308:	4610      	mov	r0, r2
 800730a:	b933      	cbnz	r3, 800731a <_free_r+0x2e>
 800730c:	6063      	str	r3, [r4, #4]
 800730e:	6014      	str	r4, [r2, #0]
 8007310:	4628      	mov	r0, r5
 8007312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007316:	f000 ba7c 	b.w	8007812 <__malloc_unlock>
 800731a:	42a3      	cmp	r3, r4
 800731c:	d90b      	bls.n	8007336 <_free_r+0x4a>
 800731e:	6821      	ldr	r1, [r4, #0]
 8007320:	1862      	adds	r2, r4, r1
 8007322:	4293      	cmp	r3, r2
 8007324:	bf01      	itttt	eq
 8007326:	681a      	ldreq	r2, [r3, #0]
 8007328:	685b      	ldreq	r3, [r3, #4]
 800732a:	1852      	addeq	r2, r2, r1
 800732c:	6022      	streq	r2, [r4, #0]
 800732e:	6063      	str	r3, [r4, #4]
 8007330:	6004      	str	r4, [r0, #0]
 8007332:	e7ed      	b.n	8007310 <_free_r+0x24>
 8007334:	4613      	mov	r3, r2
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	b10a      	cbz	r2, 800733e <_free_r+0x52>
 800733a:	42a2      	cmp	r2, r4
 800733c:	d9fa      	bls.n	8007334 <_free_r+0x48>
 800733e:	6819      	ldr	r1, [r3, #0]
 8007340:	1858      	adds	r0, r3, r1
 8007342:	42a0      	cmp	r0, r4
 8007344:	d10b      	bne.n	800735e <_free_r+0x72>
 8007346:	6820      	ldr	r0, [r4, #0]
 8007348:	4401      	add	r1, r0
 800734a:	1858      	adds	r0, r3, r1
 800734c:	4282      	cmp	r2, r0
 800734e:	6019      	str	r1, [r3, #0]
 8007350:	d1de      	bne.n	8007310 <_free_r+0x24>
 8007352:	6810      	ldr	r0, [r2, #0]
 8007354:	6852      	ldr	r2, [r2, #4]
 8007356:	4401      	add	r1, r0
 8007358:	6019      	str	r1, [r3, #0]
 800735a:	605a      	str	r2, [r3, #4]
 800735c:	e7d8      	b.n	8007310 <_free_r+0x24>
 800735e:	d902      	bls.n	8007366 <_free_r+0x7a>
 8007360:	230c      	movs	r3, #12
 8007362:	602b      	str	r3, [r5, #0]
 8007364:	e7d4      	b.n	8007310 <_free_r+0x24>
 8007366:	6820      	ldr	r0, [r4, #0]
 8007368:	1821      	adds	r1, r4, r0
 800736a:	428a      	cmp	r2, r1
 800736c:	bf01      	itttt	eq
 800736e:	6811      	ldreq	r1, [r2, #0]
 8007370:	6852      	ldreq	r2, [r2, #4]
 8007372:	1809      	addeq	r1, r1, r0
 8007374:	6021      	streq	r1, [r4, #0]
 8007376:	6062      	str	r2, [r4, #4]
 8007378:	605c      	str	r4, [r3, #4]
 800737a:	e7c9      	b.n	8007310 <_free_r+0x24>
 800737c:	bd38      	pop	{r3, r4, r5, pc}
 800737e:	bf00      	nop
 8007380:	20000230 	.word	0x20000230

08007384 <_malloc_r>:
 8007384:	b570      	push	{r4, r5, r6, lr}
 8007386:	1ccd      	adds	r5, r1, #3
 8007388:	f025 0503 	bic.w	r5, r5, #3
 800738c:	3508      	adds	r5, #8
 800738e:	2d0c      	cmp	r5, #12
 8007390:	bf38      	it	cc
 8007392:	250c      	movcc	r5, #12
 8007394:	2d00      	cmp	r5, #0
 8007396:	4606      	mov	r6, r0
 8007398:	db01      	blt.n	800739e <_malloc_r+0x1a>
 800739a:	42a9      	cmp	r1, r5
 800739c:	d903      	bls.n	80073a6 <_malloc_r+0x22>
 800739e:	230c      	movs	r3, #12
 80073a0:	6033      	str	r3, [r6, #0]
 80073a2:	2000      	movs	r0, #0
 80073a4:	bd70      	pop	{r4, r5, r6, pc}
 80073a6:	f000 fa33 	bl	8007810 <__malloc_lock>
 80073aa:	4a23      	ldr	r2, [pc, #140]	; (8007438 <_malloc_r+0xb4>)
 80073ac:	6814      	ldr	r4, [r2, #0]
 80073ae:	4621      	mov	r1, r4
 80073b0:	b991      	cbnz	r1, 80073d8 <_malloc_r+0x54>
 80073b2:	4c22      	ldr	r4, [pc, #136]	; (800743c <_malloc_r+0xb8>)
 80073b4:	6823      	ldr	r3, [r4, #0]
 80073b6:	b91b      	cbnz	r3, 80073c0 <_malloc_r+0x3c>
 80073b8:	4630      	mov	r0, r6
 80073ba:	f000 f97f 	bl	80076bc <_sbrk_r>
 80073be:	6020      	str	r0, [r4, #0]
 80073c0:	4629      	mov	r1, r5
 80073c2:	4630      	mov	r0, r6
 80073c4:	f000 f97a 	bl	80076bc <_sbrk_r>
 80073c8:	1c43      	adds	r3, r0, #1
 80073ca:	d126      	bne.n	800741a <_malloc_r+0x96>
 80073cc:	230c      	movs	r3, #12
 80073ce:	4630      	mov	r0, r6
 80073d0:	6033      	str	r3, [r6, #0]
 80073d2:	f000 fa1e 	bl	8007812 <__malloc_unlock>
 80073d6:	e7e4      	b.n	80073a2 <_malloc_r+0x1e>
 80073d8:	680b      	ldr	r3, [r1, #0]
 80073da:	1b5b      	subs	r3, r3, r5
 80073dc:	d41a      	bmi.n	8007414 <_malloc_r+0x90>
 80073de:	2b0b      	cmp	r3, #11
 80073e0:	d90f      	bls.n	8007402 <_malloc_r+0x7e>
 80073e2:	600b      	str	r3, [r1, #0]
 80073e4:	18cc      	adds	r4, r1, r3
 80073e6:	50cd      	str	r5, [r1, r3]
 80073e8:	4630      	mov	r0, r6
 80073ea:	f000 fa12 	bl	8007812 <__malloc_unlock>
 80073ee:	f104 000b 	add.w	r0, r4, #11
 80073f2:	1d23      	adds	r3, r4, #4
 80073f4:	f020 0007 	bic.w	r0, r0, #7
 80073f8:	1ac3      	subs	r3, r0, r3
 80073fa:	d01b      	beq.n	8007434 <_malloc_r+0xb0>
 80073fc:	425a      	negs	r2, r3
 80073fe:	50e2      	str	r2, [r4, r3]
 8007400:	bd70      	pop	{r4, r5, r6, pc}
 8007402:	428c      	cmp	r4, r1
 8007404:	bf0b      	itete	eq
 8007406:	6863      	ldreq	r3, [r4, #4]
 8007408:	684b      	ldrne	r3, [r1, #4]
 800740a:	6013      	streq	r3, [r2, #0]
 800740c:	6063      	strne	r3, [r4, #4]
 800740e:	bf18      	it	ne
 8007410:	460c      	movne	r4, r1
 8007412:	e7e9      	b.n	80073e8 <_malloc_r+0x64>
 8007414:	460c      	mov	r4, r1
 8007416:	6849      	ldr	r1, [r1, #4]
 8007418:	e7ca      	b.n	80073b0 <_malloc_r+0x2c>
 800741a:	1cc4      	adds	r4, r0, #3
 800741c:	f024 0403 	bic.w	r4, r4, #3
 8007420:	42a0      	cmp	r0, r4
 8007422:	d005      	beq.n	8007430 <_malloc_r+0xac>
 8007424:	1a21      	subs	r1, r4, r0
 8007426:	4630      	mov	r0, r6
 8007428:	f000 f948 	bl	80076bc <_sbrk_r>
 800742c:	3001      	adds	r0, #1
 800742e:	d0cd      	beq.n	80073cc <_malloc_r+0x48>
 8007430:	6025      	str	r5, [r4, #0]
 8007432:	e7d9      	b.n	80073e8 <_malloc_r+0x64>
 8007434:	bd70      	pop	{r4, r5, r6, pc}
 8007436:	bf00      	nop
 8007438:	20000230 	.word	0x20000230
 800743c:	20000234 	.word	0x20000234

08007440 <__sfputc_r>:
 8007440:	6893      	ldr	r3, [r2, #8]
 8007442:	b410      	push	{r4}
 8007444:	3b01      	subs	r3, #1
 8007446:	2b00      	cmp	r3, #0
 8007448:	6093      	str	r3, [r2, #8]
 800744a:	da08      	bge.n	800745e <__sfputc_r+0x1e>
 800744c:	6994      	ldr	r4, [r2, #24]
 800744e:	42a3      	cmp	r3, r4
 8007450:	db02      	blt.n	8007458 <__sfputc_r+0x18>
 8007452:	b2cb      	uxtb	r3, r1
 8007454:	2b0a      	cmp	r3, #10
 8007456:	d102      	bne.n	800745e <__sfputc_r+0x1e>
 8007458:	bc10      	pop	{r4}
 800745a:	f7fe bb29 	b.w	8005ab0 <__swbuf_r>
 800745e:	6813      	ldr	r3, [r2, #0]
 8007460:	1c58      	adds	r0, r3, #1
 8007462:	6010      	str	r0, [r2, #0]
 8007464:	7019      	strb	r1, [r3, #0]
 8007466:	b2c8      	uxtb	r0, r1
 8007468:	bc10      	pop	{r4}
 800746a:	4770      	bx	lr

0800746c <__sfputs_r>:
 800746c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746e:	4606      	mov	r6, r0
 8007470:	460f      	mov	r7, r1
 8007472:	4614      	mov	r4, r2
 8007474:	18d5      	adds	r5, r2, r3
 8007476:	42ac      	cmp	r4, r5
 8007478:	d101      	bne.n	800747e <__sfputs_r+0x12>
 800747a:	2000      	movs	r0, #0
 800747c:	e007      	b.n	800748e <__sfputs_r+0x22>
 800747e:	463a      	mov	r2, r7
 8007480:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007484:	4630      	mov	r0, r6
 8007486:	f7ff ffdb 	bl	8007440 <__sfputc_r>
 800748a:	1c43      	adds	r3, r0, #1
 800748c:	d1f3      	bne.n	8007476 <__sfputs_r+0xa>
 800748e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007490 <_vfiprintf_r>:
 8007490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007494:	b09d      	sub	sp, #116	; 0x74
 8007496:	460c      	mov	r4, r1
 8007498:	4617      	mov	r7, r2
 800749a:	9303      	str	r3, [sp, #12]
 800749c:	4606      	mov	r6, r0
 800749e:	b118      	cbz	r0, 80074a8 <_vfiprintf_r+0x18>
 80074a0:	6983      	ldr	r3, [r0, #24]
 80074a2:	b90b      	cbnz	r3, 80074a8 <_vfiprintf_r+0x18>
 80074a4:	f7ff fb26 	bl	8006af4 <__sinit>
 80074a8:	4b7c      	ldr	r3, [pc, #496]	; (800769c <_vfiprintf_r+0x20c>)
 80074aa:	429c      	cmp	r4, r3
 80074ac:	d157      	bne.n	800755e <_vfiprintf_r+0xce>
 80074ae:	6874      	ldr	r4, [r6, #4]
 80074b0:	89a3      	ldrh	r3, [r4, #12]
 80074b2:	0718      	lsls	r0, r3, #28
 80074b4:	d55d      	bpl.n	8007572 <_vfiprintf_r+0xe2>
 80074b6:	6923      	ldr	r3, [r4, #16]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d05a      	beq.n	8007572 <_vfiprintf_r+0xe2>
 80074bc:	2300      	movs	r3, #0
 80074be:	9309      	str	r3, [sp, #36]	; 0x24
 80074c0:	2320      	movs	r3, #32
 80074c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074c6:	2330      	movs	r3, #48	; 0x30
 80074c8:	f04f 0b01 	mov.w	fp, #1
 80074cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074d0:	46b8      	mov	r8, r7
 80074d2:	4645      	mov	r5, r8
 80074d4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d155      	bne.n	8007588 <_vfiprintf_r+0xf8>
 80074dc:	ebb8 0a07 	subs.w	sl, r8, r7
 80074e0:	d00b      	beq.n	80074fa <_vfiprintf_r+0x6a>
 80074e2:	4653      	mov	r3, sl
 80074e4:	463a      	mov	r2, r7
 80074e6:	4621      	mov	r1, r4
 80074e8:	4630      	mov	r0, r6
 80074ea:	f7ff ffbf 	bl	800746c <__sfputs_r>
 80074ee:	3001      	adds	r0, #1
 80074f0:	f000 80c4 	beq.w	800767c <_vfiprintf_r+0x1ec>
 80074f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074f6:	4453      	add	r3, sl
 80074f8:	9309      	str	r3, [sp, #36]	; 0x24
 80074fa:	f898 3000 	ldrb.w	r3, [r8]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	f000 80bc 	beq.w	800767c <_vfiprintf_r+0x1ec>
 8007504:	2300      	movs	r3, #0
 8007506:	f04f 32ff 	mov.w	r2, #4294967295
 800750a:	9304      	str	r3, [sp, #16]
 800750c:	9307      	str	r3, [sp, #28]
 800750e:	9205      	str	r2, [sp, #20]
 8007510:	9306      	str	r3, [sp, #24]
 8007512:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007516:	931a      	str	r3, [sp, #104]	; 0x68
 8007518:	2205      	movs	r2, #5
 800751a:	7829      	ldrb	r1, [r5, #0]
 800751c:	4860      	ldr	r0, [pc, #384]	; (80076a0 <_vfiprintf_r+0x210>)
 800751e:	f7ff fbed 	bl	8006cfc <memchr>
 8007522:	f105 0801 	add.w	r8, r5, #1
 8007526:	9b04      	ldr	r3, [sp, #16]
 8007528:	2800      	cmp	r0, #0
 800752a:	d131      	bne.n	8007590 <_vfiprintf_r+0x100>
 800752c:	06d9      	lsls	r1, r3, #27
 800752e:	bf44      	itt	mi
 8007530:	2220      	movmi	r2, #32
 8007532:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007536:	071a      	lsls	r2, r3, #28
 8007538:	bf44      	itt	mi
 800753a:	222b      	movmi	r2, #43	; 0x2b
 800753c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007540:	782a      	ldrb	r2, [r5, #0]
 8007542:	2a2a      	cmp	r2, #42	; 0x2a
 8007544:	d02c      	beq.n	80075a0 <_vfiprintf_r+0x110>
 8007546:	2100      	movs	r1, #0
 8007548:	200a      	movs	r0, #10
 800754a:	9a07      	ldr	r2, [sp, #28]
 800754c:	46a8      	mov	r8, r5
 800754e:	f898 3000 	ldrb.w	r3, [r8]
 8007552:	3501      	adds	r5, #1
 8007554:	3b30      	subs	r3, #48	; 0x30
 8007556:	2b09      	cmp	r3, #9
 8007558:	d96d      	bls.n	8007636 <_vfiprintf_r+0x1a6>
 800755a:	b371      	cbz	r1, 80075ba <_vfiprintf_r+0x12a>
 800755c:	e026      	b.n	80075ac <_vfiprintf_r+0x11c>
 800755e:	4b51      	ldr	r3, [pc, #324]	; (80076a4 <_vfiprintf_r+0x214>)
 8007560:	429c      	cmp	r4, r3
 8007562:	d101      	bne.n	8007568 <_vfiprintf_r+0xd8>
 8007564:	68b4      	ldr	r4, [r6, #8]
 8007566:	e7a3      	b.n	80074b0 <_vfiprintf_r+0x20>
 8007568:	4b4f      	ldr	r3, [pc, #316]	; (80076a8 <_vfiprintf_r+0x218>)
 800756a:	429c      	cmp	r4, r3
 800756c:	bf08      	it	eq
 800756e:	68f4      	ldreq	r4, [r6, #12]
 8007570:	e79e      	b.n	80074b0 <_vfiprintf_r+0x20>
 8007572:	4621      	mov	r1, r4
 8007574:	4630      	mov	r0, r6
 8007576:	f7fe fafb 	bl	8005b70 <__swsetup_r>
 800757a:	2800      	cmp	r0, #0
 800757c:	d09e      	beq.n	80074bc <_vfiprintf_r+0x2c>
 800757e:	f04f 30ff 	mov.w	r0, #4294967295
 8007582:	b01d      	add	sp, #116	; 0x74
 8007584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007588:	2b25      	cmp	r3, #37	; 0x25
 800758a:	d0a7      	beq.n	80074dc <_vfiprintf_r+0x4c>
 800758c:	46a8      	mov	r8, r5
 800758e:	e7a0      	b.n	80074d2 <_vfiprintf_r+0x42>
 8007590:	4a43      	ldr	r2, [pc, #268]	; (80076a0 <_vfiprintf_r+0x210>)
 8007592:	4645      	mov	r5, r8
 8007594:	1a80      	subs	r0, r0, r2
 8007596:	fa0b f000 	lsl.w	r0, fp, r0
 800759a:	4318      	orrs	r0, r3
 800759c:	9004      	str	r0, [sp, #16]
 800759e:	e7bb      	b.n	8007518 <_vfiprintf_r+0x88>
 80075a0:	9a03      	ldr	r2, [sp, #12]
 80075a2:	1d11      	adds	r1, r2, #4
 80075a4:	6812      	ldr	r2, [r2, #0]
 80075a6:	9103      	str	r1, [sp, #12]
 80075a8:	2a00      	cmp	r2, #0
 80075aa:	db01      	blt.n	80075b0 <_vfiprintf_r+0x120>
 80075ac:	9207      	str	r2, [sp, #28]
 80075ae:	e004      	b.n	80075ba <_vfiprintf_r+0x12a>
 80075b0:	4252      	negs	r2, r2
 80075b2:	f043 0302 	orr.w	r3, r3, #2
 80075b6:	9207      	str	r2, [sp, #28]
 80075b8:	9304      	str	r3, [sp, #16]
 80075ba:	f898 3000 	ldrb.w	r3, [r8]
 80075be:	2b2e      	cmp	r3, #46	; 0x2e
 80075c0:	d110      	bne.n	80075e4 <_vfiprintf_r+0x154>
 80075c2:	f898 3001 	ldrb.w	r3, [r8, #1]
 80075c6:	f108 0101 	add.w	r1, r8, #1
 80075ca:	2b2a      	cmp	r3, #42	; 0x2a
 80075cc:	d137      	bne.n	800763e <_vfiprintf_r+0x1ae>
 80075ce:	9b03      	ldr	r3, [sp, #12]
 80075d0:	f108 0802 	add.w	r8, r8, #2
 80075d4:	1d1a      	adds	r2, r3, #4
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	9203      	str	r2, [sp, #12]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	bfb8      	it	lt
 80075de:	f04f 33ff 	movlt.w	r3, #4294967295
 80075e2:	9305      	str	r3, [sp, #20]
 80075e4:	4d31      	ldr	r5, [pc, #196]	; (80076ac <_vfiprintf_r+0x21c>)
 80075e6:	2203      	movs	r2, #3
 80075e8:	f898 1000 	ldrb.w	r1, [r8]
 80075ec:	4628      	mov	r0, r5
 80075ee:	f7ff fb85 	bl	8006cfc <memchr>
 80075f2:	b140      	cbz	r0, 8007606 <_vfiprintf_r+0x176>
 80075f4:	2340      	movs	r3, #64	; 0x40
 80075f6:	1b40      	subs	r0, r0, r5
 80075f8:	fa03 f000 	lsl.w	r0, r3, r0
 80075fc:	9b04      	ldr	r3, [sp, #16]
 80075fe:	f108 0801 	add.w	r8, r8, #1
 8007602:	4303      	orrs	r3, r0
 8007604:	9304      	str	r3, [sp, #16]
 8007606:	f898 1000 	ldrb.w	r1, [r8]
 800760a:	2206      	movs	r2, #6
 800760c:	4828      	ldr	r0, [pc, #160]	; (80076b0 <_vfiprintf_r+0x220>)
 800760e:	f108 0701 	add.w	r7, r8, #1
 8007612:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007616:	f7ff fb71 	bl	8006cfc <memchr>
 800761a:	2800      	cmp	r0, #0
 800761c:	d034      	beq.n	8007688 <_vfiprintf_r+0x1f8>
 800761e:	4b25      	ldr	r3, [pc, #148]	; (80076b4 <_vfiprintf_r+0x224>)
 8007620:	bb03      	cbnz	r3, 8007664 <_vfiprintf_r+0x1d4>
 8007622:	9b03      	ldr	r3, [sp, #12]
 8007624:	3307      	adds	r3, #7
 8007626:	f023 0307 	bic.w	r3, r3, #7
 800762a:	3308      	adds	r3, #8
 800762c:	9303      	str	r3, [sp, #12]
 800762e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007630:	444b      	add	r3, r9
 8007632:	9309      	str	r3, [sp, #36]	; 0x24
 8007634:	e74c      	b.n	80074d0 <_vfiprintf_r+0x40>
 8007636:	fb00 3202 	mla	r2, r0, r2, r3
 800763a:	2101      	movs	r1, #1
 800763c:	e786      	b.n	800754c <_vfiprintf_r+0xbc>
 800763e:	2300      	movs	r3, #0
 8007640:	250a      	movs	r5, #10
 8007642:	4618      	mov	r0, r3
 8007644:	9305      	str	r3, [sp, #20]
 8007646:	4688      	mov	r8, r1
 8007648:	f898 2000 	ldrb.w	r2, [r8]
 800764c:	3101      	adds	r1, #1
 800764e:	3a30      	subs	r2, #48	; 0x30
 8007650:	2a09      	cmp	r2, #9
 8007652:	d903      	bls.n	800765c <_vfiprintf_r+0x1cc>
 8007654:	2b00      	cmp	r3, #0
 8007656:	d0c5      	beq.n	80075e4 <_vfiprintf_r+0x154>
 8007658:	9005      	str	r0, [sp, #20]
 800765a:	e7c3      	b.n	80075e4 <_vfiprintf_r+0x154>
 800765c:	fb05 2000 	mla	r0, r5, r0, r2
 8007660:	2301      	movs	r3, #1
 8007662:	e7f0      	b.n	8007646 <_vfiprintf_r+0x1b6>
 8007664:	ab03      	add	r3, sp, #12
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	4622      	mov	r2, r4
 800766a:	4b13      	ldr	r3, [pc, #76]	; (80076b8 <_vfiprintf_r+0x228>)
 800766c:	a904      	add	r1, sp, #16
 800766e:	4630      	mov	r0, r6
 8007670:	f7fd fdd2 	bl	8005218 <_printf_float>
 8007674:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007678:	4681      	mov	r9, r0
 800767a:	d1d8      	bne.n	800762e <_vfiprintf_r+0x19e>
 800767c:	89a3      	ldrh	r3, [r4, #12]
 800767e:	065b      	lsls	r3, r3, #25
 8007680:	f53f af7d 	bmi.w	800757e <_vfiprintf_r+0xee>
 8007684:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007686:	e77c      	b.n	8007582 <_vfiprintf_r+0xf2>
 8007688:	ab03      	add	r3, sp, #12
 800768a:	9300      	str	r3, [sp, #0]
 800768c:	4622      	mov	r2, r4
 800768e:	4b0a      	ldr	r3, [pc, #40]	; (80076b8 <_vfiprintf_r+0x228>)
 8007690:	a904      	add	r1, sp, #16
 8007692:	4630      	mov	r0, r6
 8007694:	f7fe f870 	bl	8005778 <_printf_i>
 8007698:	e7ec      	b.n	8007674 <_vfiprintf_r+0x1e4>
 800769a:	bf00      	nop
 800769c:	08007b38 	.word	0x08007b38
 80076a0:	08007c74 	.word	0x08007c74
 80076a4:	08007b58 	.word	0x08007b58
 80076a8:	08007b18 	.word	0x08007b18
 80076ac:	08007c7a 	.word	0x08007c7a
 80076b0:	08007c7e 	.word	0x08007c7e
 80076b4:	08005219 	.word	0x08005219
 80076b8:	0800746d 	.word	0x0800746d

080076bc <_sbrk_r>:
 80076bc:	b538      	push	{r3, r4, r5, lr}
 80076be:	2300      	movs	r3, #0
 80076c0:	4c05      	ldr	r4, [pc, #20]	; (80076d8 <_sbrk_r+0x1c>)
 80076c2:	4605      	mov	r5, r0
 80076c4:	4608      	mov	r0, r1
 80076c6:	6023      	str	r3, [r4, #0]
 80076c8:	f7fa fae0 	bl	8001c8c <_sbrk>
 80076cc:	1c43      	adds	r3, r0, #1
 80076ce:	d102      	bne.n	80076d6 <_sbrk_r+0x1a>
 80076d0:	6823      	ldr	r3, [r4, #0]
 80076d2:	b103      	cbz	r3, 80076d6 <_sbrk_r+0x1a>
 80076d4:	602b      	str	r3, [r5, #0]
 80076d6:	bd38      	pop	{r3, r4, r5, pc}
 80076d8:	20000634 	.word	0x20000634

080076dc <__sread>:
 80076dc:	b510      	push	{r4, lr}
 80076de:	460c      	mov	r4, r1
 80076e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076e4:	f000 f896 	bl	8007814 <_read_r>
 80076e8:	2800      	cmp	r0, #0
 80076ea:	bfab      	itete	ge
 80076ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80076ee:	89a3      	ldrhlt	r3, [r4, #12]
 80076f0:	181b      	addge	r3, r3, r0
 80076f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80076f6:	bfac      	ite	ge
 80076f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80076fa:	81a3      	strhlt	r3, [r4, #12]
 80076fc:	bd10      	pop	{r4, pc}

080076fe <__swrite>:
 80076fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007702:	461f      	mov	r7, r3
 8007704:	898b      	ldrh	r3, [r1, #12]
 8007706:	4605      	mov	r5, r0
 8007708:	05db      	lsls	r3, r3, #23
 800770a:	460c      	mov	r4, r1
 800770c:	4616      	mov	r6, r2
 800770e:	d505      	bpl.n	800771c <__swrite+0x1e>
 8007710:	2302      	movs	r3, #2
 8007712:	2200      	movs	r2, #0
 8007714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007718:	f000 f868 	bl	80077ec <_lseek_r>
 800771c:	89a3      	ldrh	r3, [r4, #12]
 800771e:	4632      	mov	r2, r6
 8007720:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007724:	81a3      	strh	r3, [r4, #12]
 8007726:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800772a:	463b      	mov	r3, r7
 800772c:	4628      	mov	r0, r5
 800772e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007732:	f000 b817 	b.w	8007764 <_write_r>

08007736 <__sseek>:
 8007736:	b510      	push	{r4, lr}
 8007738:	460c      	mov	r4, r1
 800773a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800773e:	f000 f855 	bl	80077ec <_lseek_r>
 8007742:	1c43      	adds	r3, r0, #1
 8007744:	89a3      	ldrh	r3, [r4, #12]
 8007746:	bf15      	itete	ne
 8007748:	6560      	strne	r0, [r4, #84]	; 0x54
 800774a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800774e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007752:	81a3      	strheq	r3, [r4, #12]
 8007754:	bf18      	it	ne
 8007756:	81a3      	strhne	r3, [r4, #12]
 8007758:	bd10      	pop	{r4, pc}

0800775a <__sclose>:
 800775a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800775e:	f000 b813 	b.w	8007788 <_close_r>
	...

08007764 <_write_r>:
 8007764:	b538      	push	{r3, r4, r5, lr}
 8007766:	4605      	mov	r5, r0
 8007768:	4608      	mov	r0, r1
 800776a:	4611      	mov	r1, r2
 800776c:	2200      	movs	r2, #0
 800776e:	4c05      	ldr	r4, [pc, #20]	; (8007784 <_write_r+0x20>)
 8007770:	6022      	str	r2, [r4, #0]
 8007772:	461a      	mov	r2, r3
 8007774:	f7f9 f984 	bl	8000a80 <_write>
 8007778:	1c43      	adds	r3, r0, #1
 800777a:	d102      	bne.n	8007782 <_write_r+0x1e>
 800777c:	6823      	ldr	r3, [r4, #0]
 800777e:	b103      	cbz	r3, 8007782 <_write_r+0x1e>
 8007780:	602b      	str	r3, [r5, #0]
 8007782:	bd38      	pop	{r3, r4, r5, pc}
 8007784:	20000634 	.word	0x20000634

08007788 <_close_r>:
 8007788:	b538      	push	{r3, r4, r5, lr}
 800778a:	2300      	movs	r3, #0
 800778c:	4c05      	ldr	r4, [pc, #20]	; (80077a4 <_close_r+0x1c>)
 800778e:	4605      	mov	r5, r0
 8007790:	4608      	mov	r0, r1
 8007792:	6023      	str	r3, [r4, #0]
 8007794:	f7fa faa6 	bl	8001ce4 <_close>
 8007798:	1c43      	adds	r3, r0, #1
 800779a:	d102      	bne.n	80077a2 <_close_r+0x1a>
 800779c:	6823      	ldr	r3, [r4, #0]
 800779e:	b103      	cbz	r3, 80077a2 <_close_r+0x1a>
 80077a0:	602b      	str	r3, [r5, #0]
 80077a2:	bd38      	pop	{r3, r4, r5, pc}
 80077a4:	20000634 	.word	0x20000634

080077a8 <_fstat_r>:
 80077a8:	b538      	push	{r3, r4, r5, lr}
 80077aa:	2300      	movs	r3, #0
 80077ac:	4c06      	ldr	r4, [pc, #24]	; (80077c8 <_fstat_r+0x20>)
 80077ae:	4605      	mov	r5, r0
 80077b0:	4608      	mov	r0, r1
 80077b2:	4611      	mov	r1, r2
 80077b4:	6023      	str	r3, [r4, #0]
 80077b6:	f7fa faa0 	bl	8001cfa <_fstat>
 80077ba:	1c43      	adds	r3, r0, #1
 80077bc:	d102      	bne.n	80077c4 <_fstat_r+0x1c>
 80077be:	6823      	ldr	r3, [r4, #0]
 80077c0:	b103      	cbz	r3, 80077c4 <_fstat_r+0x1c>
 80077c2:	602b      	str	r3, [r5, #0]
 80077c4:	bd38      	pop	{r3, r4, r5, pc}
 80077c6:	bf00      	nop
 80077c8:	20000634 	.word	0x20000634

080077cc <_isatty_r>:
 80077cc:	b538      	push	{r3, r4, r5, lr}
 80077ce:	2300      	movs	r3, #0
 80077d0:	4c05      	ldr	r4, [pc, #20]	; (80077e8 <_isatty_r+0x1c>)
 80077d2:	4605      	mov	r5, r0
 80077d4:	4608      	mov	r0, r1
 80077d6:	6023      	str	r3, [r4, #0]
 80077d8:	f7fa fa9e 	bl	8001d18 <_isatty>
 80077dc:	1c43      	adds	r3, r0, #1
 80077de:	d102      	bne.n	80077e6 <_isatty_r+0x1a>
 80077e0:	6823      	ldr	r3, [r4, #0]
 80077e2:	b103      	cbz	r3, 80077e6 <_isatty_r+0x1a>
 80077e4:	602b      	str	r3, [r5, #0]
 80077e6:	bd38      	pop	{r3, r4, r5, pc}
 80077e8:	20000634 	.word	0x20000634

080077ec <_lseek_r>:
 80077ec:	b538      	push	{r3, r4, r5, lr}
 80077ee:	4605      	mov	r5, r0
 80077f0:	4608      	mov	r0, r1
 80077f2:	4611      	mov	r1, r2
 80077f4:	2200      	movs	r2, #0
 80077f6:	4c05      	ldr	r4, [pc, #20]	; (800780c <_lseek_r+0x20>)
 80077f8:	6022      	str	r2, [r4, #0]
 80077fa:	461a      	mov	r2, r3
 80077fc:	f7fa fa96 	bl	8001d2c <_lseek>
 8007800:	1c43      	adds	r3, r0, #1
 8007802:	d102      	bne.n	800780a <_lseek_r+0x1e>
 8007804:	6823      	ldr	r3, [r4, #0]
 8007806:	b103      	cbz	r3, 800780a <_lseek_r+0x1e>
 8007808:	602b      	str	r3, [r5, #0]
 800780a:	bd38      	pop	{r3, r4, r5, pc}
 800780c:	20000634 	.word	0x20000634

08007810 <__malloc_lock>:
 8007810:	4770      	bx	lr

08007812 <__malloc_unlock>:
 8007812:	4770      	bx	lr

08007814 <_read_r>:
 8007814:	b538      	push	{r3, r4, r5, lr}
 8007816:	4605      	mov	r5, r0
 8007818:	4608      	mov	r0, r1
 800781a:	4611      	mov	r1, r2
 800781c:	2200      	movs	r2, #0
 800781e:	4c05      	ldr	r4, [pc, #20]	; (8007834 <_read_r+0x20>)
 8007820:	6022      	str	r2, [r4, #0]
 8007822:	461a      	mov	r2, r3
 8007824:	f7fa fa14 	bl	8001c50 <_read>
 8007828:	1c43      	adds	r3, r0, #1
 800782a:	d102      	bne.n	8007832 <_read_r+0x1e>
 800782c:	6823      	ldr	r3, [r4, #0]
 800782e:	b103      	cbz	r3, 8007832 <_read_r+0x1e>
 8007830:	602b      	str	r3, [r5, #0]
 8007832:	bd38      	pop	{r3, r4, r5, pc}
 8007834:	20000634 	.word	0x20000634

08007838 <_init>:
 8007838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783a:	bf00      	nop
 800783c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800783e:	bc08      	pop	{r3}
 8007840:	469e      	mov	lr, r3
 8007842:	4770      	bx	lr

08007844 <_fini>:
 8007844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007846:	bf00      	nop
 8007848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800784a:	bc08      	pop	{r3}
 800784c:	469e      	mov	lr, r3
 800784e:	4770      	bx	lr
