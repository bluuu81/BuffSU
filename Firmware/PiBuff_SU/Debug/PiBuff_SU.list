
PiBuff_SU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  080052b4  080052b4  000152b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053c8  080053c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080053c8  080053c8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053c8  080053c8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053c8  080053c8  000153c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053cc  080053cc  000153cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080053d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000049c  20000070  08005440  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  08005440  0002050c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b1a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030f9  00000000  00000000  00037bb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001260  00000000  00000000  0003acb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001150  00000000  00000000  0003bf10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac7a  00000000  00000000  0003d060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015727  00000000  00000000  00057cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000953ce  00000000  00000000  0006d401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001027cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005294  00000000  00000000  00102824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800529c 	.word	0x0800529c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800529c 	.word	0x0800529c

0800014c <BuffSU_Loop>:


//functions

void BuffSU_Loop()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	PWM_Init_Timers();
 8000150:	f000 fc98 	bl	8000a84 <PWM_Init_Timers>
	ticks1s = HAL_GetTick();
 8000154:	f001 f992 	bl	800147c <HAL_GetTick>
 8000158:	4603      	mov	r3, r0
 800015a:	4a10      	ldr	r2, [pc, #64]	; (800019c <BuffSU_Loop+0x50>)
 800015c:	6013      	str	r3, [r2, #0]
	ledSweepStat(4,0xFFFF,30);
 800015e:	221e      	movs	r2, #30
 8000160:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000164:	2004      	movs	r0, #4
 8000166:	f000 fcdf 	bl	8000b28 <ledSweepStat>

	while(1)
	{
		checkPowerOff();
 800016a:	f000 f8ab 	bl	80002c4 <checkPowerOff>

		if(HAL_GetTick()-ticks1s >= 1000)
 800016e:	f001 f985 	bl	800147c <HAL_GetTick>
 8000172:	4602      	mov	r2, r0
 8000174:	4b09      	ldr	r3, [pc, #36]	; (800019c <BuffSU_Loop+0x50>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	1ad3      	subs	r3, r2, r3
 800017a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800017e:	d304      	bcc.n	800018a <BuffSU_Loop+0x3e>
		{
			ticks1s = HAL_GetTick();
 8000180:	f001 f97c 	bl	800147c <HAL_GetTick>
 8000184:	4603      	mov	r3, r0
 8000186:	4a05      	ldr	r2, [pc, #20]	; (800019c <BuffSU_Loop+0x50>)
 8000188:	6013      	str	r3, [r2, #0]
//			PWR_LED_TOGGLE();
		}
		WDR();
 800018a:	4b05      	ldr	r3, [pc, #20]	; (80001a0 <BuffSU_Loop+0x54>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	4a05      	ldr	r2, [pc, #20]	; (80001a4 <BuffSU_Loop+0x58>)
 8000190:	4293      	cmp	r3, r2
 8000192:	d1ea      	bne.n	800016a <BuffSU_Loop+0x1e>
 8000194:	4802      	ldr	r0, [pc, #8]	; (80001a0 <BuffSU_Loop+0x54>)
 8000196:	f002 f9cd 	bl	8002534 <HAL_IWDG_Refresh>
		checkPowerOff();
 800019a:	e7e6      	b.n	800016a <BuffSU_Loop+0x1e>
 800019c:	200000f8 	.word	0x200000f8
 80001a0:	20000398 	.word	0x20000398
 80001a4:	40003000 	.word	0x40003000

080001a8 <startup_check>:
}

// Startup checking

void startup_check()
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
	  POWER_OFF();
 80001ae:	2200      	movs	r2, #0
 80001b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001b4:	482f      	ldr	r0, [pc, #188]	; (8000274 <startup_check+0xcc>)
 80001b6:	f002 f860 	bl	800227a <HAL_GPIO_WritePin>
	  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 80001ba:	4b2f      	ldr	r3, [pc, #188]	; (8000278 <startup_check+0xd0>)
 80001bc:	685b      	ldr	r3, [r3, #4]
 80001be:	f003 0302 	and.w	r3, r3, #2
 80001c2:	2b02      	cmp	r3, #2
 80001c4:	d105      	bne.n	80001d2 <startup_check+0x2a>
	  {
	    /* Clear Standby flag */
	    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 80001c6:	4b2c      	ldr	r3, [pc, #176]	; (8000278 <startup_check+0xd0>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	4a2b      	ldr	r2, [pc, #172]	; (8000278 <startup_check+0xd0>)
 80001cc:	f043 0308 	orr.w	r3, r3, #8
 80001d0:	6013      	str	r3, [r2, #0]
	  }
	  uint32_t timon = HAL_GetTick();
 80001d2:	f001 f953 	bl	800147c <HAL_GetTick>
 80001d6:	6078      	str	r0, [r7, #4]
	  while(Power_SW_READ() == GPIO_PIN_SET)
 80001d8:	e035      	b.n	8000246 <startup_check+0x9e>
	  {
	    if(HAL_GetTick() - timon > 1000)     // 1 sec push
 80001da:	f001 f94f 	bl	800147c <HAL_GetTick>
 80001de:	4602      	mov	r2, r0
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	1ad3      	subs	r3, r2, r3
 80001e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80001e8:	d925      	bls.n	8000236 <startup_check+0x8e>
	    {
	    	Buzz(1000);
 80001ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001ee:	f000 fcb7 	bl	8000b60 <Buzz>
	    	HAL_Delay(500);
 80001f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001f6:	f001 f94b 	bl	8001490 <HAL_Delay>
	    	RPI_POWER_ON();
 80001fa:	2201      	movs	r2, #1
 80001fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000200:	481c      	ldr	r0, [pc, #112]	; (8000274 <startup_check+0xcc>)
 8000202:	f002 f83a 	bl	800227a <HAL_GPIO_WritePin>
	    	timon = HAL_GetTick();
 8000206:	f001 f939 	bl	800147c <HAL_GetTick>
 800020a:	6078      	str	r0, [r7, #4]
	        POWER_ON();    // pullup power supply
 800020c:	2201      	movs	r2, #1
 800020e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000212:	4818      	ldr	r0, [pc, #96]	; (8000274 <startup_check+0xcc>)
 8000214:	f002 f831 	bl	800227a <HAL_GPIO_WritePin>
	    	printf("Power ON\r\n");
 8000218:	4818      	ldr	r0, [pc, #96]	; (800027c <startup_check+0xd4>)
 800021a:	f004 fbeb 	bl	80049f4 <puts>
	    	run_state = CHECKING;
 800021e:	4b18      	ldr	r3, [pc, #96]	; (8000280 <startup_check+0xd8>)
 8000220:	2201      	movs	r2, #1
 8000222:	701a      	strb	r2, [r3, #0]
	    	WDR();
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <startup_check+0xdc>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a17      	ldr	r2, [pc, #92]	; (8000288 <startup_check+0xe0>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d113      	bne.n	8000256 <startup_check+0xae>
 800022e:	4815      	ldr	r0, [pc, #84]	; (8000284 <startup_check+0xdc>)
 8000230:	f002 f980 	bl	8002534 <HAL_IWDG_Refresh>
	        break;                // break while loop
 8000234:	e00f      	b.n	8000256 <startup_check+0xae>
	    }

	    WDR();    // watchdog reset
 8000236:	4b13      	ldr	r3, [pc, #76]	; (8000284 <startup_check+0xdc>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4a13      	ldr	r2, [pc, #76]	; (8000288 <startup_check+0xe0>)
 800023c:	4293      	cmp	r3, r2
 800023e:	d102      	bne.n	8000246 <startup_check+0x9e>
 8000240:	4810      	ldr	r0, [pc, #64]	; (8000284 <startup_check+0xdc>)
 8000242:	f002 f977 	bl	8002534 <HAL_IWDG_Refresh>
	  while(Power_SW_READ() == GPIO_PIN_SET)
 8000246:	2110      	movs	r1, #16
 8000248:	480a      	ldr	r0, [pc, #40]	; (8000274 <startup_check+0xcc>)
 800024a:	f001 ffff 	bl	800224c <HAL_GPIO_ReadPin>
 800024e:	4603      	mov	r3, r0
 8000250:	2b01      	cmp	r3, #1
 8000252:	d0c2      	beq.n	80001da <startup_check+0x32>
 8000254:	e000      	b.n	8000258 <startup_check+0xb0>
	        break;                // break while loop
 8000256:	bf00      	nop
	  }
	  if(run_state == WARMUP)
 8000258:	4b09      	ldr	r3, [pc, #36]	; (8000280 <startup_check+0xd8>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d105      	bne.n	800026c <startup_check+0xc4>
	  {
	      HAL_Delay(300);
 8000260:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000264:	f001 f914 	bl	8001490 <HAL_Delay>
	      MCUgoSleep();
 8000268:	f000 f810 	bl	800028c <MCUgoSleep>
	  }
}
 800026c:	bf00      	nop
 800026e:	3708      	adds	r7, #8
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	40010c00 	.word	0x40010c00
 8000278:	40007000 	.word	0x40007000
 800027c:	080052b4 	.word	0x080052b4
 8000280:	2000008c 	.word	0x2000008c
 8000284:	20000398 	.word	0x20000398
 8000288:	40003000 	.word	0x40003000

0800028c <MCUgoSleep>:

void MCUgoSleep()
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
//	stop_meas();
    // prepare wake-up pin
    HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);
 8000290:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000294:	f002 f97a 	bl	800258c <HAL_PWR_DisableWakeUpPin>
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000298:	4b08      	ldr	r3, [pc, #32]	; (80002bc <MCUgoSleep+0x30>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a07      	ldr	r2, [pc, #28]	; (80002bc <MCUgoSleep+0x30>)
 800029e:	f043 0304 	orr.w	r3, r3, #4
 80002a2:	6013      	str	r3, [r2, #0]
    HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 80002a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80002a8:	f002 f954 	bl	8002554 <HAL_PWR_EnableWakeUpPin>
    // go sleep
    printf("Sleep\r\n");
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <MCUgoSleep+0x34>)
 80002ae:	f004 fba1 	bl	80049f4 <puts>
    HAL_PWR_EnterSTANDBYMode();
 80002b2:	f002 f987 	bl	80025c4 <HAL_PWR_EnterSTANDBYMode>
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	40007000 	.word	0x40007000
 80002c0:	080052c0 	.word	0x080052c0

080002c4 <checkPowerOff>:

void checkPowerOff()
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  if(Power_SW_READ() && rpiTout == 0) // power button pressed
 80002c8:	2110      	movs	r1, #16
 80002ca:	4855      	ldr	r0, [pc, #340]	; (8000420 <checkPowerOff+0x15c>)
 80002cc:	f001 ffbe 	bl	800224c <HAL_GPIO_ReadPin>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d033      	beq.n	800033e <checkPowerOff+0x7a>
 80002d6:	4b53      	ldr	r3, [pc, #332]	; (8000424 <checkPowerOff+0x160>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d12f      	bne.n	800033e <checkPowerOff+0x7a>
  {
     Buzz(1000);
 80002de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002e2:	f000 fc3d 	bl	8000b60 <Buzz>
     if(offTim && HAL_GetTick() - offTim > 2000)    // 2 sekundy naciskania
 80002e6:	4b50      	ldr	r3, [pc, #320]	; (8000428 <checkPowerOff+0x164>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d02d      	beq.n	800034a <checkPowerOff+0x86>
 80002ee:	f001 f8c5 	bl	800147c <HAL_GetTick>
 80002f2:	4602      	mov	r2, r0
 80002f4:	4b4c      	ldr	r3, [pc, #304]	; (8000428 <checkPowerOff+0x164>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	1ad3      	subs	r3, r2, r3
 80002fa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80002fe:	d924      	bls.n	800034a <checkPowerOff+0x86>
     {
    	 PWR_LED_OFF();
 8000300:	2000      	movs	r0, #0
 8000302:	f000 fbcd 	bl	8000aa0 <setPwrLed>
    	 STAT_LED_OFF();
 8000306:	2000      	movs	r0, #0
 8000308:	f000 fbde 	bl	8000ac8 <setStatLed>
    	 ledSweepStat(10,10,5);
 800030c:	2205      	movs	r2, #5
 800030e:	210a      	movs	r1, #10
 8000310:	200a      	movs	r0, #10
 8000312:	f000 fc09 	bl	8000b28 <ledSweepStat>
    	 ledSweepPwr(10,10,5);
 8000316:	2205      	movs	r2, #5
 8000318:	210a      	movs	r1, #10
 800031a:	200a      	movs	r0, #10
 800031c:	f000 fbe8 	bl	8000af0 <ledSweepPwr>
    	 printf("Power off in progress ...\r\n");
 8000320:	4842      	ldr	r0, [pc, #264]	; (800042c <checkPowerOff+0x168>)
 8000322:	f004 fb67 	bl	80049f4 <puts>
         rpiTout = HAL_GetTick();  // mark power off proccess time
 8000326:	f001 f8a9 	bl	800147c <HAL_GetTick>
 800032a:	4603      	mov	r3, r0
 800032c:	4a3d      	ldr	r2, [pc, #244]	; (8000424 <checkPowerOff+0x160>)
 800032e:	6013      	str	r3, [r2, #0]
         RPI_POWER_OFF();           // power off RPi by PIN command
 8000330:	2200      	movs	r2, #0
 8000332:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000336:	483a      	ldr	r0, [pc, #232]	; (8000420 <checkPowerOff+0x15c>)
 8000338:	f001 ff9f 	bl	800227a <HAL_GPIO_WritePin>
     if(offTim && HAL_GetTick() - offTim > 2000)    // 2 sekundy naciskania
 800033c:	e005      	b.n	800034a <checkPowerOff+0x86>
     }
  } else offTim = HAL_GetTick();   // power button released
 800033e:	f001 f89d 	bl	800147c <HAL_GetTick>
 8000342:	4603      	mov	r3, r0
 8000344:	4a38      	ldr	r2, [pc, #224]	; (8000428 <checkPowerOff+0x164>)
 8000346:	6013      	str	r3, [r2, #0]
 8000348:	e000      	b.n	800034c <checkPowerOff+0x88>
     if(offTim && HAL_GetTick() - offTim > 2000)    // 2 sekundy naciskania
 800034a:	bf00      	nop

  if(rpiTout && HAL_GetTick() - rpiTout > 120000)   // RPi power down in progress and timeout 120s
 800034c:	4b35      	ldr	r3, [pc, #212]	; (8000424 <checkPowerOff+0x160>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d023      	beq.n	800039c <checkPowerOff+0xd8>
 8000354:	f001 f892 	bl	800147c <HAL_GetTick>
 8000358:	4602      	mov	r2, r0
 800035a:	4b32      	ldr	r3, [pc, #200]	; (8000424 <checkPowerOff+0x160>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	1ad3      	subs	r3, r2, r3
 8000360:	4a33      	ldr	r2, [pc, #204]	; (8000430 <checkPowerOff+0x16c>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d91a      	bls.n	800039c <checkPowerOff+0xd8>
  {
      rpiTout = 0;
 8000366:	4b2f      	ldr	r3, [pc, #188]	; (8000424 <checkPowerOff+0x160>)
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
//      stop_meas();
      Buzz(1000);
 800036c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000370:	f000 fbf6 	bl	8000b60 <Buzz>
 	  ledSweepStat(3,10,5);
 8000374:	2205      	movs	r2, #5
 8000376:	210a      	movs	r1, #10
 8000378:	2003      	movs	r0, #3
 800037a:	f000 fbd5 	bl	8000b28 <ledSweepStat>
      POWER_OFF();
 800037e:	2200      	movs	r2, #0
 8000380:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000384:	4826      	ldr	r0, [pc, #152]	; (8000420 <checkPowerOff+0x15c>)
 8000386:	f001 ff78 	bl	800227a <HAL_GPIO_WritePin>
      printf("Power OFF\r\n");
 800038a:	482a      	ldr	r0, [pc, #168]	; (8000434 <checkPowerOff+0x170>)
 800038c:	f004 fb32 	bl	80049f4 <puts>
      HAL_Delay(3000);
 8000390:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000394:	f001 f87c 	bl	8001490 <HAL_Delay>
      MCUgoSleep();
 8000398:	f7ff ff78 	bl	800028c <MCUgoSleep>
  }
  if(RPI_FB_READ() == 0 && HAL_GetTick() - rpiTout < 115000)   // RPi power off confirmed and 5s to end
 800039c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003a0:	481f      	ldr	r0, [pc, #124]	; (8000420 <checkPowerOff+0x15c>)
 80003a2:	f001 ff53 	bl	800224c <HAL_GPIO_ReadPin>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d114      	bne.n	80003d6 <checkPowerOff+0x112>
 80003ac:	f001 f866 	bl	800147c <HAL_GetTick>
 80003b0:	4602      	mov	r2, r0
 80003b2:	4b1c      	ldr	r3, [pc, #112]	; (8000424 <checkPowerOff+0x160>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	1ad3      	subs	r3, r2, r3
 80003b8:	4a1f      	ldr	r2, [pc, #124]	; (8000438 <checkPowerOff+0x174>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d80b      	bhi.n	80003d6 <checkPowerOff+0x112>
  {
	  printf("RPI Power off Feedback\r\n");
 80003be:	481f      	ldr	r0, [pc, #124]	; (800043c <checkPowerOff+0x178>)
 80003c0:	f004 fb18 	bl	80049f4 <puts>
      rpiTout = HAL_GetTick() - 115000;     // 5s to system off
 80003c4:	f001 f85a 	bl	800147c <HAL_GetTick>
 80003c8:	4603      	mov	r3, r0
 80003ca:	f5a3 33e0 	sub.w	r3, r3, #114688	; 0x1c000
 80003ce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80003d2:	4a14      	ldr	r2, [pc, #80]	; (8000424 <checkPowerOff+0x160>)
 80003d4:	6013      	str	r3, [r2, #0]
  }

  if(rpiTout)
 80003d6:	4b13      	ldr	r3, [pc, #76]	; (8000424 <checkPowerOff+0x160>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d01e      	beq.n	800041c <checkPowerOff+0x158>
  {
 	  ledSweepPwr(3,0xFFFF,15);
 80003de:	220f      	movs	r2, #15
 80003e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80003e4:	2003      	movs	r0, #3
 80003e6:	f000 fb83 	bl	8000af0 <ledSweepPwr>
	  ledSweepStat(3,0xFFFF,30);
 80003ea:	221e      	movs	r2, #30
 80003ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80003f0:	2003      	movs	r0, #3
 80003f2:	f000 fb99 	bl	8000b28 <ledSweepStat>
		if(HAL_GetTick()-beepTim >= 1500)
 80003f6:	f001 f841 	bl	800147c <HAL_GetTick>
 80003fa:	4602      	mov	r2, r0
 80003fc:	4b10      	ldr	r3, [pc, #64]	; (8000440 <checkPowerOff+0x17c>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	1ad3      	subs	r3, r2, r3
 8000402:	f240 52db 	movw	r2, #1499	; 0x5db
 8000406:	4293      	cmp	r3, r2
 8000408:	d908      	bls.n	800041c <checkPowerOff+0x158>
		{
			beepTim = HAL_GetTick();
 800040a:	f001 f837 	bl	800147c <HAL_GetTick>
 800040e:	4603      	mov	r3, r0
 8000410:	4a0b      	ldr	r2, [pc, #44]	; (8000440 <checkPowerOff+0x17c>)
 8000412:	6013      	str	r3, [r2, #0]
		 	Buzz(300);
 8000414:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000418:	f000 fba2 	bl	8000b60 <Buzz>
		}
  }
}
 800041c:	bf00      	nop
 800041e:	bd80      	pop	{r7, pc}
 8000420:	40010c00 	.word	0x40010c00
 8000424:	200000f0 	.word	0x200000f0
 8000428:	200000ac 	.word	0x200000ac
 800042c:	080052c8 	.word	0x080052c8
 8000430:	0001d4c0 	.word	0x0001d4c0
 8000434:	080052e4 	.word	0x080052e4
 8000438:	0001c137 	.word	0x0001c137
 800043c:	080052f0 	.word	0x080052f0
 8000440:	200000ec 	.word	0x200000ec

08000444 <_write>:

// uart functions

// printf redirection to UART1
int _write(int file, char *ptr, int len)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
 800044a:	60f8      	str	r0, [r7, #12]
 800044c:	60b9      	str	r1, [r7, #8]
 800044e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, len+1);  // debug uart
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	b29a      	uxth	r2, r3
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	3301      	adds	r3, #1
 8000458:	68b9      	ldr	r1, [r7, #8]
 800045a:	4804      	ldr	r0, [pc, #16]	; (800046c <_write+0x28>)
 800045c:	f003 fd47 	bl	8003eee <HAL_UART_Transmit>
    return len;
 8000460:	687b      	ldr	r3, [r7, #4]
}
 8000462:	4618      	mov	r0, r3
 8000464:	3710      	adds	r7, #16
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	20000418 	.word	0x20000418

08000470 <HAL_UART_RxCpltCallback>:
}

// UART recive

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_IT(&huart1, uart_rx_buf, RX_BUF_SIZE);  // Interrupt UART RX start
 8000478:	f44f 7200 	mov.w	r2, #512	; 0x200
 800047c:	4903      	ldr	r1, [pc, #12]	; (800048c <HAL_UART_RxCpltCallback+0x1c>)
 800047e:	4804      	ldr	r0, [pc, #16]	; (8000490 <HAL_UART_RxCpltCallback+0x20>)
 8000480:	f003 fdc7 	bl	8004012 <HAL_UART_Receive_IT>
}
 8000484:	bf00      	nop
 8000486:	3708      	adds	r7, #8
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	20000100 	.word	0x20000100
 8000490:	20000418 	.word	0x20000418

08000494 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
    HAL_UART_RxCpltCallback(huart);
 800049c:	6878      	ldr	r0, [r7, #4]
 800049e:	f7ff ffe7 	bl	8000470 <HAL_UART_RxCpltCallback>
}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
	...

080004ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b0:	f000 ff8c 	bl	80013cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b4:	f000 f81e 	bl	80004f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b8:	f000 fa64 	bl	8000984 <MX_GPIO_Init>
//  MX_IWDG_Init();
  MX_USART1_UART_Init();
 80004bc:	f000 f9e8 	bl	8000890 <MX_USART1_UART_Init>
  printf("Initializing ...\r\n");
 80004c0:	480a      	ldr	r0, [pc, #40]	; (80004ec <main+0x40>)
 80004c2:	f004 fa97 	bl	80049f4 <puts>
  startup_check();   //checking power up/down condition
 80004c6:	f7ff fe6f 	bl	80001a8 <startup_check>

  MX_USART3_UART_Init();
 80004ca:	f000 fa0b 	bl	80008e4 <MX_USART3_UART_Init>
  MX_DMA_Init();
 80004ce:	f000 fa33 	bl	8000938 <MX_DMA_Init>
  MX_ADC1_Init();
 80004d2:	f000 f86d 	bl	80005b0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80004d6:	f000 f92b 	bl	8000730 <MX_I2C1_Init>

#if !defined(GPIO)
  MX_TIM2_Init();
 80004da:	f000 f957 	bl	800078c <MX_TIM2_Init>
  HAL_TIM_Base_Start(&htim2);
 80004de:	4804      	ldr	r0, [pc, #16]	; (80004f0 <main+0x44>)
 80004e0:	f002 fda8 	bl	8003034 <HAL_TIM_Base_Start>
#endif
  /* USER CODE BEGIN 2 */
  BuffSU_Loop();
 80004e4:	f7ff fe32 	bl	800014c <BuffSU_Loop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <main+0x3c>
 80004ea:	bf00      	nop
 80004ec:	08005308 	.word	0x08005308
 80004f0:	200004a0 	.word	0x200004a0

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b094      	sub	sp, #80	; 0x50
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004fe:	2228      	movs	r2, #40	; 0x28
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f004 fa00 	bl	8004908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000508:	f107 0314 	add.w	r3, r7, #20
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000524:	2309      	movs	r3, #9
 8000526:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000528:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800052c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800052e:	2300      	movs	r3, #0
 8000530:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000532:	2301      	movs	r3, #1
 8000534:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000536:	2301      	movs	r3, #1
 8000538:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053a:	2302      	movs	r3, #2
 800053c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800053e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000542:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000544:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000548:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800054e:	4618      	mov	r0, r3
 8000550:	f002 f850 	bl	80025f4 <HAL_RCC_OscConfig>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800055a:	f000 fa8d 	bl	8000a78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055e:	230f      	movs	r3, #15
 8000560:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000562:	2302      	movs	r3, #2
 8000564:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000566:	2300      	movs	r3, #0
 8000568:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800056a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800056e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	2102      	movs	r1, #2
 800057a:	4618      	mov	r0, r3
 800057c:	f002 faba 	bl	8002af4 <HAL_RCC_ClockConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000586:	f000 fa77 	bl	8000a78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800058a:	2302      	movs	r3, #2
 800058c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800058e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000592:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	4618      	mov	r0, r3
 8000598:	f002 fc46 	bl	8002e28 <HAL_RCCEx_PeriphCLKConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80005a2:	f000 fa69 	bl	8000a78 <Error_Handler>
  }
}
 80005a6:	bf00      	nop
 80005a8:	3750      	adds	r7, #80	; 0x50
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80005c0:	4b59      	ldr	r3, [pc, #356]	; (8000728 <MX_ADC1_Init+0x178>)
 80005c2:	4a5a      	ldr	r2, [pc, #360]	; (800072c <MX_ADC1_Init+0x17c>)
 80005c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005c6:	4b58      	ldr	r3, [pc, #352]	; (8000728 <MX_ADC1_Init+0x178>)
 80005c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005ce:	4b56      	ldr	r3, [pc, #344]	; (8000728 <MX_ADC1_Init+0x178>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d4:	4b54      	ldr	r3, [pc, #336]	; (8000728 <MX_ADC1_Init+0x178>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005da:	4b53      	ldr	r3, [pc, #332]	; (8000728 <MX_ADC1_Init+0x178>)
 80005dc:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80005e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e2:	4b51      	ldr	r3, [pc, #324]	; (8000728 <MX_ADC1_Init+0x178>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 10;
 80005e8:	4b4f      	ldr	r3, [pc, #316]	; (8000728 <MX_ADC1_Init+0x178>)
 80005ea:	220a      	movs	r2, #10
 80005ec:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ee:	484e      	ldr	r0, [pc, #312]	; (8000728 <MX_ADC1_Init+0x178>)
 80005f0:	f000 ff72 	bl	80014d8 <HAL_ADC_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80005fa:	f000 fa3d 	bl	8000a78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80005fe:	2310      	movs	r3, #16
 8000600:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000602:	2301      	movs	r3, #1
 8000604:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000606:	2307      	movs	r3, #7
 8000608:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4619      	mov	r1, r3
 800060e:	4846      	ldr	r0, [pc, #280]	; (8000728 <MX_ADC1_Init+0x178>)
 8000610:	f001 f83a 	bl	8001688 <HAL_ADC_ConfigChannel>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800061a:	f000 fa2d 	bl	8000a78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800061e:	2301      	movs	r3, #1
 8000620:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000622:	2302      	movs	r3, #2
 8000624:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	4619      	mov	r1, r3
 800062e:	483e      	ldr	r0, [pc, #248]	; (8000728 <MX_ADC1_Init+0x178>)
 8000630:	f001 f82a 	bl	8001688 <HAL_ADC_ConfigChannel>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800063a:	f000 fa1d 	bl	8000a78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800063e:	2302      	movs	r3, #2
 8000640:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000642:	2303      	movs	r3, #3
 8000644:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	4619      	mov	r1, r3
 800064a:	4837      	ldr	r0, [pc, #220]	; (8000728 <MX_ADC1_Init+0x178>)
 800064c:	f001 f81c 	bl	8001688 <HAL_ADC_ConfigChannel>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000656:	f000 fa0f 	bl	8000a78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800065a:	2303      	movs	r3, #3
 800065c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800065e:	2304      	movs	r3, #4
 8000660:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	4619      	mov	r1, r3
 8000666:	4830      	ldr	r0, [pc, #192]	; (8000728 <MX_ADC1_Init+0x178>)
 8000668:	f001 f80e 	bl	8001688 <HAL_ADC_ConfigChannel>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000672:	f000 fa01 	bl	8000a78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000676:	2304      	movs	r3, #4
 8000678:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800067a:	2305      	movs	r3, #5
 800067c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	4619      	mov	r1, r3
 8000682:	4829      	ldr	r0, [pc, #164]	; (8000728 <MX_ADC1_Init+0x178>)
 8000684:	f001 f800 	bl	8001688 <HAL_ADC_ConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800068e:	f000 f9f3 	bl	8000a78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000692:	2305      	movs	r3, #5
 8000694:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000696:	2306      	movs	r3, #6
 8000698:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	4619      	mov	r1, r3
 800069e:	4822      	ldr	r0, [pc, #136]	; (8000728 <MX_ADC1_Init+0x178>)
 80006a0:	f000 fff2 	bl	8001688 <HAL_ADC_ConfigChannel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80006aa:	f000 f9e5 	bl	8000a78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006ae:	2306      	movs	r3, #6
 80006b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80006b2:	2307      	movs	r3, #7
 80006b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	4619      	mov	r1, r3
 80006ba:	481b      	ldr	r0, [pc, #108]	; (8000728 <MX_ADC1_Init+0x178>)
 80006bc:	f000 ffe4 	bl	8001688 <HAL_ADC_ConfigChannel>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80006c6:	f000 f9d7 	bl	8000a78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006ca:	2307      	movs	r3, #7
 80006cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80006ce:	2308      	movs	r3, #8
 80006d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	4619      	mov	r1, r3
 80006d6:	4814      	ldr	r0, [pc, #80]	; (8000728 <MX_ADC1_Init+0x178>)
 80006d8:	f000 ffd6 	bl	8001688 <HAL_ADC_ConfigChannel>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 80006e2:	f000 f9c9 	bl	8000a78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006e6:	2308      	movs	r3, #8
 80006e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80006ea:	2309      	movs	r3, #9
 80006ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	4619      	mov	r1, r3
 80006f2:	480d      	ldr	r0, [pc, #52]	; (8000728 <MX_ADC1_Init+0x178>)
 80006f4:	f000 ffc8 	bl	8001688 <HAL_ADC_ConfigChannel>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 80006fe:	f000 f9bb 	bl	8000a78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000702:	2309      	movs	r3, #9
 8000704:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000706:	230a      	movs	r3, #10
 8000708:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	4619      	mov	r1, r3
 800070e:	4806      	ldr	r0, [pc, #24]	; (8000728 <MX_ADC1_Init+0x178>)
 8000710:	f000 ffba 	bl	8001688 <HAL_ADC_ConfigChannel>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 800071a:	f000 f9ad 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200003e8 	.word	0x200003e8
 800072c:	40012400 	.word	0x40012400

08000730 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MX_I2C1_Init+0x50>)
 8000736:	4a13      	ldr	r2, [pc, #76]	; (8000784 <MX_I2C1_Init+0x54>)
 8000738:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_I2C1_Init+0x50>)
 800073c:	4a12      	ldr	r2, [pc, #72]	; (8000788 <MX_I2C1_Init+0x58>)
 800073e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_I2C1_Init+0x50>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_I2C1_Init+0x50>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_I2C1_Init+0x50>)
 800074e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000752:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <MX_I2C1_Init+0x50>)
 8000756:	2200      	movs	r2, #0
 8000758:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_I2C1_Init+0x50>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <MX_I2C1_Init+0x50>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_I2C1_Init+0x50>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_I2C1_Init+0x50>)
 800076e:	f001 fd9d 	bl	80022ac <HAL_I2C_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000778:	f000 f97e 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000344 	.word	0x20000344
 8000784:	40005400 	.word	0x40005400
 8000788:	00061a80 	.word	0x00061a80

0800078c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08e      	sub	sp, #56	; 0x38
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000792:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a0:	f107 0320 	add.w	r3, r7, #32
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
 80007b8:	615a      	str	r2, [r3, #20]
 80007ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007bc:	4b33      	ldr	r3, [pc, #204]	; (800088c <MX_TIM2_Init+0x100>)
 80007be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 537; // 449
 80007c4:	4b31      	ldr	r3, [pc, #196]	; (800088c <MX_TIM2_Init+0x100>)
 80007c6:	f240 2219 	movw	r2, #537	; 0x219
 80007ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007cc:	4b2f      	ldr	r3, [pc, #188]	; (800088c <MX_TIM2_Init+0x100>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 256; //399
 80007d2:	4b2e      	ldr	r3, [pc, #184]	; (800088c <MX_TIM2_Init+0x100>)
 80007d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007da:	4b2c      	ldr	r3, [pc, #176]	; (800088c <MX_TIM2_Init+0x100>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e0:	4b2a      	ldr	r3, [pc, #168]	; (800088c <MX_TIM2_Init+0x100>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007e6:	4829      	ldr	r0, [pc, #164]	; (800088c <MX_TIM2_Init+0x100>)
 80007e8:	f002 fbd4 	bl	8002f94 <HAL_TIM_Base_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80007f2:	f000 f941 	bl	8000a78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000800:	4619      	mov	r1, r3
 8000802:	4822      	ldr	r0, [pc, #136]	; (800088c <MX_TIM2_Init+0x100>)
 8000804:	f002 ff20 	bl	8003648 <HAL_TIM_ConfigClockSource>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800080e:	f000 f933 	bl	8000a78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000812:	481e      	ldr	r0, [pc, #120]	; (800088c <MX_TIM2_Init+0x100>)
 8000814:	f002 fc58 	bl	80030c8 <HAL_TIM_PWM_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800081e:	f000 f92b 	bl	8000a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000822:	2300      	movs	r3, #0
 8000824:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800082a:	f107 0320 	add.w	r3, r7, #32
 800082e:	4619      	mov	r1, r3
 8000830:	4816      	ldr	r0, [pc, #88]	; (800088c <MX_TIM2_Init+0x100>)
 8000832:	f003 fa9f 	bl	8003d74 <HAL_TIMEx_MasterConfigSynchronization>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800083c:	f000 f91c 	bl	8000a78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000840:	2360      	movs	r3, #96	; 0x60
 8000842:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2200      	movs	r2, #0
 8000854:	4619      	mov	r1, r3
 8000856:	480d      	ldr	r0, [pc, #52]	; (800088c <MX_TIM2_Init+0x100>)
 8000858:	f002 fe38 	bl	80034cc <HAL_TIM_PWM_ConfigChannel>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000862:	f000 f909 	bl	8000a78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2204      	movs	r2, #4
 800086a:	4619      	mov	r1, r3
 800086c:	4807      	ldr	r0, [pc, #28]	; (800088c <MX_TIM2_Init+0x100>)
 800086e:	f002 fe2d 	bl	80034cc <HAL_TIM_PWM_ConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000878:	f000 f8fe 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800087c:	4803      	ldr	r0, [pc, #12]	; (800088c <MX_TIM2_Init+0x100>)
 800087e:	f000 fb71 	bl	8000f64 <HAL_TIM_MspPostInit>

}
 8000882:	bf00      	nop
 8000884:	3738      	adds	r7, #56	; 0x38
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200004a0 	.word	0x200004a0

08000890 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_USART1_UART_Init+0x4c>)
 8000896:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <MX_USART1_UART_Init+0x50>)
 8000898:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <MX_USART1_UART_Init+0x4c>)
 800089c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_USART1_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_USART1_UART_Init+0x4c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_USART1_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_USART1_UART_Init+0x4c>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_USART1_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_USART1_UART_Init+0x4c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_USART1_UART_Init+0x4c>)
 80008c8:	f003 fac4 	bl	8003e54 <HAL_UART_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008d2:	f000 f8d1 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000418 	.word	0x20000418
 80008e0:	40013800 	.word	0x40013800

080008e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_USART3_UART_Init+0x4c>)
 80008ea:	4a12      	ldr	r2, [pc, #72]	; (8000934 <MX_USART3_UART_Init+0x50>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <MX_USART3_UART_Init+0x4c>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_USART3_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_USART3_UART_Init+0x4c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <MX_USART3_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_USART3_UART_Init+0x4c>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <MX_USART3_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_USART3_UART_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_USART3_UART_Init+0x4c>)
 800091c:	f003 fa9a 	bl	8003e54 <HAL_UART_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000926:	f000 f8a7 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000300 	.word	0x20000300
 8000934:	40004800 	.word	0x40004800

08000938 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <MX_DMA_Init+0x48>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	4a0f      	ldr	r2, [pc, #60]	; (8000980 <MX_DMA_Init+0x48>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6153      	str	r3, [r2, #20]
 800094a:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <MX_DMA_Init+0x48>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	2100      	movs	r1, #0
 800095a:	200b      	movs	r0, #11
 800095c:	f001 f8a5 	bl	8001aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000960:	200b      	movs	r0, #11
 8000962:	f001 f8be 	bl	8001ae2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	200c      	movs	r0, #12
 800096c:	f001 f89d 	bl	8001aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000970:	200c      	movs	r0, #12
 8000972:	f001 f8b6 	bl	8001ae2 <HAL_NVIC_EnableIRQ>

}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40021000 	.word	0x40021000

08000984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b088      	sub	sp, #32
 8000988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	f107 0310 	add.w	r3, r7, #16
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000998:	4b34      	ldr	r3, [pc, #208]	; (8000a6c <MX_GPIO_Init+0xe8>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	4a33      	ldr	r2, [pc, #204]	; (8000a6c <MX_GPIO_Init+0xe8>)
 800099e:	f043 0320 	orr.w	r3, r3, #32
 80009a2:	6193      	str	r3, [r2, #24]
 80009a4:	4b31      	ldr	r3, [pc, #196]	; (8000a6c <MX_GPIO_Init+0xe8>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f003 0320 	and.w	r3, r3, #32
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b0:	4b2e      	ldr	r3, [pc, #184]	; (8000a6c <MX_GPIO_Init+0xe8>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	4a2d      	ldr	r2, [pc, #180]	; (8000a6c <MX_GPIO_Init+0xe8>)
 80009b6:	f043 0304 	orr.w	r3, r3, #4
 80009ba:	6193      	str	r3, [r2, #24]
 80009bc:	4b2b      	ldr	r3, [pc, #172]	; (8000a6c <MX_GPIO_Init+0xe8>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	f003 0304 	and.w	r3, r3, #4
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c8:	4b28      	ldr	r3, [pc, #160]	; (8000a6c <MX_GPIO_Init+0xe8>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	4a27      	ldr	r2, [pc, #156]	; (8000a6c <MX_GPIO_Init+0xe8>)
 80009ce:	f043 0308 	orr.w	r3, r3, #8
 80009d2:	6193      	str	r3, [r2, #24]
 80009d4:	4b25      	ldr	r3, [pc, #148]	; (8000a6c <MX_GPIO_Init+0xe8>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	f003 0308 	and.w	r3, r3, #8
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _12V_SEL_Pin|MAIN_SW_Pin|RPI_OFF_Pin|LED_Pin, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f246 2104 	movw	r1, #25092	; 0x6204
 80009e6:	4822      	ldr	r0, [pc, #136]	; (8000a70 <MX_GPIO_Init+0xec>)
 80009e8:	f001 fc47 	bl	800227a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzz_Pin|PS_ONOFF_Pin|_5V_SEL_Pin, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 80009f2:	4820      	ldr	r0, [pc, #128]	; (8000a74 <MX_GPIO_Init+0xf0>)
 80009f4:	f001 fc41 	bl	800227a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _12V_SEL_Pin MAIN_SW_Pin RPI_OFF_Pin LED_Pin */
#if defined(GPIO)
  GPIO_InitStruct.Pin = _12V_SEL_Pin|MAIN_SW_Pin|RPI_OFF_Pin|LED_Pin|PWR_LED_Pin;
#else
  GPIO_InitStruct.Pin = _12V_SEL_Pin|MAIN_SW_Pin|RPI_OFF_Pin|LED_Pin;
 80009f8:	f246 2304 	movw	r3, #25092	; 0x6204
 80009fc:	613b      	str	r3, [r7, #16]
#endif

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2302      	movs	r3, #2
 8000a08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0a:	f107 0310 	add.w	r3, r7, #16
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4817      	ldr	r0, [pc, #92]	; (8000a70 <MX_GPIO_Init+0xec>)
 8000a12:	f001 fa97 	bl	8001f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PS_PG_Pin RPI_FB_Pin But_ONOFF_Pin SMBALERT_Pin */
  GPIO_InitStruct.Pin = PS_PG_Pin|RPI_FB_Pin|But_ONOFF_Pin|SMBALERT_Pin;
 8000a16:	f249 0330 	movw	r3, #36912	; 0x9030
 8000a1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0310 	add.w	r3, r7, #16
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4811      	ldr	r0, [pc, #68]	; (8000a70 <MX_GPIO_Init+0xec>)
 8000a2c:	f001 fa8a 	bl	8001f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzz_Pin PS_ONOFF_Pin _5V_SEL_Pin */
#if defined(GPIO)
  GPIO_InitStruct.Pin = Buzz_Pin|PS_ONOFF_Pin|_5V_SEL_Pin|STAT_LED_Pin;
#else
  GPIO_InitStruct.Pin = Buzz_Pin|PS_ONOFF_Pin|_5V_SEL_Pin;
 8000a30:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000a34:	613b      	str	r3, [r7, #16]
#endif

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f107 0310 	add.w	r3, r7, #16
 8000a46:	4619      	mov	r1, r3
 8000a48:	480a      	ldr	r0, [pc, #40]	; (8000a74 <MX_GPIO_Init+0xf0>)
 8000a4a:	f001 fa7b 	bl	8001f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_Pin */
  GPIO_InitStruct.Pin = TP_Pin;
 8000a4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a54:	2303      	movs	r3, #3
 8000a56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TP_GPIO_Port, &GPIO_InitStruct);
 8000a58:	f107 0310 	add.w	r3, r7, #16
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4804      	ldr	r0, [pc, #16]	; (8000a70 <MX_GPIO_Init+0xec>)
 8000a60:	f001 fa70 	bl	8001f44 <HAL_GPIO_Init>

}
 8000a64:	bf00      	nop
 8000a66:	3720      	adds	r7, #32
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40010c00 	.word	0x40010c00
 8000a74:	40010800 	.word	0x40010800

08000a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7c:	b672      	cpsid	i
}
 8000a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <Error_Handler+0x8>
	...

08000a84 <PWM_Init_Timers>:
   0, 1, 2, 3, 4, 5, 7, 9, 12, 15, 18, 22, 27, 32, 38, 44, 51, 58,
   67, 76, 86, 96, 108, 120, 134, 148, 163, 180, 197, 216, 235, 255 };


void PWM_Init_Timers()
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4804      	ldr	r0, [pc, #16]	; (8000a9c <PWM_Init_Timers+0x18>)
 8000a8c:	f002 fb74 	bl	8003178 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000a90:	2104      	movs	r1, #4
 8000a92:	4802      	ldr	r0, [pc, #8]	; (8000a9c <PWM_Init_Timers+0x18>)
 8000a94:	f002 fb70 	bl	8003178 <HAL_TIM_PWM_Start>
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	200004a0 	.word	0x200004a0

08000aa0 <setPwrLed>:

void setPwrLed(uint8_t bri)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, bri_corr[bri]);
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <setPwrLed+0x20>)
 8000aae:	5cd2      	ldrb	r2, [r2, r3]
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <setPwrLed+0x24>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr
 8000ac0:	0800532c 	.word	0x0800532c
 8000ac4:	200004a0 	.word	0x200004a0

08000ac8 <setStatLed>:

void setStatLed(uint8_t bri)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, bri_corr[bri]);
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <setStatLed+0x20>)
 8000ad6:	5cd2      	ldrb	r2, [r2, r3]
 8000ad8:	4b04      	ldr	r3, [pc, #16]	; (8000aec <setStatLed+0x24>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	0800532c 	.word	0x0800532c
 8000aec:	200004a0 	.word	0x200004a0

08000af0 <ledSweepPwr>:

void ledSweepPwr(uint16_t spd, uint16_t cnt, uint16_t wait)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	80fb      	strh	r3, [r7, #6]
 8000afa:	460b      	mov	r3, r1
 8000afc:	80bb      	strh	r3, [r7, #4]
 8000afe:	4613      	mov	r3, r2
 8000b00:	807b      	strh	r3, [r7, #2]
    led_tim_pwr = spd;
 8000b02:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <ledSweepPwr+0x30>)
 8000b04:	88fb      	ldrh	r3, [r7, #6]
 8000b06:	8013      	strh	r3, [r2, #0]
    led_cycles_pwr = cnt | (wait<<16);
 8000b08:	88ba      	ldrh	r2, [r7, #4]
 8000b0a:	887b      	ldrh	r3, [r7, #2]
 8000b0c:	041b      	lsls	r3, r3, #16
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <ledSweepPwr+0x34>)
 8000b14:	601a      	str	r2, [r3, #0]
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	200004f0 	.word	0x200004f0
 8000b24:	200004ec 	.word	0x200004ec

08000b28 <ledSweepStat>:

void ledSweepStat(uint16_t spd, uint16_t cnt, uint16_t wait)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	80fb      	strh	r3, [r7, #6]
 8000b32:	460b      	mov	r3, r1
 8000b34:	80bb      	strh	r3, [r7, #4]
 8000b36:	4613      	mov	r3, r2
 8000b38:	807b      	strh	r3, [r7, #2]
    led_tim_stat = spd;
 8000b3a:	4a07      	ldr	r2, [pc, #28]	; (8000b58 <ledSweepStat+0x30>)
 8000b3c:	88fb      	ldrh	r3, [r7, #6]
 8000b3e:	8013      	strh	r3, [r2, #0]
    led_cycles_stat = cnt | (wait<<16);
 8000b40:	88ba      	ldrh	r2, [r7, #4]
 8000b42:	887b      	ldrh	r3, [r7, #2]
 8000b44:	041b      	lsls	r3, r3, #16
 8000b46:	4313      	orrs	r3, r2
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <ledSweepStat+0x34>)
 8000b4c:	601a      	str	r2, [r3, #0]
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr
 8000b58:	200004f2 	.word	0x200004f2
 8000b5c:	200004f4 	.word	0x200004f4

08000b60 <Buzz>:

void Buzz(uint32_t tim)   // w ms
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
   buzzer_time = tim;
 8000b68:	4a06      	ldr	r2, [pc, #24]	; (8000b84 <Buzz+0x24>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6013      	str	r3, [r2, #0]
   BUZZ_ON();
 8000b6e:	2201      	movs	r2, #1
 8000b70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b74:	4804      	ldr	r0, [pc, #16]	; (8000b88 <Buzz+0x28>)
 8000b76:	f001 fb80 	bl	800227a <HAL_GPIO_WritePin>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200004e8 	.word	0x200004e8
 8000b88:	40010800 	.word	0x40010800

08000b8c <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
	static uint32_t ledswppwr, ledlevpwr, ledswpstat, ledlevstat;

     if(buzzer_time) { if(--buzzer_time == 0) BUZZ_OFF(); }
 8000b90:	4b5c      	ldr	r3, [pc, #368]	; (8000d04 <HAL_SYSTICK_Callback+0x178>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d00c      	beq.n	8000bb2 <HAL_SYSTICK_Callback+0x26>
 8000b98:	4b5a      	ldr	r3, [pc, #360]	; (8000d04 <HAL_SYSTICK_Callback+0x178>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	4a59      	ldr	r2, [pc, #356]	; (8000d04 <HAL_SYSTICK_Callback+0x178>)
 8000ba0:	6013      	str	r3, [r2, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d105      	bne.n	8000bb2 <HAL_SYSTICK_Callback+0x26>
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bac:	4856      	ldr	r0, [pc, #344]	; (8000d08 <HAL_SYSTICK_Callback+0x17c>)
 8000bae:	f001 fb64 	bl	800227a <HAL_GPIO_WritePin>

     if(led_tim_pwr && ++ledswppwr >= led_tim_pwr)
 8000bb2:	4b56      	ldr	r3, [pc, #344]	; (8000d0c <HAL_SYSTICK_Callback+0x180>)
 8000bb4:	881b      	ldrh	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d044      	beq.n	8000c44 <HAL_SYSTICK_Callback+0xb8>
 8000bba:	4b55      	ldr	r3, [pc, #340]	; (8000d10 <HAL_SYSTICK_Callback+0x184>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	4a53      	ldr	r2, [pc, #332]	; (8000d10 <HAL_SYSTICK_Callback+0x184>)
 8000bc2:	6013      	str	r3, [r2, #0]
 8000bc4:	4b52      	ldr	r3, [pc, #328]	; (8000d10 <HAL_SYSTICK_Callback+0x184>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a50      	ldr	r2, [pc, #320]	; (8000d0c <HAL_SYSTICK_Callback+0x180>)
 8000bca:	8812      	ldrh	r2, [r2, #0]
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d339      	bcc.n	8000c44 <HAL_SYSTICK_Callback+0xb8>
     {
         ledswppwr = 0;
 8000bd0:	4b4f      	ldr	r3, [pc, #316]	; (8000d10 <HAL_SYSTICK_Callback+0x184>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
         if(++ledlevpwr >= 64 + (led_cycles_pwr>>16))
 8000bd6:	4b4f      	ldr	r3, [pc, #316]	; (8000d14 <HAL_SYSTICK_Callback+0x188>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	4a4d      	ldr	r2, [pc, #308]	; (8000d14 <HAL_SYSTICK_Callback+0x188>)
 8000bde:	6013      	str	r3, [r2, #0]
 8000be0:	4b4c      	ldr	r3, [pc, #304]	; (8000d14 <HAL_SYSTICK_Callback+0x188>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b4c      	ldr	r3, [pc, #304]	; (8000d18 <HAL_SYSTICK_Callback+0x18c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	0c1b      	lsrs	r3, r3, #16
 8000bea:	3340      	adds	r3, #64	; 0x40
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d30f      	bcc.n	8000c10 <HAL_SYSTICK_Callback+0x84>
         {
             ledlevpwr = 0;
 8000bf0:	4b48      	ldr	r3, [pc, #288]	; (8000d14 <HAL_SYSTICK_Callback+0x188>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
             led_cycles_pwr--;
 8000bf6:	4b48      	ldr	r3, [pc, #288]	; (8000d18 <HAL_SYSTICK_Callback+0x18c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	4a46      	ldr	r2, [pc, #280]	; (8000d18 <HAL_SYSTICK_Callback+0x18c>)
 8000bfe:	6013      	str	r3, [r2, #0]
             if((led_cycles_pwr & 0xFFFF) == 0) led_tim_pwr = 0;
 8000c00:	4b45      	ldr	r3, [pc, #276]	; (8000d18 <HAL_SYSTICK_Callback+0x18c>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d102      	bne.n	8000c10 <HAL_SYSTICK_Callback+0x84>
 8000c0a:	4b40      	ldr	r3, [pc, #256]	; (8000d0c <HAL_SYSTICK_Callback+0x180>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	801a      	strh	r2, [r3, #0]
         }
         if(ledlevpwr>=64) setPwrLed(0); else setPwrLed((ledlevpwr<32) ? ledlevpwr : 63-ledlevpwr);
 8000c10:	4b40      	ldr	r3, [pc, #256]	; (8000d14 <HAL_SYSTICK_Callback+0x188>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b3f      	cmp	r3, #63	; 0x3f
 8000c16:	d903      	bls.n	8000c20 <HAL_SYSTICK_Callback+0x94>
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff ff41 	bl	8000aa0 <setPwrLed>
 8000c1e:	e01b      	b.n	8000c58 <HAL_SYSTICK_Callback+0xcc>
 8000c20:	4b3c      	ldr	r3, [pc, #240]	; (8000d14 <HAL_SYSTICK_Callback+0x188>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b1f      	cmp	r3, #31
 8000c26:	d906      	bls.n	8000c36 <HAL_SYSTICK_Callback+0xaa>
 8000c28:	4b3a      	ldr	r3, [pc, #232]	; (8000d14 <HAL_SYSTICK_Callback+0x188>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	e002      	b.n	8000c3c <HAL_SYSTICK_Callback+0xb0>
 8000c36:	4b37      	ldr	r3, [pc, #220]	; (8000d14 <HAL_SYSTICK_Callback+0x188>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff2f 	bl	8000aa0 <setPwrLed>
 8000c42:	e009      	b.n	8000c58 <HAL_SYSTICK_Callback+0xcc>
     } else if(led_tim_pwr == 0) {ledswppwr=0; ledlevpwr=0;}
 8000c44:	4b31      	ldr	r3, [pc, #196]	; (8000d0c <HAL_SYSTICK_Callback+0x180>)
 8000c46:	881b      	ldrh	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d105      	bne.n	8000c58 <HAL_SYSTICK_Callback+0xcc>
 8000c4c:	4b30      	ldr	r3, [pc, #192]	; (8000d10 <HAL_SYSTICK_Callback+0x184>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	4b30      	ldr	r3, [pc, #192]	; (8000d14 <HAL_SYSTICK_Callback+0x188>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]

     if(led_tim_stat && ++ledswpstat >= led_tim_stat)
 8000c58:	4b30      	ldr	r3, [pc, #192]	; (8000d1c <HAL_SYSTICK_Callback+0x190>)
 8000c5a:	881b      	ldrh	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d044      	beq.n	8000cea <HAL_SYSTICK_Callback+0x15e>
 8000c60:	4b2f      	ldr	r3, [pc, #188]	; (8000d20 <HAL_SYSTICK_Callback+0x194>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	3301      	adds	r3, #1
 8000c66:	4a2e      	ldr	r2, [pc, #184]	; (8000d20 <HAL_SYSTICK_Callback+0x194>)
 8000c68:	6013      	str	r3, [r2, #0]
 8000c6a:	4b2d      	ldr	r3, [pc, #180]	; (8000d20 <HAL_SYSTICK_Callback+0x194>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a2b      	ldr	r2, [pc, #172]	; (8000d1c <HAL_SYSTICK_Callback+0x190>)
 8000c70:	8812      	ldrh	r2, [r2, #0]
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d339      	bcc.n	8000cea <HAL_SYSTICK_Callback+0x15e>
     {
         ledswpstat = 0;
 8000c76:	4b2a      	ldr	r3, [pc, #168]	; (8000d20 <HAL_SYSTICK_Callback+0x194>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
         if(++ledlevstat >= 64 + (led_cycles_stat>>16))
 8000c7c:	4b29      	ldr	r3, [pc, #164]	; (8000d24 <HAL_SYSTICK_Callback+0x198>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	3301      	adds	r3, #1
 8000c82:	4a28      	ldr	r2, [pc, #160]	; (8000d24 <HAL_SYSTICK_Callback+0x198>)
 8000c84:	6013      	str	r3, [r2, #0]
 8000c86:	4b27      	ldr	r3, [pc, #156]	; (8000d24 <HAL_SYSTICK_Callback+0x198>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	4b27      	ldr	r3, [pc, #156]	; (8000d28 <HAL_SYSTICK_Callback+0x19c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	0c1b      	lsrs	r3, r3, #16
 8000c90:	3340      	adds	r3, #64	; 0x40
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d30f      	bcc.n	8000cb6 <HAL_SYSTICK_Callback+0x12a>
         {
             ledlevstat = 0;
 8000c96:	4b23      	ldr	r3, [pc, #140]	; (8000d24 <HAL_SYSTICK_Callback+0x198>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
             led_cycles_stat--;
 8000c9c:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <HAL_SYSTICK_Callback+0x19c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	4a21      	ldr	r2, [pc, #132]	; (8000d28 <HAL_SYSTICK_Callback+0x19c>)
 8000ca4:	6013      	str	r3, [r2, #0]
             if((led_cycles_stat & 0xFFFF) == 0) led_tim_stat = 0;
 8000ca6:	4b20      	ldr	r3, [pc, #128]	; (8000d28 <HAL_SYSTICK_Callback+0x19c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d102      	bne.n	8000cb6 <HAL_SYSTICK_Callback+0x12a>
 8000cb0:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <HAL_SYSTICK_Callback+0x190>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	801a      	strh	r2, [r3, #0]
         }
         if(ledlevstat>=64) setStatLed(0); else setStatLed((ledlevstat<32) ? ledlevstat : 63-ledlevstat);
 8000cb6:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <HAL_SYSTICK_Callback+0x198>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2b3f      	cmp	r3, #63	; 0x3f
 8000cbc:	d903      	bls.n	8000cc6 <HAL_SYSTICK_Callback+0x13a>
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f7ff ff02 	bl	8000ac8 <setStatLed>
 8000cc4:	e01c      	b.n	8000d00 <HAL_SYSTICK_Callback+0x174>
 8000cc6:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <HAL_SYSTICK_Callback+0x198>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b1f      	cmp	r3, #31
 8000ccc:	d906      	bls.n	8000cdc <HAL_SYSTICK_Callback+0x150>
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <HAL_SYSTICK_Callback+0x198>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	e002      	b.n	8000ce2 <HAL_SYSTICK_Callback+0x156>
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <HAL_SYSTICK_Callback+0x198>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fef0 	bl	8000ac8 <setStatLed>
 8000ce8:	e00a      	b.n	8000d00 <HAL_SYSTICK_Callback+0x174>
     } else if(led_tim_stat == 0) {ledswpstat=0; ledlevstat=0;}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <HAL_SYSTICK_Callback+0x190>)
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d106      	bne.n	8000d00 <HAL_SYSTICK_Callback+0x174>
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <HAL_SYSTICK_Callback+0x194>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_SYSTICK_Callback+0x198>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
}
 8000cfe:	e7ff      	b.n	8000d00 <HAL_SYSTICK_Callback+0x174>
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	200004e8 	.word	0x200004e8
 8000d08:	40010800 	.word	0x40010800
 8000d0c:	200004f0 	.word	0x200004f0
 8000d10:	20000090 	.word	0x20000090
 8000d14:	20000094 	.word	0x20000094
 8000d18:	200004ec 	.word	0x200004ec
 8000d1c:	200004f2 	.word	0x200004f2
 8000d20:	20000098 	.word	0x20000098
 8000d24:	2000009c 	.word	0x2000009c
 8000d28:	200004f4 	.word	0x200004f4

08000d2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d32:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <HAL_MspInit+0x6c>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	4a18      	ldr	r2, [pc, #96]	; (8000d98 <HAL_MspInit+0x6c>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6193      	str	r3, [r2, #24]
 8000d3e:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <HAL_MspInit+0x6c>)
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <HAL_MspInit+0x6c>)
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <HAL_MspInit+0x6c>)
 8000d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d54:	61d3      	str	r3, [r2, #28]
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <HAL_MspInit+0x6c>)
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	2005      	movs	r0, #5
 8000d68:	f000 fe9f 	bl	8001aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000d6c:	2005      	movs	r0, #5
 8000d6e:	f000 feb8 	bl	8001ae2 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <HAL_MspInit+0x70>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <HAL_MspInit+0x70>)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40010000 	.word	0x40010000

08000da0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	; 0x28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0318 	add.w	r3, r7, #24
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a33      	ldr	r2, [pc, #204]	; (8000e88 <HAL_ADC_MspInit+0xe8>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d15f      	bne.n	8000e80 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dc0:	4b32      	ldr	r3, [pc, #200]	; (8000e8c <HAL_ADC_MspInit+0xec>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	4a31      	ldr	r2, [pc, #196]	; (8000e8c <HAL_ADC_MspInit+0xec>)
 8000dc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dca:	6193      	str	r3, [r2, #24]
 8000dcc:	4b2f      	ldr	r3, [pc, #188]	; (8000e8c <HAL_ADC_MspInit+0xec>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd8:	4b2c      	ldr	r3, [pc, #176]	; (8000e8c <HAL_ADC_MspInit+0xec>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a2b      	ldr	r2, [pc, #172]	; (8000e8c <HAL_ADC_MspInit+0xec>)
 8000dde:	f043 0304 	orr.w	r3, r3, #4
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b29      	ldr	r3, [pc, #164]	; (8000e8c <HAL_ADC_MspInit+0xec>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f003 0304 	and.w	r3, r3, #4
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df0:	4b26      	ldr	r3, [pc, #152]	; (8000e8c <HAL_ADC_MspInit+0xec>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a25      	ldr	r2, [pc, #148]	; (8000e8c <HAL_ADC_MspInit+0xec>)
 8000df6:	f043 0308 	orr.w	r3, r3, #8
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b23      	ldr	r3, [pc, #140]	; (8000e8c <HAL_ADC_MspInit+0xec>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f003 0308 	and.w	r3, r3, #8
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = HDD_5V_CURR_Pin|HDD_12V_CURR_Pin|SYS_5V_CURR_Pin|SYS_12V_CURR_Pin
 8000e08:	23fe      	movs	r3, #254	; 0xfe
 8000e0a:	61bb      	str	r3, [r7, #24]
                          |SYS_5V_V_Pin|SYS_12V_V_Pin|DC_12V_V_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	f107 0318 	add.w	r3, r7, #24
 8000e14:	4619      	mov	r1, r3
 8000e16:	481e      	ldr	r0, [pc, #120]	; (8000e90 <HAL_ADC_MspInit+0xf0>)
 8000e18:	f001 f894 	bl	8001f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DC_5V_V_Pin|PS_5V_stb_V_Pin;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e20:	2303      	movs	r3, #3
 8000e22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e24:	f107 0318 	add.w	r3, r7, #24
 8000e28:	4619      	mov	r1, r3
 8000e2a:	481a      	ldr	r0, [pc, #104]	; (8000e94 <HAL_ADC_MspInit+0xf4>)
 8000e2c:	f001 f88a 	bl	8001f44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e30:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <HAL_ADC_MspInit+0xf8>)
 8000e32:	4a1a      	ldr	r2, [pc, #104]	; (8000e9c <HAL_ADC_MspInit+0xfc>)
 8000e34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e36:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <HAL_ADC_MspInit+0xf8>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e3c:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <HAL_ADC_MspInit+0xf8>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <HAL_ADC_MspInit+0xf8>)
 8000e44:	2280      	movs	r2, #128	; 0x80
 8000e46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e48:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <HAL_ADC_MspInit+0xf8>)
 8000e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <HAL_ADC_MspInit+0xf8>)
 8000e52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e58:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <HAL_ADC_MspInit+0xf8>)
 8000e5a:	2220      	movs	r2, #32
 8000e5c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <HAL_ADC_MspInit+0xf8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e64:	480c      	ldr	r0, [pc, #48]	; (8000e98 <HAL_ADC_MspInit+0xf8>)
 8000e66:	f000 fe5d 	bl	8001b24 <HAL_DMA_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000e70:	f7ff fe02 	bl	8000a78 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a08      	ldr	r2, [pc, #32]	; (8000e98 <HAL_ADC_MspInit+0xf8>)
 8000e78:	621a      	str	r2, [r3, #32]
 8000e7a:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <HAL_ADC_MspInit+0xf8>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e80:	bf00      	nop
 8000e82:	3728      	adds	r7, #40	; 0x28
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40012400 	.word	0x40012400
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40010800 	.word	0x40010800
 8000e94:	40010c00 	.word	0x40010c00
 8000e98:	2000045c 	.word	0x2000045c
 8000e9c:	40020008 	.word	0x40020008

08000ea0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b088      	sub	sp, #32
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a15      	ldr	r2, [pc, #84]	; (8000f10 <HAL_I2C_MspInit+0x70>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d123      	bne.n	8000f08 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <HAL_I2C_MspInit+0x74>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4a13      	ldr	r2, [pc, #76]	; (8000f14 <HAL_I2C_MspInit+0x74>)
 8000ec6:	f043 0308 	orr.w	r3, r3, #8
 8000eca:	6193      	str	r3, [r2, #24]
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <HAL_I2C_MspInit+0x74>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f003 0308 	and.w	r3, r3, #8
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ed8:	23c0      	movs	r3, #192	; 0xc0
 8000eda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000edc:	2312      	movs	r3, #18
 8000ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	4619      	mov	r1, r3
 8000eea:	480b      	ldr	r0, [pc, #44]	; (8000f18 <HAL_I2C_MspInit+0x78>)
 8000eec:	f001 f82a 	bl	8001f44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <HAL_I2C_MspInit+0x74>)
 8000ef2:	69db      	ldr	r3, [r3, #28]
 8000ef4:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <HAL_I2C_MspInit+0x74>)
 8000ef6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000efa:	61d3      	str	r3, [r2, #28]
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <HAL_I2C_MspInit+0x74>)
 8000efe:	69db      	ldr	r3, [r3, #28]
 8000f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f08:	bf00      	nop
 8000f0a:	3720      	adds	r7, #32
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40005400 	.word	0x40005400
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40010c00 	.word	0x40010c00

08000f1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f2c:	d113      	bne.n	8000f56 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <HAL_TIM_Base_MspInit+0x44>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <HAL_TIM_Base_MspInit+0x44>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	61d3      	str	r3, [r2, #28]
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <HAL_TIM_Base_MspInit+0x44>)
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	201c      	movs	r0, #28
 8000f4c:	f000 fdad 	bl	8001aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f50:	201c      	movs	r0, #28
 8000f52:	f000 fdc6 	bl	8001ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40021000 	.word	0x40021000

08000f64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f82:	d142      	bne.n	800100a <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	4b23      	ldr	r3, [pc, #140]	; (8001014 <HAL_TIM_MspPostInit+0xb0>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	4a22      	ldr	r2, [pc, #136]	; (8001014 <HAL_TIM_MspPostInit+0xb0>)
 8000f8a:	f043 0304 	orr.w	r3, r3, #4
 8000f8e:	6193      	str	r3, [r2, #24]
 8000f90:	4b20      	ldr	r3, [pc, #128]	; (8001014 <HAL_TIM_MspPostInit+0xb0>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	f003 0304 	and.w	r3, r3, #4
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9c:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <HAL_TIM_MspPostInit+0xb0>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	4a1c      	ldr	r2, [pc, #112]	; (8001014 <HAL_TIM_MspPostInit+0xb0>)
 8000fa2:	f043 0308 	orr.w	r3, r3, #8
 8000fa6:	6193      	str	r3, [r2, #24]
 8000fa8:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <HAL_TIM_MspPostInit+0xb0>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	f003 0308 	and.w	r3, r3, #8
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = STAT_LED_Pin;
 8000fb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(STAT_LED_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4813      	ldr	r0, [pc, #76]	; (8001018 <HAL_TIM_MspPostInit+0xb4>)
 8000fca:	f000 ffbb 	bl	8001f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWR_LED_Pin;
 8000fce:	2308      	movs	r3, #8
 8000fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PWR_LED_GPIO_Port, &GPIO_InitStruct);
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480e      	ldr	r0, [pc, #56]	; (800101c <HAL_TIM_MspPostInit+0xb8>)
 8000fe2:	f000 ffaf 	bl	8001f44 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <HAL_TIM_MspPostInit+0xbc>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
 8000fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
 8001004:	4a06      	ldr	r2, [pc, #24]	; (8001020 <HAL_TIM_MspPostInit+0xbc>)
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800100a:	bf00      	nop
 800100c:	3728      	adds	r7, #40	; 0x28
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000
 8001018:	40010800 	.word	0x40010800
 800101c:	40010c00 	.word	0x40010c00
 8001020:	40010000 	.word	0x40010000

08001024 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	; 0x28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 0318 	add.w	r3, r7, #24
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a53      	ldr	r2, [pc, #332]	; (800118c <HAL_UART_MspInit+0x168>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d13a      	bne.n	80010ba <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001044:	4b52      	ldr	r3, [pc, #328]	; (8001190 <HAL_UART_MspInit+0x16c>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	4a51      	ldr	r2, [pc, #324]	; (8001190 <HAL_UART_MspInit+0x16c>)
 800104a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800104e:	6193      	str	r3, [r2, #24]
 8001050:	4b4f      	ldr	r3, [pc, #316]	; (8001190 <HAL_UART_MspInit+0x16c>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105c:	4b4c      	ldr	r3, [pc, #304]	; (8001190 <HAL_UART_MspInit+0x16c>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a4b      	ldr	r2, [pc, #300]	; (8001190 <HAL_UART_MspInit+0x16c>)
 8001062:	f043 0304 	orr.w	r3, r3, #4
 8001066:	6193      	str	r3, [r2, #24]
 8001068:	4b49      	ldr	r3, [pc, #292]	; (8001190 <HAL_UART_MspInit+0x16c>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001074:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800107e:	2303      	movs	r3, #3
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001082:	f107 0318 	add.w	r3, r7, #24
 8001086:	4619      	mov	r1, r3
 8001088:	4842      	ldr	r0, [pc, #264]	; (8001194 <HAL_UART_MspInit+0x170>)
 800108a:	f000 ff5b 	bl	8001f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800108e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109c:	f107 0318 	add.w	r3, r7, #24
 80010a0:	4619      	mov	r1, r3
 80010a2:	483c      	ldr	r0, [pc, #240]	; (8001194 <HAL_UART_MspInit+0x170>)
 80010a4:	f000 ff4e 	bl	8001f44 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2100      	movs	r1, #0
 80010ac:	2025      	movs	r0, #37	; 0x25
 80010ae:	f000 fcfc 	bl	8001aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010b2:	2025      	movs	r0, #37	; 0x25
 80010b4:	f000 fd15 	bl	8001ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010b8:	e064      	b.n	8001184 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a36      	ldr	r2, [pc, #216]	; (8001198 <HAL_UART_MspInit+0x174>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d15f      	bne.n	8001184 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010c4:	4b32      	ldr	r3, [pc, #200]	; (8001190 <HAL_UART_MspInit+0x16c>)
 80010c6:	69db      	ldr	r3, [r3, #28]
 80010c8:	4a31      	ldr	r2, [pc, #196]	; (8001190 <HAL_UART_MspInit+0x16c>)
 80010ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ce:	61d3      	str	r3, [r2, #28]
 80010d0:	4b2f      	ldr	r3, [pc, #188]	; (8001190 <HAL_UART_MspInit+0x16c>)
 80010d2:	69db      	ldr	r3, [r3, #28]
 80010d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010dc:	4b2c      	ldr	r3, [pc, #176]	; (8001190 <HAL_UART_MspInit+0x16c>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	4a2b      	ldr	r2, [pc, #172]	; (8001190 <HAL_UART_MspInit+0x16c>)
 80010e2:	f043 0308 	orr.w	r3, r3, #8
 80010e6:	6193      	str	r3, [r2, #24]
 80010e8:	4b29      	ldr	r3, [pc, #164]	; (8001190 <HAL_UART_MspInit+0x16c>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	f003 0308 	and.w	r3, r3, #8
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010fe:	2303      	movs	r3, #3
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001102:	f107 0318 	add.w	r3, r7, #24
 8001106:	4619      	mov	r1, r3
 8001108:	4824      	ldr	r0, [pc, #144]	; (800119c <HAL_UART_MspInit+0x178>)
 800110a:	f000 ff1b 	bl	8001f44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800110e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111c:	f107 0318 	add.w	r3, r7, #24
 8001120:	4619      	mov	r1, r3
 8001122:	481e      	ldr	r0, [pc, #120]	; (800119c <HAL_UART_MspInit+0x178>)
 8001124:	f000 ff0e 	bl	8001f44 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8001128:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <HAL_UART_MspInit+0x17c>)
 800112a:	4a1e      	ldr	r2, [pc, #120]	; (80011a4 <HAL_UART_MspInit+0x180>)
 800112c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800112e:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <HAL_UART_MspInit+0x17c>)
 8001130:	2210      	movs	r2, #16
 8001132:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001134:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <HAL_UART_MspInit+0x17c>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800113a:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <HAL_UART_MspInit+0x17c>)
 800113c:	2280      	movs	r2, #128	; 0x80
 800113e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001140:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <HAL_UART_MspInit+0x17c>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001146:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <HAL_UART_MspInit+0x17c>)
 8001148:	2200      	movs	r2, #0
 800114a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <HAL_UART_MspInit+0x17c>)
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <HAL_UART_MspInit+0x17c>)
 8001154:	2200      	movs	r2, #0
 8001156:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001158:	4811      	ldr	r0, [pc, #68]	; (80011a0 <HAL_UART_MspInit+0x17c>)
 800115a:	f000 fce3 	bl	8001b24 <HAL_DMA_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_UART_MspInit+0x144>
      Error_Handler();
 8001164:	f7ff fc88 	bl	8000a78 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a0d      	ldr	r2, [pc, #52]	; (80011a0 <HAL_UART_MspInit+0x17c>)
 800116c:	635a      	str	r2, [r3, #52]	; 0x34
 800116e:	4a0c      	ldr	r2, [pc, #48]	; (80011a0 <HAL_UART_MspInit+0x17c>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001174:	2200      	movs	r2, #0
 8001176:	2100      	movs	r1, #0
 8001178:	2027      	movs	r0, #39	; 0x27
 800117a:	f000 fc96 	bl	8001aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800117e:	2027      	movs	r0, #39	; 0x27
 8001180:	f000 fcaf 	bl	8001ae2 <HAL_NVIC_EnableIRQ>
}
 8001184:	bf00      	nop
 8001186:	3728      	adds	r7, #40	; 0x28
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40013800 	.word	0x40013800
 8001190:	40021000 	.word	0x40021000
 8001194:	40010800 	.word	0x40010800
 8001198:	40004800 	.word	0x40004800
 800119c:	40010c00 	.word	0x40010c00
 80011a0:	200003a4 	.word	0x200003a4
 80011a4:	4002001c 	.word	0x4002001c

080011a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <NMI_Handler+0x4>

080011ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b2:	e7fe      	b.n	80011b2 <HardFault_Handler+0x4>

080011b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <MemManage_Handler+0x4>

080011ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011be:	e7fe      	b.n	80011be <BusFault_Handler+0x4>

080011c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <UsageFault_Handler+0x4>

080011c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr

080011d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr

080011de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr

080011ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ee:	f000 f933 	bl	8001458 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80011f2:	f000 fc90 	bl	8001b16 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}

080011fa <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
	...

08001208 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <DMA1_Channel1_IRQHandler+0x10>)
 800120e:	f000 fd93 	bl	8001d38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2000045c 	.word	0x2000045c

0800121c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001220:	4802      	ldr	r0, [pc, #8]	; (800122c <DMA1_Channel2_IRQHandler+0x10>)
 8001222:	f000 fd89 	bl	8001d38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200003a4 	.word	0x200003a4

08001230 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001234:	4802      	ldr	r0, [pc, #8]	; (8001240 <TIM2_IRQHandler+0x10>)
 8001236:	f002 f841 	bl	80032bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200004a0 	.word	0x200004a0

08001244 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <USART1_IRQHandler+0x10>)
 800124a:	f002 ff13 	bl	8004074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000418 	.word	0x20000418

08001258 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800125c:	4802      	ldr	r0, [pc, #8]	; (8001268 <USART3_IRQHandler+0x10>)
 800125e:	f002 ff09 	bl	8004074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000300 	.word	0x20000300

0800126c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	e00a      	b.n	8001294 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800127e:	f3af 8000 	nop.w
 8001282:	4601      	mov	r1, r0
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	1c5a      	adds	r2, r3, #1
 8001288:	60ba      	str	r2, [r7, #8]
 800128a:	b2ca      	uxtb	r2, r1
 800128c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	3301      	adds	r3, #1
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	697a      	ldr	r2, [r7, #20]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	429a      	cmp	r2, r3
 800129a:	dbf0      	blt.n	800127e <_read+0x12>
	}

return len;
 800129c:	687b      	ldr	r3, [r7, #4]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
	return -1;
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012cc:	605a      	str	r2, [r3, #4]
	return 0;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr

080012da <_isatty>:

int _isatty(int file)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
	return 1;
 80012e2:	2301      	movs	r3, #1
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr

080012ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b085      	sub	sp, #20
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
	return 0;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr
	...

08001308 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001310:	4a14      	ldr	r2, [pc, #80]	; (8001364 <_sbrk+0x5c>)
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <_sbrk+0x60>)
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800131c:	4b13      	ldr	r3, [pc, #76]	; (800136c <_sbrk+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d102      	bne.n	800132a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <_sbrk+0x64>)
 8001326:	4a12      	ldr	r2, [pc, #72]	; (8001370 <_sbrk+0x68>)
 8001328:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <_sbrk+0x64>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	429a      	cmp	r2, r3
 8001336:	d207      	bcs.n	8001348 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001338:	f003 fabc 	bl	80048b4 <__errno>
 800133c:	4603      	mov	r3, r0
 800133e:	220c      	movs	r2, #12
 8001340:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
 8001346:	e009      	b.n	800135c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <_sbrk+0x64>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <_sbrk+0x64>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	4a05      	ldr	r2, [pc, #20]	; (800136c <_sbrk+0x64>)
 8001358:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800135a:	68fb      	ldr	r3, [r7, #12]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20005000 	.word	0x20005000
 8001368:	00000400 	.word	0x00000400
 800136c:	200000a0 	.word	0x200000a0
 8001370:	20000510 	.word	0x20000510

08001374 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001380:	480c      	ldr	r0, [pc, #48]	; (80013b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001382:	490d      	ldr	r1, [pc, #52]	; (80013b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001384:	4a0d      	ldr	r2, [pc, #52]	; (80013bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001388:	e002      	b.n	8001390 <LoopCopyDataInit>

0800138a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800138c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138e:	3304      	adds	r3, #4

08001390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001394:	d3f9      	bcc.n	800138a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001396:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001398:	4c0a      	ldr	r4, [pc, #40]	; (80013c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800139c:	e001      	b.n	80013a2 <LoopFillZerobss>

0800139e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a0:	3204      	adds	r2, #4

080013a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a4:	d3fb      	bcc.n	800139e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013a6:	f7ff ffe5 	bl	8001374 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013aa:	f003 fa89 	bl	80048c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ae:	f7ff f87d 	bl	80004ac <main>
  bx lr
 80013b2:	4770      	bx	lr
  ldr r0, =_sdata
 80013b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80013bc:	080053d0 	.word	0x080053d0
  ldr r2, =_sbss
 80013c0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80013c4:	2000050c 	.word	0x2000050c

080013c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013c8:	e7fe      	b.n	80013c8 <ADC1_2_IRQHandler>
	...

080013cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d0:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <HAL_Init+0x28>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a07      	ldr	r2, [pc, #28]	; (80013f4 <HAL_Init+0x28>)
 80013d6:	f043 0310 	orr.w	r3, r3, #16
 80013da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013dc:	2003      	movs	r0, #3
 80013de:	f000 fb59 	bl	8001a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e2:	2000      	movs	r0, #0
 80013e4:	f000 f808 	bl	80013f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e8:	f7ff fca0 	bl	8000d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40022000 	.word	0x40022000

080013f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_InitTick+0x54>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <HAL_InitTick+0x58>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001412:	fbb2 f3f3 	udiv	r3, r2, r3
 8001416:	4618      	mov	r0, r3
 8001418:	f000 fb71 	bl	8001afe <HAL_SYSTICK_Config>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e00e      	b.n	8001444 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b0f      	cmp	r3, #15
 800142a:	d80a      	bhi.n	8001442 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800142c:	2200      	movs	r2, #0
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	f000 fb39 	bl	8001aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001438:	4a06      	ldr	r2, [pc, #24]	; (8001454 <HAL_InitTick+0x5c>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	e000      	b.n	8001444 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000000 	.word	0x20000000
 8001450:	20000008 	.word	0x20000008
 8001454:	20000004 	.word	0x20000004

08001458 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_IncTick+0x1c>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	4b05      	ldr	r3, [pc, #20]	; (8001478 <HAL_IncTick+0x20>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4413      	add	r3, r2
 8001468:	4a03      	ldr	r2, [pc, #12]	; (8001478 <HAL_IncTick+0x20>)
 800146a:	6013      	str	r3, [r2, #0]
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr
 8001474:	20000008 	.word	0x20000008
 8001478:	200004f8 	.word	0x200004f8

0800147c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return uwTick;
 8001480:	4b02      	ldr	r3, [pc, #8]	; (800148c <HAL_GetTick+0x10>)
 8001482:	681b      	ldr	r3, [r3, #0]
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	200004f8 	.word	0x200004f8

08001490 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001498:	f7ff fff0 	bl	800147c <HAL_GetTick>
 800149c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a8:	d005      	beq.n	80014b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <HAL_Delay+0x44>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4413      	add	r3, r2
 80014b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014b6:	bf00      	nop
 80014b8:	f7ff ffe0 	bl	800147c <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d8f7      	bhi.n	80014b8 <HAL_Delay+0x28>
  {
  }
}
 80014c8:	bf00      	nop
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000008 	.word	0x20000008

080014d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014e0:	2300      	movs	r3, #0
 80014e2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e0be      	b.n	8001678 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001504:	2b00      	cmp	r3, #0
 8001506:	d109      	bne.n	800151c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff fc42 	bl	8000da0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 f9ab 	bl	8001878 <ADC_ConversionStop_Disable>
 8001522:	4603      	mov	r3, r0
 8001524:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152a:	f003 0310 	and.w	r3, r3, #16
 800152e:	2b00      	cmp	r3, #0
 8001530:	f040 8099 	bne.w	8001666 <HAL_ADC_Init+0x18e>
 8001534:	7dfb      	ldrb	r3, [r7, #23]
 8001536:	2b00      	cmp	r3, #0
 8001538:	f040 8095 	bne.w	8001666 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001540:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001544:	f023 0302 	bic.w	r3, r3, #2
 8001548:	f043 0202 	orr.w	r2, r3, #2
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001558:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	7b1b      	ldrb	r3, [r3, #12]
 800155e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001560:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	4313      	orrs	r3, r2
 8001566:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001570:	d003      	beq.n	800157a <HAL_ADC_Init+0xa2>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d102      	bne.n	8001580 <HAL_ADC_Init+0xa8>
 800157a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800157e:	e000      	b.n	8001582 <HAL_ADC_Init+0xaa>
 8001580:	2300      	movs	r3, #0
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	7d1b      	ldrb	r3, [r3, #20]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d119      	bne.n	80015c4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	7b1b      	ldrb	r3, [r3, #12]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d109      	bne.n	80015ac <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	3b01      	subs	r3, #1
 800159e:	035a      	lsls	r2, r3, #13
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	e00b      	b.n	80015c4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b0:	f043 0220 	orr.w	r2, r3, #32
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015bc:	f043 0201 	orr.w	r2, r3, #1
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	4b28      	ldr	r3, [pc, #160]	; (8001680 <HAL_ADC_Init+0x1a8>)
 80015e0:	4013      	ands	r3, r2
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	6812      	ldr	r2, [r2, #0]
 80015e6:	68b9      	ldr	r1, [r7, #8]
 80015e8:	430b      	orrs	r3, r1
 80015ea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015f4:	d003      	beq.n	80015fe <HAL_ADC_Init+0x126>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d104      	bne.n	8001608 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	3b01      	subs	r3, #1
 8001604:	051b      	lsls	r3, r3, #20
 8001606:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	430a      	orrs	r2, r1
 800161a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689a      	ldr	r2, [r3, #8]
 8001622:	4b18      	ldr	r3, [pc, #96]	; (8001684 <HAL_ADC_Init+0x1ac>)
 8001624:	4013      	ands	r3, r2
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	429a      	cmp	r2, r3
 800162a:	d10b      	bne.n	8001644 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001636:	f023 0303 	bic.w	r3, r3, #3
 800163a:	f043 0201 	orr.w	r2, r3, #1
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001642:	e018      	b.n	8001676 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001648:	f023 0312 	bic.w	r3, r3, #18
 800164c:	f043 0210 	orr.w	r2, r3, #16
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001658:	f043 0201 	orr.w	r2, r3, #1
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001664:	e007      	b.n	8001676 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166a:	f043 0210 	orr.w	r2, r3, #16
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001676:	7dfb      	ldrb	r3, [r7, #23]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	ffe1f7fd 	.word	0xffe1f7fd
 8001684:	ff1f0efe 	.word	0xff1f0efe

08001688 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001696:	2300      	movs	r3, #0
 8001698:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d101      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x20>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e0dc      	b.n	8001862 <HAL_ADC_ConfigChannel+0x1da>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b06      	cmp	r3, #6
 80016b6:	d81c      	bhi.n	80016f2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	3b05      	subs	r3, #5
 80016ca:	221f      	movs	r2, #31
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	4019      	ands	r1, r3
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	6818      	ldr	r0, [r3, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	4613      	mov	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	3b05      	subs	r3, #5
 80016e4:	fa00 f203 	lsl.w	r2, r0, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	635a      	str	r2, [r3, #52]	; 0x34
 80016f0:	e03c      	b.n	800176c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b0c      	cmp	r3, #12
 80016f8:	d81c      	bhi.n	8001734 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	3b23      	subs	r3, #35	; 0x23
 800170c:	221f      	movs	r2, #31
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	4019      	ands	r1, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	6818      	ldr	r0, [r3, #0]
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	3b23      	subs	r3, #35	; 0x23
 8001726:	fa00 f203 	lsl.w	r2, r0, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	631a      	str	r2, [r3, #48]	; 0x30
 8001732:	e01b      	b.n	800176c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	3b41      	subs	r3, #65	; 0x41
 8001746:	221f      	movs	r2, #31
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	4019      	ands	r1, r3
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	3b41      	subs	r3, #65	; 0x41
 8001760:	fa00 f203 	lsl.w	r2, r0, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b09      	cmp	r3, #9
 8001772:	d91c      	bls.n	80017ae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	68d9      	ldr	r1, [r3, #12]
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	4613      	mov	r3, r2
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	4413      	add	r3, r2
 8001784:	3b1e      	subs	r3, #30
 8001786:	2207      	movs	r2, #7
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	4019      	ands	r1, r3
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	6898      	ldr	r0, [r3, #8]
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4613      	mov	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4413      	add	r3, r2
 800179e:	3b1e      	subs	r3, #30
 80017a0:	fa00 f203 	lsl.w	r2, r0, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	60da      	str	r2, [r3, #12]
 80017ac:	e019      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6919      	ldr	r1, [r3, #16]
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	2207      	movs	r2, #7
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	4019      	ands	r1, r3
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	6898      	ldr	r0, [r3, #8]
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4613      	mov	r3, r2
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	4413      	add	r3, r2
 80017d6:	fa00 f203 	lsl.w	r2, r0, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	430a      	orrs	r2, r1
 80017e0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2b10      	cmp	r3, #16
 80017e8:	d003      	beq.n	80017f2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017ee:	2b11      	cmp	r3, #17
 80017f0:	d132      	bne.n	8001858 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a1d      	ldr	r2, [pc, #116]	; (800186c <HAL_ADC_ConfigChannel+0x1e4>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d125      	bne.n	8001848 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d126      	bne.n	8001858 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001818:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2b10      	cmp	r3, #16
 8001820:	d11a      	bne.n	8001858 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001822:	4b13      	ldr	r3, [pc, #76]	; (8001870 <HAL_ADC_ConfigChannel+0x1e8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a13      	ldr	r2, [pc, #76]	; (8001874 <HAL_ADC_ConfigChannel+0x1ec>)
 8001828:	fba2 2303 	umull	r2, r3, r2, r3
 800182c:	0c9a      	lsrs	r2, r3, #18
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001838:	e002      	b.n	8001840 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	3b01      	subs	r3, #1
 800183e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f9      	bne.n	800183a <HAL_ADC_ConfigChannel+0x1b2>
 8001846:	e007      	b.n	8001858 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184c:	f043 0220 	orr.w	r2, r3, #32
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001860:	7bfb      	ldrb	r3, [r7, #15]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	40012400 	.word	0x40012400
 8001870:	20000000 	.word	0x20000000
 8001874:	431bde83 	.word	0x431bde83

08001878 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b01      	cmp	r3, #1
 8001890:	d12e      	bne.n	80018f0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f022 0201 	bic.w	r2, r2, #1
 80018a0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018a2:	f7ff fdeb 	bl	800147c <HAL_GetTick>
 80018a6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018a8:	e01b      	b.n	80018e2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018aa:	f7ff fde7 	bl	800147c <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d914      	bls.n	80018e2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d10d      	bne.n	80018e2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ca:	f043 0210 	orr.w	r2, r3, #16
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d6:	f043 0201 	orr.w	r2, r3, #1
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e007      	b.n	80018f2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d0dc      	beq.n	80018aa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001918:	4013      	ands	r3, r2
 800191a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800192c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192e:	4a04      	ldr	r2, [pc, #16]	; (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	60d3      	str	r3, [r2, #12]
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <__NVIC_GetPriorityGrouping+0x18>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	0a1b      	lsrs	r3, r3, #8
 800194e:	f003 0307 	and.w	r3, r3, #7
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	2b00      	cmp	r3, #0
 8001970:	db0b      	blt.n	800198a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	f003 021f 	and.w	r2, r3, #31
 8001978:	4906      	ldr	r1, [pc, #24]	; (8001994 <__NVIC_EnableIRQ+0x34>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	095b      	lsrs	r3, r3, #5
 8001980:	2001      	movs	r0, #1
 8001982:	fa00 f202 	lsl.w	r2, r0, r2
 8001986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	e000e100 	.word	0xe000e100

08001998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	6039      	str	r1, [r7, #0]
 80019a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	db0a      	blt.n	80019c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	490c      	ldr	r1, [pc, #48]	; (80019e4 <__NVIC_SetPriority+0x4c>)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	0112      	lsls	r2, r2, #4
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	440b      	add	r3, r1
 80019bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c0:	e00a      	b.n	80019d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4908      	ldr	r1, [pc, #32]	; (80019e8 <__NVIC_SetPriority+0x50>)
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	3b04      	subs	r3, #4
 80019d0:	0112      	lsls	r2, r2, #4
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	440b      	add	r3, r1
 80019d6:	761a      	strb	r2, [r3, #24]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000e100 	.word	0xe000e100
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	; 0x24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f1c3 0307 	rsb	r3, r3, #7
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	bf28      	it	cs
 8001a0a:	2304      	movcs	r3, #4
 8001a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3304      	adds	r3, #4
 8001a12:	2b06      	cmp	r3, #6
 8001a14:	d902      	bls.n	8001a1c <NVIC_EncodePriority+0x30>
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3b03      	subs	r3, #3
 8001a1a:	e000      	b.n	8001a1e <NVIC_EncodePriority+0x32>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	f04f 32ff 	mov.w	r2, #4294967295
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	401a      	ands	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a34:	f04f 31ff 	mov.w	r1, #4294967295
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3e:	43d9      	mvns	r1, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	4313      	orrs	r3, r2
         );
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3724      	adds	r7, #36	; 0x24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr

08001a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a60:	d301      	bcc.n	8001a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a62:	2301      	movs	r3, #1
 8001a64:	e00f      	b.n	8001a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a66:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <SysTick_Config+0x40>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6e:	210f      	movs	r1, #15
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295
 8001a74:	f7ff ff90 	bl	8001998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <SysTick_Config+0x40>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7e:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <SysTick_Config+0x40>)
 8001a80:	2207      	movs	r2, #7
 8001a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	e000e010 	.word	0xe000e010

08001a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ff2d 	bl	80018fc <__NVIC_SetPriorityGrouping>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b086      	sub	sp, #24
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001abc:	f7ff ff42 	bl	8001944 <__NVIC_GetPriorityGrouping>
 8001ac0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	6978      	ldr	r0, [r7, #20]
 8001ac8:	f7ff ff90 	bl	80019ec <NVIC_EncodePriority>
 8001acc:	4602      	mov	r2, r0
 8001ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff5f 	bl	8001998 <__NVIC_SetPriority>
}
 8001ada:	bf00      	nop
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4603      	mov	r3, r0
 8001aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff35 	bl	8001960 <__NVIC_EnableIRQ>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff ffa2 	bl	8001a50 <SysTick_Config>
 8001b0c:	4603      	mov	r3, r0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001b1a:	f7ff f837 	bl	8000b8c <HAL_SYSTICK_Callback>
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e043      	b.n	8001bc2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	4b22      	ldr	r3, [pc, #136]	; (8001bcc <HAL_DMA_Init+0xa8>)
 8001b42:	4413      	add	r3, r2
 8001b44:	4a22      	ldr	r2, [pc, #136]	; (8001bd0 <HAL_DMA_Init+0xac>)
 8001b46:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4a:	091b      	lsrs	r3, r3, #4
 8001b4c:	009a      	lsls	r2, r3, #2
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a1f      	ldr	r2, [pc, #124]	; (8001bd4 <HAL_DMA_Init+0xb0>)
 8001b56:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b6e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001b72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3714      	adds	r7, #20
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr
 8001bcc:	bffdfff8 	.word	0xbffdfff8
 8001bd0:	cccccccd 	.word	0xcccccccd
 8001bd4:	40020000 	.word	0x40020000

08001bd8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d008      	beq.n	8001c00 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2204      	movs	r2, #4
 8001bf2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e020      	b.n	8001c42 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 020e 	bic.w	r2, r2, #14
 8001c0e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0201 	bic.w	r2, r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c28:	2101      	movs	r1, #1
 8001c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d005      	beq.n	8001c6e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2204      	movs	r2, #4
 8001c66:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	73fb      	strb	r3, [r7, #15]
 8001c6c:	e051      	b.n	8001d12 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 020e 	bic.w	r2, r2, #14
 8001c7c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0201 	bic.w	r2, r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a22      	ldr	r2, [pc, #136]	; (8001d1c <HAL_DMA_Abort_IT+0xd0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d029      	beq.n	8001cec <HAL_DMA_Abort_IT+0xa0>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a20      	ldr	r2, [pc, #128]	; (8001d20 <HAL_DMA_Abort_IT+0xd4>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d022      	beq.n	8001ce8 <HAL_DMA_Abort_IT+0x9c>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a1f      	ldr	r2, [pc, #124]	; (8001d24 <HAL_DMA_Abort_IT+0xd8>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d01a      	beq.n	8001ce2 <HAL_DMA_Abort_IT+0x96>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a1d      	ldr	r2, [pc, #116]	; (8001d28 <HAL_DMA_Abort_IT+0xdc>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d012      	beq.n	8001cdc <HAL_DMA_Abort_IT+0x90>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a1c      	ldr	r2, [pc, #112]	; (8001d2c <HAL_DMA_Abort_IT+0xe0>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d00a      	beq.n	8001cd6 <HAL_DMA_Abort_IT+0x8a>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a1a      	ldr	r2, [pc, #104]	; (8001d30 <HAL_DMA_Abort_IT+0xe4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d102      	bne.n	8001cd0 <HAL_DMA_Abort_IT+0x84>
 8001cca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001cce:	e00e      	b.n	8001cee <HAL_DMA_Abort_IT+0xa2>
 8001cd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cd4:	e00b      	b.n	8001cee <HAL_DMA_Abort_IT+0xa2>
 8001cd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cda:	e008      	b.n	8001cee <HAL_DMA_Abort_IT+0xa2>
 8001cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce0:	e005      	b.n	8001cee <HAL_DMA_Abort_IT+0xa2>
 8001ce2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ce6:	e002      	b.n	8001cee <HAL_DMA_Abort_IT+0xa2>
 8001ce8:	2310      	movs	r3, #16
 8001cea:	e000      	b.n	8001cee <HAL_DMA_Abort_IT+0xa2>
 8001cec:	2301      	movs	r3, #1
 8001cee:	4a11      	ldr	r2, [pc, #68]	; (8001d34 <HAL_DMA_Abort_IT+0xe8>)
 8001cf0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	4798      	blx	r3
    } 
  }
  return status;
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40020008 	.word	0x40020008
 8001d20:	4002001c 	.word	0x4002001c
 8001d24:	40020030 	.word	0x40020030
 8001d28:	40020044 	.word	0x40020044
 8001d2c:	40020058 	.word	0x40020058
 8001d30:	4002006c 	.word	0x4002006c
 8001d34:	40020000 	.word	0x40020000

08001d38 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	2204      	movs	r2, #4
 8001d56:	409a      	lsls	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d04f      	beq.n	8001e00 <HAL_DMA_IRQHandler+0xc8>
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f003 0304 	and.w	r3, r3, #4
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d04a      	beq.n	8001e00 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0320 	and.w	r3, r3, #32
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d107      	bne.n	8001d88 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0204 	bic.w	r2, r2, #4
 8001d86:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a66      	ldr	r2, [pc, #408]	; (8001f28 <HAL_DMA_IRQHandler+0x1f0>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d029      	beq.n	8001de6 <HAL_DMA_IRQHandler+0xae>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a65      	ldr	r2, [pc, #404]	; (8001f2c <HAL_DMA_IRQHandler+0x1f4>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d022      	beq.n	8001de2 <HAL_DMA_IRQHandler+0xaa>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a63      	ldr	r2, [pc, #396]	; (8001f30 <HAL_DMA_IRQHandler+0x1f8>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d01a      	beq.n	8001ddc <HAL_DMA_IRQHandler+0xa4>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a62      	ldr	r2, [pc, #392]	; (8001f34 <HAL_DMA_IRQHandler+0x1fc>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d012      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0x9e>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a60      	ldr	r2, [pc, #384]	; (8001f38 <HAL_DMA_IRQHandler+0x200>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d00a      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x98>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a5f      	ldr	r2, [pc, #380]	; (8001f3c <HAL_DMA_IRQHandler+0x204>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d102      	bne.n	8001dca <HAL_DMA_IRQHandler+0x92>
 8001dc4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dc8:	e00e      	b.n	8001de8 <HAL_DMA_IRQHandler+0xb0>
 8001dca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001dce:	e00b      	b.n	8001de8 <HAL_DMA_IRQHandler+0xb0>
 8001dd0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001dd4:	e008      	b.n	8001de8 <HAL_DMA_IRQHandler+0xb0>
 8001dd6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dda:	e005      	b.n	8001de8 <HAL_DMA_IRQHandler+0xb0>
 8001ddc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001de0:	e002      	b.n	8001de8 <HAL_DMA_IRQHandler+0xb0>
 8001de2:	2340      	movs	r3, #64	; 0x40
 8001de4:	e000      	b.n	8001de8 <HAL_DMA_IRQHandler+0xb0>
 8001de6:	2304      	movs	r3, #4
 8001de8:	4a55      	ldr	r2, [pc, #340]	; (8001f40 <HAL_DMA_IRQHandler+0x208>)
 8001dea:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 8094 	beq.w	8001f1e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001dfe:	e08e      	b.n	8001f1e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	2202      	movs	r2, #2
 8001e06:	409a      	lsls	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d056      	beq.n	8001ebe <HAL_DMA_IRQHandler+0x186>
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d051      	beq.n	8001ebe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0320 	and.w	r3, r3, #32
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10b      	bne.n	8001e40 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 020a 	bic.w	r2, r2, #10
 8001e36:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a38      	ldr	r2, [pc, #224]	; (8001f28 <HAL_DMA_IRQHandler+0x1f0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d029      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x166>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a37      	ldr	r2, [pc, #220]	; (8001f2c <HAL_DMA_IRQHandler+0x1f4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d022      	beq.n	8001e9a <HAL_DMA_IRQHandler+0x162>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a35      	ldr	r2, [pc, #212]	; (8001f30 <HAL_DMA_IRQHandler+0x1f8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d01a      	beq.n	8001e94 <HAL_DMA_IRQHandler+0x15c>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a34      	ldr	r2, [pc, #208]	; (8001f34 <HAL_DMA_IRQHandler+0x1fc>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d012      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x156>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a32      	ldr	r2, [pc, #200]	; (8001f38 <HAL_DMA_IRQHandler+0x200>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d00a      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x150>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a31      	ldr	r2, [pc, #196]	; (8001f3c <HAL_DMA_IRQHandler+0x204>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d102      	bne.n	8001e82 <HAL_DMA_IRQHandler+0x14a>
 8001e7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e80:	e00e      	b.n	8001ea0 <HAL_DMA_IRQHandler+0x168>
 8001e82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e86:	e00b      	b.n	8001ea0 <HAL_DMA_IRQHandler+0x168>
 8001e88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e8c:	e008      	b.n	8001ea0 <HAL_DMA_IRQHandler+0x168>
 8001e8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e92:	e005      	b.n	8001ea0 <HAL_DMA_IRQHandler+0x168>
 8001e94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e98:	e002      	b.n	8001ea0 <HAL_DMA_IRQHandler+0x168>
 8001e9a:	2320      	movs	r3, #32
 8001e9c:	e000      	b.n	8001ea0 <HAL_DMA_IRQHandler+0x168>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	4a27      	ldr	r2, [pc, #156]	; (8001f40 <HAL_DMA_IRQHandler+0x208>)
 8001ea2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d034      	beq.n	8001f1e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ebc:	e02f      	b.n	8001f1e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	2208      	movs	r2, #8
 8001ec4:	409a      	lsls	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d028      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x1e8>
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d023      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 020e 	bic.w	r2, r2, #14
 8001ee6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d004      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	4798      	blx	r3
    }
  }
  return;
 8001f1e:	bf00      	nop
 8001f20:	bf00      	nop
}
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40020008 	.word	0x40020008
 8001f2c:	4002001c 	.word	0x4002001c
 8001f30:	40020030 	.word	0x40020030
 8001f34:	40020044 	.word	0x40020044
 8001f38:	40020058 	.word	0x40020058
 8001f3c:	4002006c 	.word	0x4002006c
 8001f40:	40020000 	.word	0x40020000

08001f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b08b      	sub	sp, #44	; 0x2c
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f52:	2300      	movs	r3, #0
 8001f54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f56:	e169      	b.n	800222c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f58:	2201      	movs	r2, #1
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	69fa      	ldr	r2, [r7, #28]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	f040 8158 	bne.w	8002226 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	4a9a      	ldr	r2, [pc, #616]	; (80021e4 <HAL_GPIO_Init+0x2a0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d05e      	beq.n	800203e <HAL_GPIO_Init+0xfa>
 8001f80:	4a98      	ldr	r2, [pc, #608]	; (80021e4 <HAL_GPIO_Init+0x2a0>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d875      	bhi.n	8002072 <HAL_GPIO_Init+0x12e>
 8001f86:	4a98      	ldr	r2, [pc, #608]	; (80021e8 <HAL_GPIO_Init+0x2a4>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d058      	beq.n	800203e <HAL_GPIO_Init+0xfa>
 8001f8c:	4a96      	ldr	r2, [pc, #600]	; (80021e8 <HAL_GPIO_Init+0x2a4>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d86f      	bhi.n	8002072 <HAL_GPIO_Init+0x12e>
 8001f92:	4a96      	ldr	r2, [pc, #600]	; (80021ec <HAL_GPIO_Init+0x2a8>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d052      	beq.n	800203e <HAL_GPIO_Init+0xfa>
 8001f98:	4a94      	ldr	r2, [pc, #592]	; (80021ec <HAL_GPIO_Init+0x2a8>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d869      	bhi.n	8002072 <HAL_GPIO_Init+0x12e>
 8001f9e:	4a94      	ldr	r2, [pc, #592]	; (80021f0 <HAL_GPIO_Init+0x2ac>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d04c      	beq.n	800203e <HAL_GPIO_Init+0xfa>
 8001fa4:	4a92      	ldr	r2, [pc, #584]	; (80021f0 <HAL_GPIO_Init+0x2ac>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d863      	bhi.n	8002072 <HAL_GPIO_Init+0x12e>
 8001faa:	4a92      	ldr	r2, [pc, #584]	; (80021f4 <HAL_GPIO_Init+0x2b0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d046      	beq.n	800203e <HAL_GPIO_Init+0xfa>
 8001fb0:	4a90      	ldr	r2, [pc, #576]	; (80021f4 <HAL_GPIO_Init+0x2b0>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d85d      	bhi.n	8002072 <HAL_GPIO_Init+0x12e>
 8001fb6:	2b12      	cmp	r3, #18
 8001fb8:	d82a      	bhi.n	8002010 <HAL_GPIO_Init+0xcc>
 8001fba:	2b12      	cmp	r3, #18
 8001fbc:	d859      	bhi.n	8002072 <HAL_GPIO_Init+0x12e>
 8001fbe:	a201      	add	r2, pc, #4	; (adr r2, 8001fc4 <HAL_GPIO_Init+0x80>)
 8001fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc4:	0800203f 	.word	0x0800203f
 8001fc8:	08002019 	.word	0x08002019
 8001fcc:	0800202b 	.word	0x0800202b
 8001fd0:	0800206d 	.word	0x0800206d
 8001fd4:	08002073 	.word	0x08002073
 8001fd8:	08002073 	.word	0x08002073
 8001fdc:	08002073 	.word	0x08002073
 8001fe0:	08002073 	.word	0x08002073
 8001fe4:	08002073 	.word	0x08002073
 8001fe8:	08002073 	.word	0x08002073
 8001fec:	08002073 	.word	0x08002073
 8001ff0:	08002073 	.word	0x08002073
 8001ff4:	08002073 	.word	0x08002073
 8001ff8:	08002073 	.word	0x08002073
 8001ffc:	08002073 	.word	0x08002073
 8002000:	08002073 	.word	0x08002073
 8002004:	08002073 	.word	0x08002073
 8002008:	08002021 	.word	0x08002021
 800200c:	08002035 	.word	0x08002035
 8002010:	4a79      	ldr	r2, [pc, #484]	; (80021f8 <HAL_GPIO_Init+0x2b4>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d013      	beq.n	800203e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002016:	e02c      	b.n	8002072 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	623b      	str	r3, [r7, #32]
          break;
 800201e:	e029      	b.n	8002074 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	3304      	adds	r3, #4
 8002026:	623b      	str	r3, [r7, #32]
          break;
 8002028:	e024      	b.n	8002074 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	3308      	adds	r3, #8
 8002030:	623b      	str	r3, [r7, #32]
          break;
 8002032:	e01f      	b.n	8002074 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	330c      	adds	r3, #12
 800203a:	623b      	str	r3, [r7, #32]
          break;
 800203c:	e01a      	b.n	8002074 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d102      	bne.n	800204c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002046:	2304      	movs	r3, #4
 8002048:	623b      	str	r3, [r7, #32]
          break;
 800204a:	e013      	b.n	8002074 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d105      	bne.n	8002060 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002054:	2308      	movs	r3, #8
 8002056:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	69fa      	ldr	r2, [r7, #28]
 800205c:	611a      	str	r2, [r3, #16]
          break;
 800205e:	e009      	b.n	8002074 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002060:	2308      	movs	r3, #8
 8002062:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69fa      	ldr	r2, [r7, #28]
 8002068:	615a      	str	r2, [r3, #20]
          break;
 800206a:	e003      	b.n	8002074 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800206c:	2300      	movs	r3, #0
 800206e:	623b      	str	r3, [r7, #32]
          break;
 8002070:	e000      	b.n	8002074 <HAL_GPIO_Init+0x130>
          break;
 8002072:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	2bff      	cmp	r3, #255	; 0xff
 8002078:	d801      	bhi.n	800207e <HAL_GPIO_Init+0x13a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	e001      	b.n	8002082 <HAL_GPIO_Init+0x13e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3304      	adds	r3, #4
 8002082:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	2bff      	cmp	r3, #255	; 0xff
 8002088:	d802      	bhi.n	8002090 <HAL_GPIO_Init+0x14c>
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	e002      	b.n	8002096 <HAL_GPIO_Init+0x152>
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	3b08      	subs	r3, #8
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	210f      	movs	r1, #15
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	fa01 f303 	lsl.w	r3, r1, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	401a      	ands	r2, r3
 80020a8:	6a39      	ldr	r1, [r7, #32]
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	fa01 f303 	lsl.w	r3, r1, r3
 80020b0:	431a      	orrs	r2, r3
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 80b1 	beq.w	8002226 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020c4:	4b4d      	ldr	r3, [pc, #308]	; (80021fc <HAL_GPIO_Init+0x2b8>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	4a4c      	ldr	r2, [pc, #304]	; (80021fc <HAL_GPIO_Init+0x2b8>)
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	6193      	str	r3, [r2, #24]
 80020d0:	4b4a      	ldr	r3, [pc, #296]	; (80021fc <HAL_GPIO_Init+0x2b8>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020dc:	4a48      	ldr	r2, [pc, #288]	; (8002200 <HAL_GPIO_Init+0x2bc>)
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	089b      	lsrs	r3, r3, #2
 80020e2:	3302      	adds	r3, #2
 80020e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	220f      	movs	r2, #15
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4013      	ands	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a40      	ldr	r2, [pc, #256]	; (8002204 <HAL_GPIO_Init+0x2c0>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d013      	beq.n	8002130 <HAL_GPIO_Init+0x1ec>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a3f      	ldr	r2, [pc, #252]	; (8002208 <HAL_GPIO_Init+0x2c4>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d00d      	beq.n	800212c <HAL_GPIO_Init+0x1e8>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a3e      	ldr	r2, [pc, #248]	; (800220c <HAL_GPIO_Init+0x2c8>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d007      	beq.n	8002128 <HAL_GPIO_Init+0x1e4>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a3d      	ldr	r2, [pc, #244]	; (8002210 <HAL_GPIO_Init+0x2cc>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d101      	bne.n	8002124 <HAL_GPIO_Init+0x1e0>
 8002120:	2303      	movs	r3, #3
 8002122:	e006      	b.n	8002132 <HAL_GPIO_Init+0x1ee>
 8002124:	2304      	movs	r3, #4
 8002126:	e004      	b.n	8002132 <HAL_GPIO_Init+0x1ee>
 8002128:	2302      	movs	r3, #2
 800212a:	e002      	b.n	8002132 <HAL_GPIO_Init+0x1ee>
 800212c:	2301      	movs	r3, #1
 800212e:	e000      	b.n	8002132 <HAL_GPIO_Init+0x1ee>
 8002130:	2300      	movs	r3, #0
 8002132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002134:	f002 0203 	and.w	r2, r2, #3
 8002138:	0092      	lsls	r2, r2, #2
 800213a:	4093      	lsls	r3, r2
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	4313      	orrs	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002142:	492f      	ldr	r1, [pc, #188]	; (8002200 <HAL_GPIO_Init+0x2bc>)
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	3302      	adds	r3, #2
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d006      	beq.n	800216a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800215c:	4b2d      	ldr	r3, [pc, #180]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	492c      	ldr	r1, [pc, #176]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	4313      	orrs	r3, r2
 8002166:	600b      	str	r3, [r1, #0]
 8002168:	e006      	b.n	8002178 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800216a:	4b2a      	ldr	r3, [pc, #168]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	43db      	mvns	r3, r3
 8002172:	4928      	ldr	r1, [pc, #160]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 8002174:	4013      	ands	r3, r2
 8002176:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d006      	beq.n	8002192 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002184:	4b23      	ldr	r3, [pc, #140]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	4922      	ldr	r1, [pc, #136]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	4313      	orrs	r3, r2
 800218e:	604b      	str	r3, [r1, #4]
 8002190:	e006      	b.n	80021a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002192:	4b20      	ldr	r3, [pc, #128]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	43db      	mvns	r3, r3
 800219a:	491e      	ldr	r1, [pc, #120]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 800219c:	4013      	ands	r3, r2
 800219e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d006      	beq.n	80021ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021ac:	4b19      	ldr	r3, [pc, #100]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	4918      	ldr	r1, [pc, #96]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	608b      	str	r3, [r1, #8]
 80021b8:	e006      	b.n	80021c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021ba:	4b16      	ldr	r3, [pc, #88]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	43db      	mvns	r3, r3
 80021c2:	4914      	ldr	r1, [pc, #80]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 80021c4:	4013      	ands	r3, r2
 80021c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d021      	beq.n	8002218 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021d4:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	490e      	ldr	r1, [pc, #56]	; (8002214 <HAL_GPIO_Init+0x2d0>)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	4313      	orrs	r3, r2
 80021de:	60cb      	str	r3, [r1, #12]
 80021e0:	e021      	b.n	8002226 <HAL_GPIO_Init+0x2e2>
 80021e2:	bf00      	nop
 80021e4:	10320000 	.word	0x10320000
 80021e8:	10310000 	.word	0x10310000
 80021ec:	10220000 	.word	0x10220000
 80021f0:	10210000 	.word	0x10210000
 80021f4:	10120000 	.word	0x10120000
 80021f8:	10110000 	.word	0x10110000
 80021fc:	40021000 	.word	0x40021000
 8002200:	40010000 	.word	0x40010000
 8002204:	40010800 	.word	0x40010800
 8002208:	40010c00 	.word	0x40010c00
 800220c:	40011000 	.word	0x40011000
 8002210:	40011400 	.word	0x40011400
 8002214:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <HAL_GPIO_Init+0x304>)
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	43db      	mvns	r3, r3
 8002220:	4909      	ldr	r1, [pc, #36]	; (8002248 <HAL_GPIO_Init+0x304>)
 8002222:	4013      	ands	r3, r2
 8002224:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	3301      	adds	r3, #1
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	fa22 f303 	lsr.w	r3, r2, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	f47f ae8e 	bne.w	8001f58 <HAL_GPIO_Init+0x14>
  }
}
 800223c:	bf00      	nop
 800223e:	bf00      	nop
 8002240:	372c      	adds	r7, #44	; 0x2c
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr
 8002248:	40010400 	.word	0x40010400

0800224c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	887b      	ldrh	r3, [r7, #2]
 800225e:	4013      	ands	r3, r2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d002      	beq.n	800226a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002264:	2301      	movs	r3, #1
 8002266:	73fb      	strb	r3, [r7, #15]
 8002268:	e001      	b.n	800226e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800226a:	2300      	movs	r3, #0
 800226c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800226e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	bc80      	pop	{r7}
 8002278:	4770      	bx	lr

0800227a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	460b      	mov	r3, r1
 8002284:	807b      	strh	r3, [r7, #2]
 8002286:	4613      	mov	r3, r2
 8002288:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800228a:	787b      	ldrb	r3, [r7, #1]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002290:	887a      	ldrh	r2, [r7, #2]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002296:	e003      	b.n	80022a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002298:	887b      	ldrh	r3, [r7, #2]
 800229a:	041a      	lsls	r2, r3, #16
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	611a      	str	r2, [r3, #16]
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr
	...

080022ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e12b      	b.n	8002516 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d106      	bne.n	80022d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7fe fde4 	bl	8000ea0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2224      	movs	r2, #36	; 0x24
 80022dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0201 	bic.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800230e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002310:	f000 fd44 	bl	8002d9c <HAL_RCC_GetPCLK1Freq>
 8002314:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	4a81      	ldr	r2, [pc, #516]	; (8002520 <HAL_I2C_Init+0x274>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d807      	bhi.n	8002330 <HAL_I2C_Init+0x84>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4a80      	ldr	r2, [pc, #512]	; (8002524 <HAL_I2C_Init+0x278>)
 8002324:	4293      	cmp	r3, r2
 8002326:	bf94      	ite	ls
 8002328:	2301      	movls	r3, #1
 800232a:	2300      	movhi	r3, #0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	e006      	b.n	800233e <HAL_I2C_Init+0x92>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4a7d      	ldr	r2, [pc, #500]	; (8002528 <HAL_I2C_Init+0x27c>)
 8002334:	4293      	cmp	r3, r2
 8002336:	bf94      	ite	ls
 8002338:	2301      	movls	r3, #1
 800233a:	2300      	movhi	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e0e7      	b.n	8002516 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4a78      	ldr	r2, [pc, #480]	; (800252c <HAL_I2C_Init+0x280>)
 800234a:	fba2 2303 	umull	r2, r3, r2, r3
 800234e:	0c9b      	lsrs	r3, r3, #18
 8002350:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	430a      	orrs	r2, r1
 8002364:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	4a6a      	ldr	r2, [pc, #424]	; (8002520 <HAL_I2C_Init+0x274>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d802      	bhi.n	8002380 <HAL_I2C_Init+0xd4>
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	3301      	adds	r3, #1
 800237e:	e009      	b.n	8002394 <HAL_I2C_Init+0xe8>
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002386:	fb02 f303 	mul.w	r3, r2, r3
 800238a:	4a69      	ldr	r2, [pc, #420]	; (8002530 <HAL_I2C_Init+0x284>)
 800238c:	fba2 2303 	umull	r2, r3, r2, r3
 8002390:	099b      	lsrs	r3, r3, #6
 8002392:	3301      	adds	r3, #1
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6812      	ldr	r2, [r2, #0]
 8002398:	430b      	orrs	r3, r1
 800239a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	495c      	ldr	r1, [pc, #368]	; (8002520 <HAL_I2C_Init+0x274>)
 80023b0:	428b      	cmp	r3, r1
 80023b2:	d819      	bhi.n	80023e8 <HAL_I2C_Init+0x13c>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	1e59      	subs	r1, r3, #1
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	fbb1 f3f3 	udiv	r3, r1, r3
 80023c2:	1c59      	adds	r1, r3, #1
 80023c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023c8:	400b      	ands	r3, r1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00a      	beq.n	80023e4 <HAL_I2C_Init+0x138>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	1e59      	subs	r1, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80023dc:	3301      	adds	r3, #1
 80023de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e2:	e051      	b.n	8002488 <HAL_I2C_Init+0x1dc>
 80023e4:	2304      	movs	r3, #4
 80023e6:	e04f      	b.n	8002488 <HAL_I2C_Init+0x1dc>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d111      	bne.n	8002414 <HAL_I2C_Init+0x168>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1e58      	subs	r0, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6859      	ldr	r1, [r3, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	440b      	add	r3, r1
 80023fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002402:	3301      	adds	r3, #1
 8002404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002408:	2b00      	cmp	r3, #0
 800240a:	bf0c      	ite	eq
 800240c:	2301      	moveq	r3, #1
 800240e:	2300      	movne	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	e012      	b.n	800243a <HAL_I2C_Init+0x18e>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	1e58      	subs	r0, r3, #1
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6859      	ldr	r1, [r3, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	0099      	lsls	r1, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	fbb0 f3f3 	udiv	r3, r0, r3
 800242a:	3301      	adds	r3, #1
 800242c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002430:	2b00      	cmp	r3, #0
 8002432:	bf0c      	ite	eq
 8002434:	2301      	moveq	r3, #1
 8002436:	2300      	movne	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_I2C_Init+0x196>
 800243e:	2301      	movs	r3, #1
 8002440:	e022      	b.n	8002488 <HAL_I2C_Init+0x1dc>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10e      	bne.n	8002468 <HAL_I2C_Init+0x1bc>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1e58      	subs	r0, r3, #1
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6859      	ldr	r1, [r3, #4]
 8002452:	460b      	mov	r3, r1
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	440b      	add	r3, r1
 8002458:	fbb0 f3f3 	udiv	r3, r0, r3
 800245c:	3301      	adds	r3, #1
 800245e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002466:	e00f      	b.n	8002488 <HAL_I2C_Init+0x1dc>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	1e58      	subs	r0, r3, #1
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6859      	ldr	r1, [r3, #4]
 8002470:	460b      	mov	r3, r1
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	0099      	lsls	r1, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	fbb0 f3f3 	udiv	r3, r0, r3
 800247e:	3301      	adds	r3, #1
 8002480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002484:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	6809      	ldr	r1, [r1, #0]
 800248c:	4313      	orrs	r3, r2
 800248e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69da      	ldr	r2, [r3, #28]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6911      	ldr	r1, [r2, #16]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	68d2      	ldr	r2, [r2, #12]
 80024c2:	4311      	orrs	r1, r2
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6812      	ldr	r2, [r2, #0]
 80024c8:	430b      	orrs	r3, r1
 80024ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695a      	ldr	r2, [r3, #20]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0201 	orr.w	r2, r2, #1
 80024f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2220      	movs	r2, #32
 8002502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	000186a0 	.word	0x000186a0
 8002524:	001e847f 	.word	0x001e847f
 8002528:	003d08ff 	.word	0x003d08ff
 800252c:	431bde83 	.word	0x431bde83
 8002530:	10624dd3 	.word	0x10624dd3

08002534 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002544:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr
	...

08002554 <HAL_PWR_EnableWakeUpPin>:
  *        This parameter can be one of the following values:
  *           @arg PWR_WAKEUP_PIN1
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	fa93 f3a3 	rbit	r3, r3
 8002566:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002568:	68bb      	ldr	r3, [r7, #8]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)ENABLE;
 800256a:	fab3 f383 	clz	r3, r3
 800256e:	b2db      	uxtb	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	4b05      	ldr	r3, [pc, #20]	; (8002588 <HAL_PWR_EnableWakeUpPin+0x34>)
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	461a      	mov	r2, r3
 800257a:	2301      	movs	r3, #1
 800257c:	6013      	str	r3, [r2, #0]
}
 800257e:	bf00      	nop
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr
 8002588:	10838020 	.word	0x10838020

0800258c <HAL_PWR_DisableWakeUpPin>:
  *        This parameter can be one of the following values:
  *           @arg PWR_WAKEUP_PIN1
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	fa93 f3a3 	rbit	r3, r3
 800259e:	60bb      	str	r3, [r7, #8]
  return result;
 80025a0:	68bb      	ldr	r3, [r7, #8]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Disable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)DISABLE;
 80025a2:	fab3 f383 	clz	r3, r3
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	461a      	mov	r2, r3
 80025aa:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <HAL_PWR_DisableWakeUpPin+0x34>)
 80025ac:	4413      	add	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	461a      	mov	r2, r3
 80025b2:	2300      	movs	r3, #0
 80025b4:	6013      	str	r3, [r2, #0]
}
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr
 80025c0:	10838020 	.word	0x10838020

080025c4 <HAL_PWR_EnterSTANDBYMode>:
  *          - TAMPER pin if configured for tamper or calibration out.
  *          - WKUP pin (PA0) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80025c8:	4b08      	ldr	r3, [pc, #32]	; (80025ec <HAL_PWR_EnterSTANDBYMode+0x28>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a07      	ldr	r2, [pc, #28]	; (80025ec <HAL_PWR_EnterSTANDBYMode+0x28>)
 80025ce:	f043 0302 	orr.w	r3, r3, #2
 80025d2:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80025d4:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	4a05      	ldr	r2, [pc, #20]	; (80025f0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80025da:	f043 0304 	orr.w	r3, r3, #4
 80025de:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80025e0:	bf30      	wfi
}
 80025e2:	bf00      	nop
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40007000 	.word	0x40007000
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e26c      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 8087 	beq.w	8002722 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002614:	4b92      	ldr	r3, [pc, #584]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 030c 	and.w	r3, r3, #12
 800261c:	2b04      	cmp	r3, #4
 800261e:	d00c      	beq.n	800263a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002620:	4b8f      	ldr	r3, [pc, #572]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 030c 	and.w	r3, r3, #12
 8002628:	2b08      	cmp	r3, #8
 800262a:	d112      	bne.n	8002652 <HAL_RCC_OscConfig+0x5e>
 800262c:	4b8c      	ldr	r3, [pc, #560]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002638:	d10b      	bne.n	8002652 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263a:	4b89      	ldr	r3, [pc, #548]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d06c      	beq.n	8002720 <HAL_RCC_OscConfig+0x12c>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d168      	bne.n	8002720 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e246      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800265a:	d106      	bne.n	800266a <HAL_RCC_OscConfig+0x76>
 800265c:	4b80      	ldr	r3, [pc, #512]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a7f      	ldr	r2, [pc, #508]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002662:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	e02e      	b.n	80026c8 <HAL_RCC_OscConfig+0xd4>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10c      	bne.n	800268c <HAL_RCC_OscConfig+0x98>
 8002672:	4b7b      	ldr	r3, [pc, #492]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a7a      	ldr	r2, [pc, #488]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	4b78      	ldr	r3, [pc, #480]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a77      	ldr	r2, [pc, #476]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002684:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	e01d      	b.n	80026c8 <HAL_RCC_OscConfig+0xd4>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002694:	d10c      	bne.n	80026b0 <HAL_RCC_OscConfig+0xbc>
 8002696:	4b72      	ldr	r3, [pc, #456]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a71      	ldr	r2, [pc, #452]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800269c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	4b6f      	ldr	r3, [pc, #444]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a6e      	ldr	r2, [pc, #440]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e00b      	b.n	80026c8 <HAL_RCC_OscConfig+0xd4>
 80026b0:	4b6b      	ldr	r3, [pc, #428]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a6a      	ldr	r2, [pc, #424]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	4b68      	ldr	r3, [pc, #416]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a67      	ldr	r2, [pc, #412]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d013      	beq.n	80026f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d0:	f7fe fed4 	bl	800147c <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d8:	f7fe fed0 	bl	800147c <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b64      	cmp	r3, #100	; 0x64
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e1fa      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ea:	4b5d      	ldr	r3, [pc, #372]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0xe4>
 80026f6:	e014      	b.n	8002722 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7fe fec0 	bl	800147c <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002700:	f7fe febc 	bl	800147c <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b64      	cmp	r3, #100	; 0x64
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e1e6      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002712:	4b53      	ldr	r3, [pc, #332]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0x10c>
 800271e:	e000      	b.n	8002722 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d063      	beq.n	80027f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800272e:	4b4c      	ldr	r3, [pc, #304]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 030c 	and.w	r3, r3, #12
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00b      	beq.n	8002752 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800273a:	4b49      	ldr	r3, [pc, #292]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 030c 	and.w	r3, r3, #12
 8002742:	2b08      	cmp	r3, #8
 8002744:	d11c      	bne.n	8002780 <HAL_RCC_OscConfig+0x18c>
 8002746:	4b46      	ldr	r3, [pc, #280]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d116      	bne.n	8002780 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002752:	4b43      	ldr	r3, [pc, #268]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d005      	beq.n	800276a <HAL_RCC_OscConfig+0x176>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d001      	beq.n	800276a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e1ba      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276a:	4b3d      	ldr	r3, [pc, #244]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	4939      	ldr	r1, [pc, #228]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800277e:	e03a      	b.n	80027f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d020      	beq.n	80027ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002788:	4b36      	ldr	r3, [pc, #216]	; (8002864 <HAL_RCC_OscConfig+0x270>)
 800278a:	2201      	movs	r2, #1
 800278c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278e:	f7fe fe75 	bl	800147c <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002796:	f7fe fe71 	bl	800147c <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e19b      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a8:	4b2d      	ldr	r3, [pc, #180]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f0      	beq.n	8002796 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b4:	4b2a      	ldr	r3, [pc, #168]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	4927      	ldr	r1, [pc, #156]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	600b      	str	r3, [r1, #0]
 80027c8:	e015      	b.n	80027f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ca:	4b26      	ldr	r3, [pc, #152]	; (8002864 <HAL_RCC_OscConfig+0x270>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7fe fe54 	bl	800147c <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027d8:	f7fe fe50 	bl	800147c <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e17a      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ea:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d03a      	beq.n	8002878 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d019      	beq.n	800283e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800280a:	4b17      	ldr	r3, [pc, #92]	; (8002868 <HAL_RCC_OscConfig+0x274>)
 800280c:	2201      	movs	r2, #1
 800280e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002810:	f7fe fe34 	bl	800147c <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002818:	f7fe fe30 	bl	800147c <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e15a      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282a:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002836:	2001      	movs	r0, #1
 8002838:	f000 fad8 	bl	8002dec <RCC_Delay>
 800283c:	e01c      	b.n	8002878 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800283e:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <HAL_RCC_OscConfig+0x274>)
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002844:	f7fe fe1a 	bl	800147c <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800284a:	e00f      	b.n	800286c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800284c:	f7fe fe16 	bl	800147c <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d908      	bls.n	800286c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e140      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4ec>
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000
 8002864:	42420000 	.word	0x42420000
 8002868:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800286c:	4b9e      	ldr	r3, [pc, #632]	; (8002ae8 <HAL_RCC_OscConfig+0x4f4>)
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1e9      	bne.n	800284c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 80a6 	beq.w	80029d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002886:	2300      	movs	r3, #0
 8002888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800288a:	4b97      	ldr	r3, [pc, #604]	; (8002ae8 <HAL_RCC_OscConfig+0x4f4>)
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10d      	bne.n	80028b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002896:	4b94      	ldr	r3, [pc, #592]	; (8002ae8 <HAL_RCC_OscConfig+0x4f4>)
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	4a93      	ldr	r2, [pc, #588]	; (8002ae8 <HAL_RCC_OscConfig+0x4f4>)
 800289c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a0:	61d3      	str	r3, [r2, #28]
 80028a2:	4b91      	ldr	r3, [pc, #580]	; (8002ae8 <HAL_RCC_OscConfig+0x4f4>)
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ae:	2301      	movs	r3, #1
 80028b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b2:	4b8e      	ldr	r3, [pc, #568]	; (8002aec <HAL_RCC_OscConfig+0x4f8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d118      	bne.n	80028f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028be:	4b8b      	ldr	r3, [pc, #556]	; (8002aec <HAL_RCC_OscConfig+0x4f8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a8a      	ldr	r2, [pc, #552]	; (8002aec <HAL_RCC_OscConfig+0x4f8>)
 80028c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ca:	f7fe fdd7 	bl	800147c <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d2:	f7fe fdd3 	bl	800147c <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b64      	cmp	r3, #100	; 0x64
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e0fd      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e4:	4b81      	ldr	r3, [pc, #516]	; (8002aec <HAL_RCC_OscConfig+0x4f8>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0f0      	beq.n	80028d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d106      	bne.n	8002906 <HAL_RCC_OscConfig+0x312>
 80028f8:	4b7b      	ldr	r3, [pc, #492]	; (8002ae8 <HAL_RCC_OscConfig+0x4f4>)
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	4a7a      	ldr	r2, [pc, #488]	; (8002ae8 <HAL_RCC_OscConfig+0x4f4>)
 80028fe:	f043 0301 	orr.w	r3, r3, #1
 8002902:	6213      	str	r3, [r2, #32]
 8002904:	e02d      	b.n	8002962 <HAL_RCC_OscConfig+0x36e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10c      	bne.n	8002928 <HAL_RCC_OscConfig+0x334>
 800290e:	4b76      	ldr	r3, [pc, #472]	; (8002ae8 <HAL_RCC_OscConfig+0x4f4>)
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	4a75      	ldr	r2, [pc, #468]	; (8002ae8 <HAL_RCC_OscConfig+0x4f4>)
 8002914:	f023 0301 	bic.w	r3, r3, #1
 8002918:	6213      	str	r3, [r2, #32]
 800291a:	4b73      	ldr	r3, [pc, #460]	; (8002ae8 <HAL_RCC_OscConfig+0x4f4>)
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	4a72      	ldr	r2, [pc, #456]	; (8002ae8 <HAL_RCC_OscConfig+0x4f4>)
 8002920:	f023 0304 	bic.w	r3, r3, #4
 8002924:	6213      	str	r3, [r2, #32]
 8002926:	e01c      	b.n	8002962 <HAL_RCC_OscConfig+0x36e>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	2b05      	cmp	r3, #5
 800292e:	d10c      	bne.n	800294a <HAL_RCC_OscConfig+0x356>
 8002930:	4b6d      	ldr	r3, [pc, #436]	; (8002ae8 <HAL_RCC_OscConfig+0x4f4>)
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	4a6c      	ldr	r2, [pc, #432]	; (8002ae8 <HAL_RCC_OscConfig+0x4f4>)
 8002936:	f043 0304 	orr.w	r3, r3, #4
 800293a:	6213      	str	r3, [r2, #32]
 800293c:	4b6a      	ldr	r3, [pc, #424]	; (8002ae8 <HAL_RCC_OscConfig+0x4f4>)
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	4a69      	ldr	r2, [pc, #420]	; (8002ae8 <HAL_RCC_OscConfig+0x4f4>)
 8002942:	f043 0301 	orr.w	r3, r3, #1
 8002946:	6213      	str	r3, [r2, #32]
 8002948:	e00b      	b.n	8002962 <HAL_RCC_OscConfig+0x36e>
 800294a:	4b67      	ldr	r3, [pc, #412]	; (8002ae8 <HAL_RCC_OscConfig+0x4f4>)
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	4a66      	ldr	r2, [pc, #408]	; (8002ae8 <HAL_RCC_OscConfig+0x4f4>)
 8002950:	f023 0301 	bic.w	r3, r3, #1
 8002954:	6213      	str	r3, [r2, #32]
 8002956:	4b64      	ldr	r3, [pc, #400]	; (8002ae8 <HAL_RCC_OscConfig+0x4f4>)
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	4a63      	ldr	r2, [pc, #396]	; (8002ae8 <HAL_RCC_OscConfig+0x4f4>)
 800295c:	f023 0304 	bic.w	r3, r3, #4
 8002960:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d015      	beq.n	8002996 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800296a:	f7fe fd87 	bl	800147c <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002970:	e00a      	b.n	8002988 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002972:	f7fe fd83 	bl	800147c <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002980:	4293      	cmp	r3, r2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e0ab      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002988:	4b57      	ldr	r3, [pc, #348]	; (8002ae8 <HAL_RCC_OscConfig+0x4f4>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0ee      	beq.n	8002972 <HAL_RCC_OscConfig+0x37e>
 8002994:	e014      	b.n	80029c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002996:	f7fe fd71 	bl	800147c <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800299c:	e00a      	b.n	80029b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299e:	f7fe fd6d 	bl	800147c <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e095      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b4:	4b4c      	ldr	r3, [pc, #304]	; (8002ae8 <HAL_RCC_OscConfig+0x4f4>)
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1ee      	bne.n	800299e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029c0:	7dfb      	ldrb	r3, [r7, #23]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d105      	bne.n	80029d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c6:	4b48      	ldr	r3, [pc, #288]	; (8002ae8 <HAL_RCC_OscConfig+0x4f4>)
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	4a47      	ldr	r2, [pc, #284]	; (8002ae8 <HAL_RCC_OscConfig+0x4f4>)
 80029cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 8081 	beq.w	8002ade <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029dc:	4b42      	ldr	r3, [pc, #264]	; (8002ae8 <HAL_RCC_OscConfig+0x4f4>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 030c 	and.w	r3, r3, #12
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d061      	beq.n	8002aac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d146      	bne.n	8002a7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029f0:	4b3f      	ldr	r3, [pc, #252]	; (8002af0 <HAL_RCC_OscConfig+0x4fc>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f6:	f7fe fd41 	bl	800147c <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fe:	f7fe fd3d 	bl	800147c <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e067      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a10:	4b35      	ldr	r3, [pc, #212]	; (8002ae8 <HAL_RCC_OscConfig+0x4f4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1f0      	bne.n	80029fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a24:	d108      	bne.n	8002a38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a26:	4b30      	ldr	r3, [pc, #192]	; (8002ae8 <HAL_RCC_OscConfig+0x4f4>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	492d      	ldr	r1, [pc, #180]	; (8002ae8 <HAL_RCC_OscConfig+0x4f4>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a38:	4b2b      	ldr	r3, [pc, #172]	; (8002ae8 <HAL_RCC_OscConfig+0x4f4>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a19      	ldr	r1, [r3, #32]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	4927      	ldr	r1, [pc, #156]	; (8002ae8 <HAL_RCC_OscConfig+0x4f4>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a50:	4b27      	ldr	r3, [pc, #156]	; (8002af0 <HAL_RCC_OscConfig+0x4fc>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a56:	f7fe fd11 	bl	800147c <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a5e:	f7fe fd0d 	bl	800147c <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e037      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a70:	4b1d      	ldr	r3, [pc, #116]	; (8002ae8 <HAL_RCC_OscConfig+0x4f4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f0      	beq.n	8002a5e <HAL_RCC_OscConfig+0x46a>
 8002a7c:	e02f      	b.n	8002ade <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a7e:	4b1c      	ldr	r3, [pc, #112]	; (8002af0 <HAL_RCC_OscConfig+0x4fc>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a84:	f7fe fcfa 	bl	800147c <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7fe fcf6 	bl	800147c <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e020      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a9e:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <HAL_RCC_OscConfig+0x4f4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x498>
 8002aaa:	e018      	b.n	8002ade <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e013      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <HAL_RCC_OscConfig+0x4f4>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d106      	bne.n	8002ada <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d001      	beq.n	8002ade <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	40007000 	.word	0x40007000
 8002af0:	42420060 	.word	0x42420060

08002af4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0d0      	b.n	8002caa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b08:	4b6a      	ldr	r3, [pc, #424]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d910      	bls.n	8002b38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b16:	4b67      	ldr	r3, [pc, #412]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f023 0207 	bic.w	r2, r3, #7
 8002b1e:	4965      	ldr	r1, [pc, #404]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b26:	4b63      	ldr	r3, [pc, #396]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d001      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0b8      	b.n	8002caa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d020      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d005      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b50:	4b59      	ldr	r3, [pc, #356]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	4a58      	ldr	r2, [pc, #352]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b68:	4b53      	ldr	r3, [pc, #332]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	4a52      	ldr	r2, [pc, #328]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b74:	4b50      	ldr	r3, [pc, #320]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	494d      	ldr	r1, [pc, #308]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d040      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d107      	bne.n	8002baa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9a:	4b47      	ldr	r3, [pc, #284]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d115      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e07f      	b.n	8002caa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d107      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb2:	4b41      	ldr	r3, [pc, #260]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d109      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e073      	b.n	8002caa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc2:	4b3d      	ldr	r3, [pc, #244]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e06b      	b.n	8002caa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bd2:	4b39      	ldr	r3, [pc, #228]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f023 0203 	bic.w	r2, r3, #3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	4936      	ldr	r1, [pc, #216]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002be4:	f7fe fc4a 	bl	800147c <HAL_GetTick>
 8002be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bea:	e00a      	b.n	8002c02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bec:	f7fe fc46 	bl	800147c <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e053      	b.n	8002caa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c02:	4b2d      	ldr	r3, [pc, #180]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 020c 	and.w	r2, r3, #12
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d1eb      	bne.n	8002bec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c14:	4b27      	ldr	r3, [pc, #156]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d210      	bcs.n	8002c44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c22:	4b24      	ldr	r3, [pc, #144]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f023 0207 	bic.w	r2, r3, #7
 8002c2a:	4922      	ldr	r1, [pc, #136]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c32:	4b20      	ldr	r3, [pc, #128]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e032      	b.n	8002caa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d008      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c50:	4b19      	ldr	r3, [pc, #100]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4916      	ldr	r1, [pc, #88]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d009      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c6e:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	490e      	ldr	r1, [pc, #56]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c82:	f000 f821 	bl	8002cc8 <HAL_RCC_GetSysClockFreq>
 8002c86:	4602      	mov	r2, r0
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	091b      	lsrs	r3, r3, #4
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	490a      	ldr	r1, [pc, #40]	; (8002cbc <HAL_RCC_ClockConfig+0x1c8>)
 8002c94:	5ccb      	ldrb	r3, [r1, r3]
 8002c96:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9a:	4a09      	ldr	r2, [pc, #36]	; (8002cc0 <HAL_RCC_ClockConfig+0x1cc>)
 8002c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c9e:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <HAL_RCC_ClockConfig+0x1d0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fe fba8 	bl	80013f8 <HAL_InitTick>

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40022000 	.word	0x40022000
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	0800534c 	.word	0x0800534c
 8002cc0:	20000000 	.word	0x20000000
 8002cc4:	20000004 	.word	0x20000004

08002cc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc8:	b490      	push	{r4, r7}
 8002cca:	b08a      	sub	sp, #40	; 0x28
 8002ccc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002cce:	4b2a      	ldr	r3, [pc, #168]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002cd0:	1d3c      	adds	r4, r7, #4
 8002cd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002cd8:	f240 2301 	movw	r3, #513	; 0x201
 8002cdc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61bb      	str	r3, [r7, #24]
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cf2:	4b22      	ldr	r3, [pc, #136]	; (8002d7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	d002      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0x40>
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d003      	beq.n	8002d0e <HAL_RCC_GetSysClockFreq+0x46>
 8002d06:	e02d      	b.n	8002d64 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d08:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d0a:	623b      	str	r3, [r7, #32]
      break;
 8002d0c:	e02d      	b.n	8002d6a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	0c9b      	lsrs	r3, r3, #18
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d20:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d013      	beq.n	8002d54 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d2c:	4b13      	ldr	r3, [pc, #76]	; (8002d7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	0c5b      	lsrs	r3, r3, #17
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d40:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	4a0e      	ldr	r2, [pc, #56]	; (8002d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d46:	fb02 f203 	mul.w	r2, r2, r3
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
 8002d52:	e004      	b.n	8002d5e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	4a0b      	ldr	r2, [pc, #44]	; (8002d84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d58:	fb02 f303 	mul.w	r3, r2, r3
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	623b      	str	r3, [r7, #32]
      break;
 8002d62:	e002      	b.n	8002d6a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d66:	623b      	str	r3, [r7, #32]
      break;
 8002d68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3728      	adds	r7, #40	; 0x28
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc90      	pop	{r4, r7}
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	0800531c 	.word	0x0800531c
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	007a1200 	.word	0x007a1200
 8002d84:	003d0900 	.word	0x003d0900

08002d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d8c:	4b02      	ldr	r3, [pc, #8]	; (8002d98 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr
 8002d98:	20000000 	.word	0x20000000

08002d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002da0:	f7ff fff2 	bl	8002d88 <HAL_RCC_GetHCLKFreq>
 8002da4:	4602      	mov	r2, r0
 8002da6:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	0a1b      	lsrs	r3, r3, #8
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	4903      	ldr	r1, [pc, #12]	; (8002dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002db2:	5ccb      	ldrb	r3, [r1, r3]
 8002db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	0800535c 	.word	0x0800535c

08002dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dc8:	f7ff ffde 	bl	8002d88 <HAL_RCC_GetHCLKFreq>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	0adb      	lsrs	r3, r3, #11
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	4903      	ldr	r1, [pc, #12]	; (8002de8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dda:	5ccb      	ldrb	r3, [r1, r3]
 8002ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40021000 	.word	0x40021000
 8002de8:	0800535c 	.word	0x0800535c

08002dec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002df4:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <RCC_Delay+0x34>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a0a      	ldr	r2, [pc, #40]	; (8002e24 <RCC_Delay+0x38>)
 8002dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfe:	0a5b      	lsrs	r3, r3, #9
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	fb02 f303 	mul.w	r3, r2, r3
 8002e06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e08:	bf00      	nop
  }
  while (Delay --);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	1e5a      	subs	r2, r3, #1
 8002e0e:	60fa      	str	r2, [r7, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1f9      	bne.n	8002e08 <RCC_Delay+0x1c>
}
 8002e14:	bf00      	nop
 8002e16:	bf00      	nop
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr
 8002e20:	20000000 	.word	0x20000000
 8002e24:	10624dd3 	.word	0x10624dd3

08002e28 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	2300      	movs	r3, #0
 8002e36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d07d      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002e44:	2300      	movs	r3, #0
 8002e46:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e48:	4b4f      	ldr	r3, [pc, #316]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10d      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e54:	4b4c      	ldr	r3, [pc, #304]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	4a4b      	ldr	r2, [pc, #300]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	61d3      	str	r3, [r2, #28]
 8002e60:	4b49      	ldr	r3, [pc, #292]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e70:	4b46      	ldr	r3, [pc, #280]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d118      	bne.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e7c:	4b43      	ldr	r3, [pc, #268]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a42      	ldr	r2, [pc, #264]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e88:	f7fe faf8 	bl	800147c <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e90:	f7fe faf4 	bl	800147c <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b64      	cmp	r3, #100	; 0x64
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e06d      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea2:	4b3a      	ldr	r3, [pc, #232]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002eae:	4b36      	ldr	r3, [pc, #216]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eb6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d02e      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d027      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ecc:	4b2e      	ldr	r3, [pc, #184]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ed6:	4b2e      	ldr	r3, [pc, #184]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ed8:	2201      	movs	r2, #1
 8002eda:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002edc:	4b2c      	ldr	r3, [pc, #176]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ee2:	4a29      	ldr	r2, [pc, #164]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d014      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef2:	f7fe fac3 	bl	800147c <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef8:	e00a      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efa:	f7fe fabf 	bl	800147c <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e036      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f10:	4b1d      	ldr	r3, [pc, #116]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0ee      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f1c:	4b1a      	ldr	r3, [pc, #104]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	4917      	ldr	r1, [pc, #92]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f2e:	7dfb      	ldrb	r3, [r7, #23]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d105      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f34:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	4a13      	ldr	r2, [pc, #76]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f4c:	4b0e      	ldr	r3, [pc, #56]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	490b      	ldr	r1, [pc, #44]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0310 	and.w	r3, r3, #16
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d008      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f6a:	4b07      	ldr	r3, [pc, #28]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	4904      	ldr	r1, [pc, #16]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	40007000 	.word	0x40007000
 8002f90:	42420440 	.word	0x42420440

08002f94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e041      	b.n	800302a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d106      	bne.n	8002fc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7fd ffae 	bl	8000f1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3304      	adds	r3, #4
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	f000 fc2a 	bl	800382c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
	...

08003034 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b01      	cmp	r3, #1
 8003046:	d001      	beq.n	800304c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e032      	b.n	80030b2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a18      	ldr	r2, [pc, #96]	; (80030bc <HAL_TIM_Base_Start+0x88>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00e      	beq.n	800307c <HAL_TIM_Base_Start+0x48>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003066:	d009      	beq.n	800307c <HAL_TIM_Base_Start+0x48>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a14      	ldr	r2, [pc, #80]	; (80030c0 <HAL_TIM_Base_Start+0x8c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d004      	beq.n	800307c <HAL_TIM_Base_Start+0x48>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a13      	ldr	r2, [pc, #76]	; (80030c4 <HAL_TIM_Base_Start+0x90>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d111      	bne.n	80030a0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b06      	cmp	r3, #6
 800308c:	d010      	beq.n	80030b0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f042 0201 	orr.w	r2, r2, #1
 800309c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800309e:	e007      	b.n	80030b0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0201 	orr.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr
 80030bc:	40012c00 	.word	0x40012c00
 80030c0:	40000400 	.word	0x40000400
 80030c4:	40000800 	.word	0x40000800

080030c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e041      	b.n	800315e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d106      	bne.n	80030f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f839 	bl	8003166 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2202      	movs	r2, #2
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3304      	adds	r3, #4
 8003104:	4619      	mov	r1, r3
 8003106:	4610      	mov	r0, r2
 8003108:	f000 fb90 	bl	800382c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr

08003178 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d109      	bne.n	800319c <HAL_TIM_PWM_Start+0x24>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b01      	cmp	r3, #1
 8003192:	bf14      	ite	ne
 8003194:	2301      	movne	r3, #1
 8003196:	2300      	moveq	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	e022      	b.n	80031e2 <HAL_TIM_PWM_Start+0x6a>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d109      	bne.n	80031b6 <HAL_TIM_PWM_Start+0x3e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	bf14      	ite	ne
 80031ae:	2301      	movne	r3, #1
 80031b0:	2300      	moveq	r3, #0
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	e015      	b.n	80031e2 <HAL_TIM_PWM_Start+0x6a>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d109      	bne.n	80031d0 <HAL_TIM_PWM_Start+0x58>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	bf14      	ite	ne
 80031c8:	2301      	movne	r3, #1
 80031ca:	2300      	moveq	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	e008      	b.n	80031e2 <HAL_TIM_PWM_Start+0x6a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b01      	cmp	r3, #1
 80031da:	bf14      	ite	ne
 80031dc:	2301      	movne	r3, #1
 80031de:	2300      	moveq	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e05e      	b.n	80032a8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d104      	bne.n	80031fa <HAL_TIM_PWM_Start+0x82>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2202      	movs	r2, #2
 80031f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031f8:	e013      	b.n	8003222 <HAL_TIM_PWM_Start+0xaa>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b04      	cmp	r3, #4
 80031fe:	d104      	bne.n	800320a <HAL_TIM_PWM_Start+0x92>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003208:	e00b      	b.n	8003222 <HAL_TIM_PWM_Start+0xaa>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2b08      	cmp	r3, #8
 800320e:	d104      	bne.n	800321a <HAL_TIM_PWM_Start+0xa2>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003218:	e003      	b.n	8003222 <HAL_TIM_PWM_Start+0xaa>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2202      	movs	r2, #2
 800321e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2201      	movs	r2, #1
 8003228:	6839      	ldr	r1, [r7, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f000 fd7e 	bl	8003d2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a1e      	ldr	r2, [pc, #120]	; (80032b0 <HAL_TIM_PWM_Start+0x138>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d107      	bne.n	800324a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003248:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a18      	ldr	r2, [pc, #96]	; (80032b0 <HAL_TIM_PWM_Start+0x138>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d00e      	beq.n	8003272 <HAL_TIM_PWM_Start+0xfa>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325c:	d009      	beq.n	8003272 <HAL_TIM_PWM_Start+0xfa>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a14      	ldr	r2, [pc, #80]	; (80032b4 <HAL_TIM_PWM_Start+0x13c>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d004      	beq.n	8003272 <HAL_TIM_PWM_Start+0xfa>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a12      	ldr	r2, [pc, #72]	; (80032b8 <HAL_TIM_PWM_Start+0x140>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d111      	bne.n	8003296 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2b06      	cmp	r3, #6
 8003282:	d010      	beq.n	80032a6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0201 	orr.w	r2, r2, #1
 8003292:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003294:	e007      	b.n	80032a6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0201 	orr.w	r2, r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40012c00 	.word	0x40012c00
 80032b4:	40000400 	.word	0x40000400
 80032b8:	40000800 	.word	0x40000800

080032bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d122      	bne.n	8003318 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d11b      	bne.n	8003318 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f06f 0202 	mvn.w	r2, #2
 80032e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fa78 	bl	80037f4 <HAL_TIM_IC_CaptureCallback>
 8003304:	e005      	b.n	8003312 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 fa6b 	bl	80037e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 fa7a 	bl	8003806 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	2b04      	cmp	r3, #4
 8003324:	d122      	bne.n	800336c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b04      	cmp	r3, #4
 8003332:	d11b      	bne.n	800336c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f06f 0204 	mvn.w	r2, #4
 800333c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2202      	movs	r2, #2
 8003342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 fa4e 	bl	80037f4 <HAL_TIM_IC_CaptureCallback>
 8003358:	e005      	b.n	8003366 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 fa41 	bl	80037e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 fa50 	bl	8003806 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b08      	cmp	r3, #8
 8003378:	d122      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f003 0308 	and.w	r3, r3, #8
 8003384:	2b08      	cmp	r3, #8
 8003386:	d11b      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f06f 0208 	mvn.w	r2, #8
 8003390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2204      	movs	r2, #4
 8003396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 fa24 	bl	80037f4 <HAL_TIM_IC_CaptureCallback>
 80033ac:	e005      	b.n	80033ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fa17 	bl	80037e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 fa26 	bl	8003806 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	f003 0310 	and.w	r3, r3, #16
 80033ca:	2b10      	cmp	r3, #16
 80033cc:	d122      	bne.n	8003414 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	2b10      	cmp	r3, #16
 80033da:	d11b      	bne.n	8003414 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f06f 0210 	mvn.w	r2, #16
 80033e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2208      	movs	r2, #8
 80033ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f9fa 	bl	80037f4 <HAL_TIM_IC_CaptureCallback>
 8003400:	e005      	b.n	800340e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f9ed 	bl	80037e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f9fc 	bl	8003806 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b01      	cmp	r3, #1
 8003420:	d10e      	bne.n	8003440 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b01      	cmp	r3, #1
 800342e:	d107      	bne.n	8003440 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f06f 0201 	mvn.w	r2, #1
 8003438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f9c8 	bl	80037d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344a:	2b80      	cmp	r3, #128	; 0x80
 800344c:	d10e      	bne.n	800346c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003458:	2b80      	cmp	r3, #128	; 0x80
 800345a:	d107      	bne.n	800346c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 fceb 	bl	8003e42 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003476:	2b40      	cmp	r3, #64	; 0x40
 8003478:	d10e      	bne.n	8003498 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003484:	2b40      	cmp	r3, #64	; 0x40
 8003486:	d107      	bne.n	8003498 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f9c0 	bl	8003818 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	f003 0320 	and.w	r3, r3, #32
 80034a2:	2b20      	cmp	r3, #32
 80034a4:	d10e      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f003 0320 	and.w	r3, r3, #32
 80034b0:	2b20      	cmp	r3, #32
 80034b2:	d107      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f06f 0220 	mvn.w	r2, #32
 80034bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 fcb6 	bl	8003e30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034c4:	bf00      	nop
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d101      	bne.n	80034e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80034e2:	2302      	movs	r3, #2
 80034e4:	e0ac      	b.n	8003640 <HAL_TIM_PWM_ConfigChannel+0x174>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b0c      	cmp	r3, #12
 80034f2:	f200 809f 	bhi.w	8003634 <HAL_TIM_PWM_ConfigChannel+0x168>
 80034f6:	a201      	add	r2, pc, #4	; (adr r2, 80034fc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80034f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fc:	08003531 	.word	0x08003531
 8003500:	08003635 	.word	0x08003635
 8003504:	08003635 	.word	0x08003635
 8003508:	08003635 	.word	0x08003635
 800350c:	08003571 	.word	0x08003571
 8003510:	08003635 	.word	0x08003635
 8003514:	08003635 	.word	0x08003635
 8003518:	08003635 	.word	0x08003635
 800351c:	080035b3 	.word	0x080035b3
 8003520:	08003635 	.word	0x08003635
 8003524:	08003635 	.word	0x08003635
 8003528:	08003635 	.word	0x08003635
 800352c:	080035f3 	.word	0x080035f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68b9      	ldr	r1, [r7, #8]
 8003536:	4618      	mov	r0, r3
 8003538:	f000 f9da 	bl	80038f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699a      	ldr	r2, [r3, #24]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f042 0208 	orr.w	r2, r2, #8
 800354a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	699a      	ldr	r2, [r3, #24]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 0204 	bic.w	r2, r2, #4
 800355a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6999      	ldr	r1, [r3, #24]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	691a      	ldr	r2, [r3, #16]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	619a      	str	r2, [r3, #24]
      break;
 800356e:	e062      	b.n	8003636 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68b9      	ldr	r1, [r7, #8]
 8003576:	4618      	mov	r0, r3
 8003578:	f000 fa20 	bl	80039bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699a      	ldr	r2, [r3, #24]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800358a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	699a      	ldr	r2, [r3, #24]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800359a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6999      	ldr	r1, [r3, #24]
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	021a      	lsls	r2, r3, #8
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	619a      	str	r2, [r3, #24]
      break;
 80035b0:	e041      	b.n	8003636 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68b9      	ldr	r1, [r7, #8]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 fa69 	bl	8003a90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	69da      	ldr	r2, [r3, #28]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f042 0208 	orr.w	r2, r2, #8
 80035cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	69da      	ldr	r2, [r3, #28]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0204 	bic.w	r2, r2, #4
 80035dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	69d9      	ldr	r1, [r3, #28]
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	61da      	str	r2, [r3, #28]
      break;
 80035f0:	e021      	b.n	8003636 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68b9      	ldr	r1, [r7, #8]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 fab3 	bl	8003b64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	69da      	ldr	r2, [r3, #28]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800360c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	69da      	ldr	r2, [r3, #28]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800361c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	69d9      	ldr	r1, [r3, #28]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	021a      	lsls	r2, r3, #8
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	61da      	str	r2, [r3, #28]
      break;
 8003632:	e000      	b.n	8003636 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003634:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <HAL_TIM_ConfigClockSource+0x18>
 800365c:	2302      	movs	r3, #2
 800365e:	e0b3      	b.n	80037c8 <HAL_TIM_ConfigClockSource+0x180>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2202      	movs	r2, #2
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800367e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003686:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003698:	d03e      	beq.n	8003718 <HAL_TIM_ConfigClockSource+0xd0>
 800369a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800369e:	f200 8087 	bhi.w	80037b0 <HAL_TIM_ConfigClockSource+0x168>
 80036a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a6:	f000 8085 	beq.w	80037b4 <HAL_TIM_ConfigClockSource+0x16c>
 80036aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ae:	d87f      	bhi.n	80037b0 <HAL_TIM_ConfigClockSource+0x168>
 80036b0:	2b70      	cmp	r3, #112	; 0x70
 80036b2:	d01a      	beq.n	80036ea <HAL_TIM_ConfigClockSource+0xa2>
 80036b4:	2b70      	cmp	r3, #112	; 0x70
 80036b6:	d87b      	bhi.n	80037b0 <HAL_TIM_ConfigClockSource+0x168>
 80036b8:	2b60      	cmp	r3, #96	; 0x60
 80036ba:	d050      	beq.n	800375e <HAL_TIM_ConfigClockSource+0x116>
 80036bc:	2b60      	cmp	r3, #96	; 0x60
 80036be:	d877      	bhi.n	80037b0 <HAL_TIM_ConfigClockSource+0x168>
 80036c0:	2b50      	cmp	r3, #80	; 0x50
 80036c2:	d03c      	beq.n	800373e <HAL_TIM_ConfigClockSource+0xf6>
 80036c4:	2b50      	cmp	r3, #80	; 0x50
 80036c6:	d873      	bhi.n	80037b0 <HAL_TIM_ConfigClockSource+0x168>
 80036c8:	2b40      	cmp	r3, #64	; 0x40
 80036ca:	d058      	beq.n	800377e <HAL_TIM_ConfigClockSource+0x136>
 80036cc:	2b40      	cmp	r3, #64	; 0x40
 80036ce:	d86f      	bhi.n	80037b0 <HAL_TIM_ConfigClockSource+0x168>
 80036d0:	2b30      	cmp	r3, #48	; 0x30
 80036d2:	d064      	beq.n	800379e <HAL_TIM_ConfigClockSource+0x156>
 80036d4:	2b30      	cmp	r3, #48	; 0x30
 80036d6:	d86b      	bhi.n	80037b0 <HAL_TIM_ConfigClockSource+0x168>
 80036d8:	2b20      	cmp	r3, #32
 80036da:	d060      	beq.n	800379e <HAL_TIM_ConfigClockSource+0x156>
 80036dc:	2b20      	cmp	r3, #32
 80036de:	d867      	bhi.n	80037b0 <HAL_TIM_ConfigClockSource+0x168>
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d05c      	beq.n	800379e <HAL_TIM_ConfigClockSource+0x156>
 80036e4:	2b10      	cmp	r3, #16
 80036e6:	d05a      	beq.n	800379e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80036e8:	e062      	b.n	80037b0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6818      	ldr	r0, [r3, #0]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	6899      	ldr	r1, [r3, #8]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f000 faf8 	bl	8003cee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800370c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	609a      	str	r2, [r3, #8]
      break;
 8003716:	e04e      	b.n	80037b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6818      	ldr	r0, [r3, #0]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	6899      	ldr	r1, [r3, #8]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f000 fae1 	bl	8003cee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800373a:	609a      	str	r2, [r3, #8]
      break;
 800373c:	e03b      	b.n	80037b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6818      	ldr	r0, [r3, #0]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	6859      	ldr	r1, [r3, #4]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	461a      	mov	r2, r3
 800374c:	f000 fa58 	bl	8003c00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2150      	movs	r1, #80	; 0x50
 8003756:	4618      	mov	r0, r3
 8003758:	f000 faaf 	bl	8003cba <TIM_ITRx_SetConfig>
      break;
 800375c:	e02b      	b.n	80037b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6818      	ldr	r0, [r3, #0]
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	6859      	ldr	r1, [r3, #4]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	461a      	mov	r2, r3
 800376c:	f000 fa76 	bl	8003c5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2160      	movs	r1, #96	; 0x60
 8003776:	4618      	mov	r0, r3
 8003778:	f000 fa9f 	bl	8003cba <TIM_ITRx_SetConfig>
      break;
 800377c:	e01b      	b.n	80037b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6818      	ldr	r0, [r3, #0]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	6859      	ldr	r1, [r3, #4]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	461a      	mov	r2, r3
 800378c:	f000 fa38 	bl	8003c00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2140      	movs	r1, #64	; 0x40
 8003796:	4618      	mov	r0, r3
 8003798:	f000 fa8f 	bl	8003cba <TIM_ITRx_SetConfig>
      break;
 800379c:	e00b      	b.n	80037b6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4619      	mov	r1, r3
 80037a8:	4610      	mov	r0, r2
 80037aa:	f000 fa86 	bl	8003cba <TIM_ITRx_SetConfig>
        break;
 80037ae:	e002      	b.n	80037b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80037b0:	bf00      	nop
 80037b2:	e000      	b.n	80037b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80037b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr

080037e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bc80      	pop	{r7}
 80037f2:	4770      	bx	lr

080037f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	bc80      	pop	{r7}
 8003804:	4770      	bx	lr

08003806 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr

08003818 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr
	...

0800382c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a29      	ldr	r2, [pc, #164]	; (80038e4 <TIM_Base_SetConfig+0xb8>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d00b      	beq.n	800385c <TIM_Base_SetConfig+0x30>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800384a:	d007      	beq.n	800385c <TIM_Base_SetConfig+0x30>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a26      	ldr	r2, [pc, #152]	; (80038e8 <TIM_Base_SetConfig+0xbc>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d003      	beq.n	800385c <TIM_Base_SetConfig+0x30>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a25      	ldr	r2, [pc, #148]	; (80038ec <TIM_Base_SetConfig+0xc0>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d108      	bne.n	800386e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003862:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a1c      	ldr	r2, [pc, #112]	; (80038e4 <TIM_Base_SetConfig+0xb8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d00b      	beq.n	800388e <TIM_Base_SetConfig+0x62>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800387c:	d007      	beq.n	800388e <TIM_Base_SetConfig+0x62>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a19      	ldr	r2, [pc, #100]	; (80038e8 <TIM_Base_SetConfig+0xbc>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d003      	beq.n	800388e <TIM_Base_SetConfig+0x62>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a18      	ldr	r2, [pc, #96]	; (80038ec <TIM_Base_SetConfig+0xc0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d108      	bne.n	80038a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	4313      	orrs	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a07      	ldr	r2, [pc, #28]	; (80038e4 <TIM_Base_SetConfig+0xb8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d103      	bne.n	80038d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	691a      	ldr	r2, [r3, #16]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	615a      	str	r2, [r3, #20]
}
 80038da:	bf00      	nop
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr
 80038e4:	40012c00 	.word	0x40012c00
 80038e8:	40000400 	.word	0x40000400
 80038ec:	40000800 	.word	0x40000800

080038f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	f023 0201 	bic.w	r2, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800391e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f023 0303 	bic.w	r3, r3, #3
 8003926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f023 0302 	bic.w	r3, r3, #2
 8003938:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	4313      	orrs	r3, r2
 8003942:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a1c      	ldr	r2, [pc, #112]	; (80039b8 <TIM_OC1_SetConfig+0xc8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d10c      	bne.n	8003966 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f023 0308 	bic.w	r3, r3, #8
 8003952:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	4313      	orrs	r3, r2
 800395c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f023 0304 	bic.w	r3, r3, #4
 8003964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a13      	ldr	r2, [pc, #76]	; (80039b8 <TIM_OC1_SetConfig+0xc8>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d111      	bne.n	8003992 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800397c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	4313      	orrs	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	621a      	str	r2, [r3, #32]
}
 80039ac:	bf00      	nop
 80039ae:	371c      	adds	r7, #28
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40012c00 	.word	0x40012c00

080039bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039bc:	b480      	push	{r7}
 80039be:	b087      	sub	sp, #28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	f023 0210 	bic.w	r2, r3, #16
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	021b      	lsls	r3, r3, #8
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f023 0320 	bic.w	r3, r3, #32
 8003a06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a1d      	ldr	r2, [pc, #116]	; (8003a8c <TIM_OC2_SetConfig+0xd0>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d10d      	bne.n	8003a38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a14      	ldr	r2, [pc, #80]	; (8003a8c <TIM_OC2_SetConfig+0xd0>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d113      	bne.n	8003a68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	621a      	str	r2, [r3, #32]
}
 8003a82:	bf00      	nop
 8003a84:	371c      	adds	r7, #28
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bc80      	pop	{r7}
 8003a8a:	4770      	bx	lr
 8003a8c:	40012c00 	.word	0x40012c00

08003a90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f023 0303 	bic.w	r3, r3, #3
 8003ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	021b      	lsls	r3, r3, #8
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a1d      	ldr	r2, [pc, #116]	; (8003b60 <TIM_OC3_SetConfig+0xd0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d10d      	bne.n	8003b0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003af4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	021b      	lsls	r3, r3, #8
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a14      	ldr	r2, [pc, #80]	; (8003b60 <TIM_OC3_SetConfig+0xd0>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d113      	bne.n	8003b3a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	011b      	lsls	r3, r3, #4
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	621a      	str	r2, [r3, #32]
}
 8003b54:	bf00      	nop
 8003b56:	371c      	adds	r7, #28
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	40012c00 	.word	0x40012c00

08003b64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	021b      	lsls	r3, r3, #8
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	031b      	lsls	r3, r3, #12
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a0f      	ldr	r2, [pc, #60]	; (8003bfc <TIM_OC4_SetConfig+0x98>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d109      	bne.n	8003bd8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	019b      	lsls	r3, r3, #6
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	621a      	str	r2, [r3, #32]
}
 8003bf2:	bf00      	nop
 8003bf4:	371c      	adds	r7, #28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bc80      	pop	{r7}
 8003bfa:	4770      	bx	lr
 8003bfc:	40012c00 	.word	0x40012c00

08003c00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	f023 0201 	bic.w	r2, r3, #1
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f023 030a 	bic.w	r3, r3, #10
 8003c3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	621a      	str	r2, [r3, #32]
}
 8003c52:	bf00      	nop
 8003c54:	371c      	adds	r7, #28
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr

08003c5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	f023 0210 	bic.w	r2, r3, #16
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	031b      	lsls	r3, r3, #12
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	621a      	str	r2, [r3, #32]
}
 8003cb0:	bf00      	nop
 8003cb2:	371c      	adds	r7, #28
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr

08003cba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b085      	sub	sp, #20
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f043 0307 	orr.w	r3, r3, #7
 8003cdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	609a      	str	r2, [r3, #8]
}
 8003ce4:	bf00      	nop
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bc80      	pop	{r7}
 8003cec:	4770      	bx	lr

08003cee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b087      	sub	sp, #28
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607a      	str	r2, [r7, #4]
 8003cfa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d08:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	021a      	lsls	r2, r3, #8
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	431a      	orrs	r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	609a      	str	r2, [r3, #8]
}
 8003d22:	bf00      	nop
 8003d24:	371c      	adds	r7, #28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr

08003d2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f003 031f 	and.w	r3, r3, #31
 8003d3e:	2201      	movs	r2, #1
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6a1a      	ldr	r2, [r3, #32]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	43db      	mvns	r3, r3
 8003d4e:	401a      	ands	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a1a      	ldr	r2, [r3, #32]
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	f003 031f 	and.w	r3, r3, #31
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	fa01 f303 	lsl.w	r3, r1, r3
 8003d64:	431a      	orrs	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	621a      	str	r2, [r3, #32]
}
 8003d6a:	bf00      	nop
 8003d6c:	371c      	adds	r7, #28
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr

08003d74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d101      	bne.n	8003d8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	e046      	b.n	8003e1a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a16      	ldr	r2, [pc, #88]	; (8003e24 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d00e      	beq.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd8:	d009      	beq.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a12      	ldr	r2, [pc, #72]	; (8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d004      	beq.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a10      	ldr	r2, [pc, #64]	; (8003e2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d10c      	bne.n	8003e08 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003df4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bc80      	pop	{r7}
 8003e22:	4770      	bx	lr
 8003e24:	40012c00 	.word	0x40012c00
 8003e28:	40000400 	.word	0x40000400
 8003e2c:	40000800 	.word	0x40000800

08003e30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bc80      	pop	{r7}
 8003e40:	4770      	bx	lr

08003e42 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr

08003e54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e03f      	b.n	8003ee6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d106      	bne.n	8003e80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7fd f8d2 	bl	8001024 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2224      	movs	r2, #36	; 0x24
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68da      	ldr	r2, [r3, #12]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 fc7d 	bl	8004798 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	691a      	ldr	r2, [r3, #16]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003eac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	695a      	ldr	r2, [r3, #20]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ebc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68da      	ldr	r2, [r3, #12]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ecc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b08a      	sub	sp, #40	; 0x28
 8003ef2:	af02      	add	r7, sp, #8
 8003ef4:	60f8      	str	r0, [r7, #12]
 8003ef6:	60b9      	str	r1, [r7, #8]
 8003ef8:	603b      	str	r3, [r7, #0]
 8003efa:	4613      	mov	r3, r2
 8003efc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b20      	cmp	r3, #32
 8003f0c:	d17c      	bne.n	8004008 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <HAL_UART_Transmit+0x2c>
 8003f14:	88fb      	ldrh	r3, [r7, #6]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e075      	b.n	800400a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d101      	bne.n	8003f2c <HAL_UART_Transmit+0x3e>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e06e      	b.n	800400a <HAL_UART_Transmit+0x11c>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2221      	movs	r2, #33	; 0x21
 8003f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f42:	f7fd fa9b 	bl	800147c <HAL_GetTick>
 8003f46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	88fa      	ldrh	r2, [r7, #6]
 8003f4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	88fa      	ldrh	r2, [r7, #6]
 8003f52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f5c:	d108      	bne.n	8003f70 <HAL_UART_Transmit+0x82>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d104      	bne.n	8003f70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003f66:	2300      	movs	r3, #0
 8003f68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	61bb      	str	r3, [r7, #24]
 8003f6e:	e003      	b.n	8003f78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f74:	2300      	movs	r3, #0
 8003f76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003f80:	e02a      	b.n	8003fd8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	2180      	movs	r1, #128	; 0x80
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 fa2f 	bl	80043f0 <UART_WaitOnFlagUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e036      	b.n	800400a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10b      	bne.n	8003fba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	3302      	adds	r3, #2
 8003fb6:	61bb      	str	r3, [r7, #24]
 8003fb8:	e007      	b.n	8003fca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	781a      	ldrb	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1cf      	bne.n	8003f82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	2140      	movs	r1, #64	; 0x40
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 f9ff 	bl	80043f0 <UART_WaitOnFlagUntilTimeout>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e006      	b.n	800400a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004004:	2300      	movs	r3, #0
 8004006:	e000      	b.n	800400a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004008:	2302      	movs	r3, #2
  }
}
 800400a:	4618      	mov	r0, r3
 800400c:	3720      	adds	r7, #32
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b084      	sub	sp, #16
 8004016:	af00      	add	r7, sp, #0
 8004018:	60f8      	str	r0, [r7, #12]
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	4613      	mov	r3, r2
 800401e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b20      	cmp	r3, #32
 800402a:	d11d      	bne.n	8004068 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <HAL_UART_Receive_IT+0x26>
 8004032:	88fb      	ldrh	r3, [r7, #6]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e016      	b.n	800406a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004042:	2b01      	cmp	r3, #1
 8004044:	d101      	bne.n	800404a <HAL_UART_Receive_IT+0x38>
 8004046:	2302      	movs	r3, #2
 8004048:	e00f      	b.n	800406a <HAL_UART_Receive_IT+0x58>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004058:	88fb      	ldrh	r3, [r7, #6]
 800405a:	461a      	mov	r2, r3
 800405c:	68b9      	ldr	r1, [r7, #8]
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 fa10 	bl	8004484 <UART_Start_Receive_IT>
 8004064:	4603      	mov	r3, r0
 8004066:	e000      	b.n	800406a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004068:	2302      	movs	r3, #2
  }
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
	...

08004074 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b08a      	sub	sp, #40	; 0x28
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004094:	2300      	movs	r3, #0
 8004096:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004098:	2300      	movs	r3, #0
 800409a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10d      	bne.n	80040c6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	f003 0320 	and.w	r3, r3, #32
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d008      	beq.n	80040c6 <HAL_UART_IRQHandler+0x52>
 80040b4:	6a3b      	ldr	r3, [r7, #32]
 80040b6:	f003 0320 	and.w	r3, r3, #32
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fac0 	bl	8004644 <UART_Receive_IT>
      return;
 80040c4:	e17b      	b.n	80043be <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 80b1 	beq.w	8004230 <HAL_UART_IRQHandler+0x1bc>
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d105      	bne.n	80040e4 <HAL_UART_IRQHandler+0x70>
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 80a6 	beq.w	8004230 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <HAL_UART_IRQHandler+0x90>
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fc:	f043 0201 	orr.w	r2, r3, #1
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	f003 0304 	and.w	r3, r3, #4
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00a      	beq.n	8004124 <HAL_UART_IRQHandler+0xb0>
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	f043 0202 	orr.w	r2, r3, #2
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <HAL_UART_IRQHandler+0xd0>
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	f043 0204 	orr.w	r2, r3, #4
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004146:	f003 0308 	and.w	r3, r3, #8
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00f      	beq.n	800416e <HAL_UART_IRQHandler+0xfa>
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	2b00      	cmp	r3, #0
 8004156:	d104      	bne.n	8004162 <HAL_UART_IRQHandler+0xee>
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d005      	beq.n	800416e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	f043 0208 	orr.w	r2, r3, #8
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 811e 	beq.w	80043b4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b00      	cmp	r3, #0
 8004180:	d007      	beq.n	8004192 <HAL_UART_IRQHandler+0x11e>
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	f003 0320 	and.w	r3, r3, #32
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 fa59 	bl	8004644 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419c:	2b00      	cmp	r3, #0
 800419e:	bf14      	ite	ne
 80041a0:	2301      	movne	r3, #1
 80041a2:	2300      	moveq	r3, #0
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d102      	bne.n	80041ba <HAL_UART_IRQHandler+0x146>
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d031      	beq.n	800421e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f99b 	bl	80044f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d023      	beq.n	8004216 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695a      	ldr	r2, [r3, #20]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041dc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d013      	beq.n	800420e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ea:	4a76      	ldr	r2, [pc, #472]	; (80043c4 <HAL_UART_IRQHandler+0x350>)
 80041ec:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fd fd2a 	bl	8001c4c <HAL_DMA_Abort_IT>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d016      	beq.n	800422c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004208:	4610      	mov	r0, r2
 800420a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800420c:	e00e      	b.n	800422c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7fc f940 	bl	8000494 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004214:	e00a      	b.n	800422c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7fc f93c 	bl	8000494 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800421c:	e006      	b.n	800422c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7fc f938 	bl	8000494 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800422a:	e0c3      	b.n	80043b4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800422c:	bf00      	nop
    return;
 800422e:	e0c1      	b.n	80043b4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004234:	2b01      	cmp	r3, #1
 8004236:	f040 80a1 	bne.w	800437c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	f003 0310 	and.w	r3, r3, #16
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 809b 	beq.w	800437c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004246:	6a3b      	ldr	r3, [r7, #32]
 8004248:	f003 0310 	and.w	r3, r3, #16
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 8095 	beq.w	800437c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004252:	2300      	movs	r3, #0
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004272:	2b00      	cmp	r3, #0
 8004274:	d04e      	beq.n	8004314 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004280:	8a3b      	ldrh	r3, [r7, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 8098 	beq.w	80043b8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800428c:	8a3a      	ldrh	r2, [r7, #16]
 800428e:	429a      	cmp	r2, r3
 8004290:	f080 8092 	bcs.w	80043b8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	8a3a      	ldrh	r2, [r7, #16]
 8004298:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	2b20      	cmp	r3, #32
 80042a2:	d02b      	beq.n	80042fc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042b2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695a      	ldr	r2, [r3, #20]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 0201 	bic.w	r2, r2, #1
 80042c2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	695a      	ldr	r2, [r3, #20]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042d2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68da      	ldr	r2, [r3, #12]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0210 	bic.w	r2, r2, #16
 80042f0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fd fc6e 	bl	8001bd8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004304:	b29b      	uxth	r3, r3
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	b29b      	uxth	r3, r3
 800430a:	4619      	mov	r1, r3
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 f864 	bl	80043da <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004312:	e051      	b.n	80043b8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800431c:	b29b      	uxth	r3, r3
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004326:	b29b      	uxth	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	d047      	beq.n	80043bc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800432c:	8a7b      	ldrh	r3, [r7, #18]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d044      	beq.n	80043bc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004340:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695a      	ldr	r2, [r3, #20]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0201 	bic.w	r2, r2, #1
 8004350:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2220      	movs	r2, #32
 8004356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 0210 	bic.w	r2, r2, #16
 800436e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004370:	8a7b      	ldrh	r3, [r7, #18]
 8004372:	4619      	mov	r1, r3
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f830 	bl	80043da <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800437a:	e01f      	b.n	80043bc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004382:	2b00      	cmp	r3, #0
 8004384:	d008      	beq.n	8004398 <HAL_UART_IRQHandler+0x324>
 8004386:	6a3b      	ldr	r3, [r7, #32]
 8004388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f8f0 	bl	8004576 <UART_Transmit_IT>
    return;
 8004396:	e012      	b.n	80043be <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00d      	beq.n	80043be <HAL_UART_IRQHandler+0x34a>
 80043a2:	6a3b      	ldr	r3, [r7, #32]
 80043a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d008      	beq.n	80043be <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f931 	bl	8004614 <UART_EndTransmit_IT>
    return;
 80043b2:	e004      	b.n	80043be <HAL_UART_IRQHandler+0x34a>
    return;
 80043b4:	bf00      	nop
 80043b6:	e002      	b.n	80043be <HAL_UART_IRQHandler+0x34a>
      return;
 80043b8:	bf00      	nop
 80043ba:	e000      	b.n	80043be <HAL_UART_IRQHandler+0x34a>
      return;
 80043bc:	bf00      	nop
  }
}
 80043be:	3728      	adds	r7, #40	; 0x28
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	0800454f 	.word	0x0800454f

080043c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc80      	pop	{r7}
 80043d8:	4770      	bx	lr

080043da <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	460b      	mov	r3, r1
 80043e4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bc80      	pop	{r7}
 80043ee:	4770      	bx	lr

080043f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	603b      	str	r3, [r7, #0]
 80043fc:	4613      	mov	r3, r2
 80043fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004400:	e02c      	b.n	800445c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004408:	d028      	beq.n	800445c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d007      	beq.n	8004420 <UART_WaitOnFlagUntilTimeout+0x30>
 8004410:	f7fd f834 	bl	800147c <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	429a      	cmp	r2, r3
 800441e:	d21d      	bcs.n	800445c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800442e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695a      	ldr	r2, [r3, #20]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0201 	bic.w	r2, r2, #1
 800443e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2220      	movs	r2, #32
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e00f      	b.n	800447c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	4013      	ands	r3, r2
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	429a      	cmp	r2, r3
 800446a:	bf0c      	ite	eq
 800446c:	2301      	moveq	r3, #1
 800446e:	2300      	movne	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	461a      	mov	r2, r3
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	429a      	cmp	r2, r3
 8004478:	d0c3      	beq.n	8004402 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	4613      	mov	r3, r2
 8004490:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	88fa      	ldrh	r2, [r7, #6]
 800449c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	88fa      	ldrh	r2, [r7, #6]
 80044a2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2222      	movs	r2, #34	; 0x22
 80044ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044c8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695a      	ldr	r2, [r3, #20]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f042 0201 	orr.w	r2, r2, #1
 80044d8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f042 0220 	orr.w	r2, r2, #32
 80044e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bc80      	pop	{r7}
 80044f4:	4770      	bx	lr

080044f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b083      	sub	sp, #12
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68da      	ldr	r2, [r3, #12]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800450c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	695a      	ldr	r2, [r3, #20]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 0201 	bic.w	r2, r2, #1
 800451c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004522:	2b01      	cmp	r3, #1
 8004524:	d107      	bne.n	8004536 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68da      	ldr	r2, [r3, #12]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0210 	bic.w	r2, r2, #16
 8004534:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2220      	movs	r2, #32
 800453a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	bc80      	pop	{r7}
 800454c:	4770      	bx	lr

0800454e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b084      	sub	sp, #16
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f7fb ff93 	bl	8000494 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800456e:	bf00      	nop
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004576:	b480      	push	{r7}
 8004578:	b085      	sub	sp, #20
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b21      	cmp	r3, #33	; 0x21
 8004588:	d13e      	bne.n	8004608 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004592:	d114      	bne.n	80045be <UART_Transmit_IT+0x48>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d110      	bne.n	80045be <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	881b      	ldrh	r3, [r3, #0]
 80045a6:	461a      	mov	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	1c9a      	adds	r2, r3, #2
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	621a      	str	r2, [r3, #32]
 80045bc:	e008      	b.n	80045d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	1c59      	adds	r1, r3, #1
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6211      	str	r1, [r2, #32]
 80045c8:	781a      	ldrb	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	3b01      	subs	r3, #1
 80045d8:	b29b      	uxth	r3, r3
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	4619      	mov	r1, r3
 80045de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10f      	bne.n	8004604 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004602:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004604:	2300      	movs	r3, #0
 8004606:	e000      	b.n	800460a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004608:	2302      	movs	r3, #2
  }
}
 800460a:	4618      	mov	r0, r3
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	bc80      	pop	{r7}
 8004612:	4770      	bx	lr

08004614 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800462a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2220      	movs	r2, #32
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7ff fec7 	bl	80043c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b22      	cmp	r3, #34	; 0x22
 8004656:	f040 8099 	bne.w	800478c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004662:	d117      	bne.n	8004694 <UART_Receive_IT+0x50>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d113      	bne.n	8004694 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800466c:	2300      	movs	r3, #0
 800466e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004674:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	b29b      	uxth	r3, r3
 800467e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004682:	b29a      	uxth	r2, r3
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468c:	1c9a      	adds	r2, r3, #2
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	629a      	str	r2, [r3, #40]	; 0x28
 8004692:	e026      	b.n	80046e2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004698:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800469a:	2300      	movs	r3, #0
 800469c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a6:	d007      	beq.n	80046b8 <UART_Receive_IT+0x74>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10a      	bne.n	80046c6 <UART_Receive_IT+0x82>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d106      	bne.n	80046c6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	701a      	strb	r2, [r3, #0]
 80046c4:	e008      	b.n	80046d8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046dc:	1c5a      	adds	r2, r3, #1
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	3b01      	subs	r3, #1
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	4619      	mov	r1, r3
 80046f0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d148      	bne.n	8004788 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68da      	ldr	r2, [r3, #12]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0220 	bic.w	r2, r2, #32
 8004704:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68da      	ldr	r2, [r3, #12]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004714:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	695a      	ldr	r2, [r3, #20]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0201 	bic.w	r2, r2, #1
 8004724:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2220      	movs	r2, #32
 800472a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	2b01      	cmp	r3, #1
 8004734:	d123      	bne.n	800477e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0210 	bic.w	r2, r2, #16
 800474a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0310 	and.w	r3, r3, #16
 8004756:	2b10      	cmp	r3, #16
 8004758:	d10a      	bne.n	8004770 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800475a:	2300      	movs	r3, #0
 800475c:	60fb      	str	r3, [r7, #12]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004774:	4619      	mov	r1, r3
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7ff fe2f 	bl	80043da <HAL_UARTEx_RxEventCallback>
 800477c:	e002      	b.n	8004784 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7fb fe76 	bl	8000470 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004784:	2300      	movs	r3, #0
 8004786:	e002      	b.n	800478e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004788:	2300      	movs	r3, #0
 800478a:	e000      	b.n	800478e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800478c:	2302      	movs	r3, #2
  }
}
 800478e:	4618      	mov	r0, r3
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
	...

08004798 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68da      	ldr	r2, [r3, #12]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689a      	ldr	r2, [r3, #8]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	431a      	orrs	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80047d2:	f023 030c 	bic.w	r3, r3, #12
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6812      	ldr	r2, [r2, #0]
 80047da:	68b9      	ldr	r1, [r7, #8]
 80047dc:	430b      	orrs	r3, r1
 80047de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699a      	ldr	r2, [r3, #24]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a2c      	ldr	r2, [pc, #176]	; (80048ac <UART_SetConfig+0x114>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d103      	bne.n	8004808 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004800:	f7fe fae0 	bl	8002dc4 <HAL_RCC_GetPCLK2Freq>
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	e002      	b.n	800480e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004808:	f7fe fac8 	bl	8002d9c <HAL_RCC_GetPCLK1Freq>
 800480c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	4613      	mov	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	009a      	lsls	r2, r3, #2
 8004818:	441a      	add	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	fbb2 f3f3 	udiv	r3, r2, r3
 8004824:	4a22      	ldr	r2, [pc, #136]	; (80048b0 <UART_SetConfig+0x118>)
 8004826:	fba2 2303 	umull	r2, r3, r2, r3
 800482a:	095b      	lsrs	r3, r3, #5
 800482c:	0119      	lsls	r1, r3, #4
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	4613      	mov	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	009a      	lsls	r2, r3, #2
 8004838:	441a      	add	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	fbb2 f2f3 	udiv	r2, r2, r3
 8004844:	4b1a      	ldr	r3, [pc, #104]	; (80048b0 <UART_SetConfig+0x118>)
 8004846:	fba3 0302 	umull	r0, r3, r3, r2
 800484a:	095b      	lsrs	r3, r3, #5
 800484c:	2064      	movs	r0, #100	; 0x64
 800484e:	fb00 f303 	mul.w	r3, r0, r3
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	3332      	adds	r3, #50	; 0x32
 8004858:	4a15      	ldr	r2, [pc, #84]	; (80048b0 <UART_SetConfig+0x118>)
 800485a:	fba2 2303 	umull	r2, r3, r2, r3
 800485e:	095b      	lsrs	r3, r3, #5
 8004860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004864:	4419      	add	r1, r3
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	4613      	mov	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	009a      	lsls	r2, r3, #2
 8004870:	441a      	add	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	fbb2 f2f3 	udiv	r2, r2, r3
 800487c:	4b0c      	ldr	r3, [pc, #48]	; (80048b0 <UART_SetConfig+0x118>)
 800487e:	fba3 0302 	umull	r0, r3, r3, r2
 8004882:	095b      	lsrs	r3, r3, #5
 8004884:	2064      	movs	r0, #100	; 0x64
 8004886:	fb00 f303 	mul.w	r3, r0, r3
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	011b      	lsls	r3, r3, #4
 800488e:	3332      	adds	r3, #50	; 0x32
 8004890:	4a07      	ldr	r2, [pc, #28]	; (80048b0 <UART_SetConfig+0x118>)
 8004892:	fba2 2303 	umull	r2, r3, r2, r3
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	f003 020f 	and.w	r2, r3, #15
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	440a      	add	r2, r1
 80048a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80048a4:	bf00      	nop
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40013800 	.word	0x40013800
 80048b0:	51eb851f 	.word	0x51eb851f

080048b4 <__errno>:
 80048b4:	4b01      	ldr	r3, [pc, #4]	; (80048bc <__errno+0x8>)
 80048b6:	6818      	ldr	r0, [r3, #0]
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	2000000c 	.word	0x2000000c

080048c0 <__libc_init_array>:
 80048c0:	b570      	push	{r4, r5, r6, lr}
 80048c2:	2600      	movs	r6, #0
 80048c4:	4d0c      	ldr	r5, [pc, #48]	; (80048f8 <__libc_init_array+0x38>)
 80048c6:	4c0d      	ldr	r4, [pc, #52]	; (80048fc <__libc_init_array+0x3c>)
 80048c8:	1b64      	subs	r4, r4, r5
 80048ca:	10a4      	asrs	r4, r4, #2
 80048cc:	42a6      	cmp	r6, r4
 80048ce:	d109      	bne.n	80048e4 <__libc_init_array+0x24>
 80048d0:	f000 fce4 	bl	800529c <_init>
 80048d4:	2600      	movs	r6, #0
 80048d6:	4d0a      	ldr	r5, [pc, #40]	; (8004900 <__libc_init_array+0x40>)
 80048d8:	4c0a      	ldr	r4, [pc, #40]	; (8004904 <__libc_init_array+0x44>)
 80048da:	1b64      	subs	r4, r4, r5
 80048dc:	10a4      	asrs	r4, r4, #2
 80048de:	42a6      	cmp	r6, r4
 80048e0:	d105      	bne.n	80048ee <__libc_init_array+0x2e>
 80048e2:	bd70      	pop	{r4, r5, r6, pc}
 80048e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80048e8:	4798      	blx	r3
 80048ea:	3601      	adds	r6, #1
 80048ec:	e7ee      	b.n	80048cc <__libc_init_array+0xc>
 80048ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80048f2:	4798      	blx	r3
 80048f4:	3601      	adds	r6, #1
 80048f6:	e7f2      	b.n	80048de <__libc_init_array+0x1e>
 80048f8:	080053c8 	.word	0x080053c8
 80048fc:	080053c8 	.word	0x080053c8
 8004900:	080053c8 	.word	0x080053c8
 8004904:	080053cc 	.word	0x080053cc

08004908 <memset>:
 8004908:	4603      	mov	r3, r0
 800490a:	4402      	add	r2, r0
 800490c:	4293      	cmp	r3, r2
 800490e:	d100      	bne.n	8004912 <memset+0xa>
 8004910:	4770      	bx	lr
 8004912:	f803 1b01 	strb.w	r1, [r3], #1
 8004916:	e7f9      	b.n	800490c <memset+0x4>

08004918 <_puts_r>:
 8004918:	b570      	push	{r4, r5, r6, lr}
 800491a:	460e      	mov	r6, r1
 800491c:	4605      	mov	r5, r0
 800491e:	b118      	cbz	r0, 8004928 <_puts_r+0x10>
 8004920:	6983      	ldr	r3, [r0, #24]
 8004922:	b90b      	cbnz	r3, 8004928 <_puts_r+0x10>
 8004924:	f000 fa48 	bl	8004db8 <__sinit>
 8004928:	69ab      	ldr	r3, [r5, #24]
 800492a:	68ac      	ldr	r4, [r5, #8]
 800492c:	b913      	cbnz	r3, 8004934 <_puts_r+0x1c>
 800492e:	4628      	mov	r0, r5
 8004930:	f000 fa42 	bl	8004db8 <__sinit>
 8004934:	4b2c      	ldr	r3, [pc, #176]	; (80049e8 <_puts_r+0xd0>)
 8004936:	429c      	cmp	r4, r3
 8004938:	d120      	bne.n	800497c <_puts_r+0x64>
 800493a:	686c      	ldr	r4, [r5, #4]
 800493c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800493e:	07db      	lsls	r3, r3, #31
 8004940:	d405      	bmi.n	800494e <_puts_r+0x36>
 8004942:	89a3      	ldrh	r3, [r4, #12]
 8004944:	0598      	lsls	r0, r3, #22
 8004946:	d402      	bmi.n	800494e <_puts_r+0x36>
 8004948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800494a:	f000 fad3 	bl	8004ef4 <__retarget_lock_acquire_recursive>
 800494e:	89a3      	ldrh	r3, [r4, #12]
 8004950:	0719      	lsls	r1, r3, #28
 8004952:	d51d      	bpl.n	8004990 <_puts_r+0x78>
 8004954:	6923      	ldr	r3, [r4, #16]
 8004956:	b1db      	cbz	r3, 8004990 <_puts_r+0x78>
 8004958:	3e01      	subs	r6, #1
 800495a:	68a3      	ldr	r3, [r4, #8]
 800495c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004960:	3b01      	subs	r3, #1
 8004962:	60a3      	str	r3, [r4, #8]
 8004964:	bb39      	cbnz	r1, 80049b6 <_puts_r+0x9e>
 8004966:	2b00      	cmp	r3, #0
 8004968:	da38      	bge.n	80049dc <_puts_r+0xc4>
 800496a:	4622      	mov	r2, r4
 800496c:	210a      	movs	r1, #10
 800496e:	4628      	mov	r0, r5
 8004970:	f000 f848 	bl	8004a04 <__swbuf_r>
 8004974:	3001      	adds	r0, #1
 8004976:	d011      	beq.n	800499c <_puts_r+0x84>
 8004978:	250a      	movs	r5, #10
 800497a:	e011      	b.n	80049a0 <_puts_r+0x88>
 800497c:	4b1b      	ldr	r3, [pc, #108]	; (80049ec <_puts_r+0xd4>)
 800497e:	429c      	cmp	r4, r3
 8004980:	d101      	bne.n	8004986 <_puts_r+0x6e>
 8004982:	68ac      	ldr	r4, [r5, #8]
 8004984:	e7da      	b.n	800493c <_puts_r+0x24>
 8004986:	4b1a      	ldr	r3, [pc, #104]	; (80049f0 <_puts_r+0xd8>)
 8004988:	429c      	cmp	r4, r3
 800498a:	bf08      	it	eq
 800498c:	68ec      	ldreq	r4, [r5, #12]
 800498e:	e7d5      	b.n	800493c <_puts_r+0x24>
 8004990:	4621      	mov	r1, r4
 8004992:	4628      	mov	r0, r5
 8004994:	f000 f888 	bl	8004aa8 <__swsetup_r>
 8004998:	2800      	cmp	r0, #0
 800499a:	d0dd      	beq.n	8004958 <_puts_r+0x40>
 800499c:	f04f 35ff 	mov.w	r5, #4294967295
 80049a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049a2:	07da      	lsls	r2, r3, #31
 80049a4:	d405      	bmi.n	80049b2 <_puts_r+0x9a>
 80049a6:	89a3      	ldrh	r3, [r4, #12]
 80049a8:	059b      	lsls	r3, r3, #22
 80049aa:	d402      	bmi.n	80049b2 <_puts_r+0x9a>
 80049ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049ae:	f000 faa2 	bl	8004ef6 <__retarget_lock_release_recursive>
 80049b2:	4628      	mov	r0, r5
 80049b4:	bd70      	pop	{r4, r5, r6, pc}
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	da04      	bge.n	80049c4 <_puts_r+0xac>
 80049ba:	69a2      	ldr	r2, [r4, #24]
 80049bc:	429a      	cmp	r2, r3
 80049be:	dc06      	bgt.n	80049ce <_puts_r+0xb6>
 80049c0:	290a      	cmp	r1, #10
 80049c2:	d004      	beq.n	80049ce <_puts_r+0xb6>
 80049c4:	6823      	ldr	r3, [r4, #0]
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	6022      	str	r2, [r4, #0]
 80049ca:	7019      	strb	r1, [r3, #0]
 80049cc:	e7c5      	b.n	800495a <_puts_r+0x42>
 80049ce:	4622      	mov	r2, r4
 80049d0:	4628      	mov	r0, r5
 80049d2:	f000 f817 	bl	8004a04 <__swbuf_r>
 80049d6:	3001      	adds	r0, #1
 80049d8:	d1bf      	bne.n	800495a <_puts_r+0x42>
 80049da:	e7df      	b.n	800499c <_puts_r+0x84>
 80049dc:	250a      	movs	r5, #10
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	6022      	str	r2, [r4, #0]
 80049e4:	701d      	strb	r5, [r3, #0]
 80049e6:	e7db      	b.n	80049a0 <_puts_r+0x88>
 80049e8:	08005388 	.word	0x08005388
 80049ec:	080053a8 	.word	0x080053a8
 80049f0:	08005368 	.word	0x08005368

080049f4 <puts>:
 80049f4:	4b02      	ldr	r3, [pc, #8]	; (8004a00 <puts+0xc>)
 80049f6:	4601      	mov	r1, r0
 80049f8:	6818      	ldr	r0, [r3, #0]
 80049fa:	f7ff bf8d 	b.w	8004918 <_puts_r>
 80049fe:	bf00      	nop
 8004a00:	2000000c 	.word	0x2000000c

08004a04 <__swbuf_r>:
 8004a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a06:	460e      	mov	r6, r1
 8004a08:	4614      	mov	r4, r2
 8004a0a:	4605      	mov	r5, r0
 8004a0c:	b118      	cbz	r0, 8004a16 <__swbuf_r+0x12>
 8004a0e:	6983      	ldr	r3, [r0, #24]
 8004a10:	b90b      	cbnz	r3, 8004a16 <__swbuf_r+0x12>
 8004a12:	f000 f9d1 	bl	8004db8 <__sinit>
 8004a16:	4b21      	ldr	r3, [pc, #132]	; (8004a9c <__swbuf_r+0x98>)
 8004a18:	429c      	cmp	r4, r3
 8004a1a:	d12b      	bne.n	8004a74 <__swbuf_r+0x70>
 8004a1c:	686c      	ldr	r4, [r5, #4]
 8004a1e:	69a3      	ldr	r3, [r4, #24]
 8004a20:	60a3      	str	r3, [r4, #8]
 8004a22:	89a3      	ldrh	r3, [r4, #12]
 8004a24:	071a      	lsls	r2, r3, #28
 8004a26:	d52f      	bpl.n	8004a88 <__swbuf_r+0x84>
 8004a28:	6923      	ldr	r3, [r4, #16]
 8004a2a:	b36b      	cbz	r3, 8004a88 <__swbuf_r+0x84>
 8004a2c:	6923      	ldr	r3, [r4, #16]
 8004a2e:	6820      	ldr	r0, [r4, #0]
 8004a30:	b2f6      	uxtb	r6, r6
 8004a32:	1ac0      	subs	r0, r0, r3
 8004a34:	6963      	ldr	r3, [r4, #20]
 8004a36:	4637      	mov	r7, r6
 8004a38:	4283      	cmp	r3, r0
 8004a3a:	dc04      	bgt.n	8004a46 <__swbuf_r+0x42>
 8004a3c:	4621      	mov	r1, r4
 8004a3e:	4628      	mov	r0, r5
 8004a40:	f000 f926 	bl	8004c90 <_fflush_r>
 8004a44:	bb30      	cbnz	r0, 8004a94 <__swbuf_r+0x90>
 8004a46:	68a3      	ldr	r3, [r4, #8]
 8004a48:	3001      	adds	r0, #1
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	60a3      	str	r3, [r4, #8]
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	6022      	str	r2, [r4, #0]
 8004a54:	701e      	strb	r6, [r3, #0]
 8004a56:	6963      	ldr	r3, [r4, #20]
 8004a58:	4283      	cmp	r3, r0
 8004a5a:	d004      	beq.n	8004a66 <__swbuf_r+0x62>
 8004a5c:	89a3      	ldrh	r3, [r4, #12]
 8004a5e:	07db      	lsls	r3, r3, #31
 8004a60:	d506      	bpl.n	8004a70 <__swbuf_r+0x6c>
 8004a62:	2e0a      	cmp	r6, #10
 8004a64:	d104      	bne.n	8004a70 <__swbuf_r+0x6c>
 8004a66:	4621      	mov	r1, r4
 8004a68:	4628      	mov	r0, r5
 8004a6a:	f000 f911 	bl	8004c90 <_fflush_r>
 8004a6e:	b988      	cbnz	r0, 8004a94 <__swbuf_r+0x90>
 8004a70:	4638      	mov	r0, r7
 8004a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a74:	4b0a      	ldr	r3, [pc, #40]	; (8004aa0 <__swbuf_r+0x9c>)
 8004a76:	429c      	cmp	r4, r3
 8004a78:	d101      	bne.n	8004a7e <__swbuf_r+0x7a>
 8004a7a:	68ac      	ldr	r4, [r5, #8]
 8004a7c:	e7cf      	b.n	8004a1e <__swbuf_r+0x1a>
 8004a7e:	4b09      	ldr	r3, [pc, #36]	; (8004aa4 <__swbuf_r+0xa0>)
 8004a80:	429c      	cmp	r4, r3
 8004a82:	bf08      	it	eq
 8004a84:	68ec      	ldreq	r4, [r5, #12]
 8004a86:	e7ca      	b.n	8004a1e <__swbuf_r+0x1a>
 8004a88:	4621      	mov	r1, r4
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	f000 f80c 	bl	8004aa8 <__swsetup_r>
 8004a90:	2800      	cmp	r0, #0
 8004a92:	d0cb      	beq.n	8004a2c <__swbuf_r+0x28>
 8004a94:	f04f 37ff 	mov.w	r7, #4294967295
 8004a98:	e7ea      	b.n	8004a70 <__swbuf_r+0x6c>
 8004a9a:	bf00      	nop
 8004a9c:	08005388 	.word	0x08005388
 8004aa0:	080053a8 	.word	0x080053a8
 8004aa4:	08005368 	.word	0x08005368

08004aa8 <__swsetup_r>:
 8004aa8:	4b32      	ldr	r3, [pc, #200]	; (8004b74 <__swsetup_r+0xcc>)
 8004aaa:	b570      	push	{r4, r5, r6, lr}
 8004aac:	681d      	ldr	r5, [r3, #0]
 8004aae:	4606      	mov	r6, r0
 8004ab0:	460c      	mov	r4, r1
 8004ab2:	b125      	cbz	r5, 8004abe <__swsetup_r+0x16>
 8004ab4:	69ab      	ldr	r3, [r5, #24]
 8004ab6:	b913      	cbnz	r3, 8004abe <__swsetup_r+0x16>
 8004ab8:	4628      	mov	r0, r5
 8004aba:	f000 f97d 	bl	8004db8 <__sinit>
 8004abe:	4b2e      	ldr	r3, [pc, #184]	; (8004b78 <__swsetup_r+0xd0>)
 8004ac0:	429c      	cmp	r4, r3
 8004ac2:	d10f      	bne.n	8004ae4 <__swsetup_r+0x3c>
 8004ac4:	686c      	ldr	r4, [r5, #4]
 8004ac6:	89a3      	ldrh	r3, [r4, #12]
 8004ac8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004acc:	0719      	lsls	r1, r3, #28
 8004ace:	d42c      	bmi.n	8004b2a <__swsetup_r+0x82>
 8004ad0:	06dd      	lsls	r5, r3, #27
 8004ad2:	d411      	bmi.n	8004af8 <__swsetup_r+0x50>
 8004ad4:	2309      	movs	r3, #9
 8004ad6:	6033      	str	r3, [r6, #0]
 8004ad8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004adc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae0:	81a3      	strh	r3, [r4, #12]
 8004ae2:	e03e      	b.n	8004b62 <__swsetup_r+0xba>
 8004ae4:	4b25      	ldr	r3, [pc, #148]	; (8004b7c <__swsetup_r+0xd4>)
 8004ae6:	429c      	cmp	r4, r3
 8004ae8:	d101      	bne.n	8004aee <__swsetup_r+0x46>
 8004aea:	68ac      	ldr	r4, [r5, #8]
 8004aec:	e7eb      	b.n	8004ac6 <__swsetup_r+0x1e>
 8004aee:	4b24      	ldr	r3, [pc, #144]	; (8004b80 <__swsetup_r+0xd8>)
 8004af0:	429c      	cmp	r4, r3
 8004af2:	bf08      	it	eq
 8004af4:	68ec      	ldreq	r4, [r5, #12]
 8004af6:	e7e6      	b.n	8004ac6 <__swsetup_r+0x1e>
 8004af8:	0758      	lsls	r0, r3, #29
 8004afa:	d512      	bpl.n	8004b22 <__swsetup_r+0x7a>
 8004afc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004afe:	b141      	cbz	r1, 8004b12 <__swsetup_r+0x6a>
 8004b00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b04:	4299      	cmp	r1, r3
 8004b06:	d002      	beq.n	8004b0e <__swsetup_r+0x66>
 8004b08:	4630      	mov	r0, r6
 8004b0a:	f000 fa59 	bl	8004fc0 <_free_r>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	6363      	str	r3, [r4, #52]	; 0x34
 8004b12:	89a3      	ldrh	r3, [r4, #12]
 8004b14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b18:	81a3      	strh	r3, [r4, #12]
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	6063      	str	r3, [r4, #4]
 8004b1e:	6923      	ldr	r3, [r4, #16]
 8004b20:	6023      	str	r3, [r4, #0]
 8004b22:	89a3      	ldrh	r3, [r4, #12]
 8004b24:	f043 0308 	orr.w	r3, r3, #8
 8004b28:	81a3      	strh	r3, [r4, #12]
 8004b2a:	6923      	ldr	r3, [r4, #16]
 8004b2c:	b94b      	cbnz	r3, 8004b42 <__swsetup_r+0x9a>
 8004b2e:	89a3      	ldrh	r3, [r4, #12]
 8004b30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b38:	d003      	beq.n	8004b42 <__swsetup_r+0x9a>
 8004b3a:	4621      	mov	r1, r4
 8004b3c:	4630      	mov	r0, r6
 8004b3e:	f000 f9ff 	bl	8004f40 <__smakebuf_r>
 8004b42:	89a0      	ldrh	r0, [r4, #12]
 8004b44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b48:	f010 0301 	ands.w	r3, r0, #1
 8004b4c:	d00a      	beq.n	8004b64 <__swsetup_r+0xbc>
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60a3      	str	r3, [r4, #8]
 8004b52:	6963      	ldr	r3, [r4, #20]
 8004b54:	425b      	negs	r3, r3
 8004b56:	61a3      	str	r3, [r4, #24]
 8004b58:	6923      	ldr	r3, [r4, #16]
 8004b5a:	b943      	cbnz	r3, 8004b6e <__swsetup_r+0xc6>
 8004b5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b60:	d1ba      	bne.n	8004ad8 <__swsetup_r+0x30>
 8004b62:	bd70      	pop	{r4, r5, r6, pc}
 8004b64:	0781      	lsls	r1, r0, #30
 8004b66:	bf58      	it	pl
 8004b68:	6963      	ldrpl	r3, [r4, #20]
 8004b6a:	60a3      	str	r3, [r4, #8]
 8004b6c:	e7f4      	b.n	8004b58 <__swsetup_r+0xb0>
 8004b6e:	2000      	movs	r0, #0
 8004b70:	e7f7      	b.n	8004b62 <__swsetup_r+0xba>
 8004b72:	bf00      	nop
 8004b74:	2000000c 	.word	0x2000000c
 8004b78:	08005388 	.word	0x08005388
 8004b7c:	080053a8 	.word	0x080053a8
 8004b80:	08005368 	.word	0x08005368

08004b84 <__sflush_r>:
 8004b84:	898a      	ldrh	r2, [r1, #12]
 8004b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b8a:	4605      	mov	r5, r0
 8004b8c:	0710      	lsls	r0, r2, #28
 8004b8e:	460c      	mov	r4, r1
 8004b90:	d458      	bmi.n	8004c44 <__sflush_r+0xc0>
 8004b92:	684b      	ldr	r3, [r1, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	dc05      	bgt.n	8004ba4 <__sflush_r+0x20>
 8004b98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	dc02      	bgt.n	8004ba4 <__sflush_r+0x20>
 8004b9e:	2000      	movs	r0, #0
 8004ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ba4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ba6:	2e00      	cmp	r6, #0
 8004ba8:	d0f9      	beq.n	8004b9e <__sflush_r+0x1a>
 8004baa:	2300      	movs	r3, #0
 8004bac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004bb0:	682f      	ldr	r7, [r5, #0]
 8004bb2:	602b      	str	r3, [r5, #0]
 8004bb4:	d032      	beq.n	8004c1c <__sflush_r+0x98>
 8004bb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004bb8:	89a3      	ldrh	r3, [r4, #12]
 8004bba:	075a      	lsls	r2, r3, #29
 8004bbc:	d505      	bpl.n	8004bca <__sflush_r+0x46>
 8004bbe:	6863      	ldr	r3, [r4, #4]
 8004bc0:	1ac0      	subs	r0, r0, r3
 8004bc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004bc4:	b10b      	cbz	r3, 8004bca <__sflush_r+0x46>
 8004bc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004bc8:	1ac0      	subs	r0, r0, r3
 8004bca:	2300      	movs	r3, #0
 8004bcc:	4602      	mov	r2, r0
 8004bce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	6a21      	ldr	r1, [r4, #32]
 8004bd4:	47b0      	blx	r6
 8004bd6:	1c43      	adds	r3, r0, #1
 8004bd8:	89a3      	ldrh	r3, [r4, #12]
 8004bda:	d106      	bne.n	8004bea <__sflush_r+0x66>
 8004bdc:	6829      	ldr	r1, [r5, #0]
 8004bde:	291d      	cmp	r1, #29
 8004be0:	d82c      	bhi.n	8004c3c <__sflush_r+0xb8>
 8004be2:	4a2a      	ldr	r2, [pc, #168]	; (8004c8c <__sflush_r+0x108>)
 8004be4:	40ca      	lsrs	r2, r1
 8004be6:	07d6      	lsls	r6, r2, #31
 8004be8:	d528      	bpl.n	8004c3c <__sflush_r+0xb8>
 8004bea:	2200      	movs	r2, #0
 8004bec:	6062      	str	r2, [r4, #4]
 8004bee:	6922      	ldr	r2, [r4, #16]
 8004bf0:	04d9      	lsls	r1, r3, #19
 8004bf2:	6022      	str	r2, [r4, #0]
 8004bf4:	d504      	bpl.n	8004c00 <__sflush_r+0x7c>
 8004bf6:	1c42      	adds	r2, r0, #1
 8004bf8:	d101      	bne.n	8004bfe <__sflush_r+0x7a>
 8004bfa:	682b      	ldr	r3, [r5, #0]
 8004bfc:	b903      	cbnz	r3, 8004c00 <__sflush_r+0x7c>
 8004bfe:	6560      	str	r0, [r4, #84]	; 0x54
 8004c00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c02:	602f      	str	r7, [r5, #0]
 8004c04:	2900      	cmp	r1, #0
 8004c06:	d0ca      	beq.n	8004b9e <__sflush_r+0x1a>
 8004c08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c0c:	4299      	cmp	r1, r3
 8004c0e:	d002      	beq.n	8004c16 <__sflush_r+0x92>
 8004c10:	4628      	mov	r0, r5
 8004c12:	f000 f9d5 	bl	8004fc0 <_free_r>
 8004c16:	2000      	movs	r0, #0
 8004c18:	6360      	str	r0, [r4, #52]	; 0x34
 8004c1a:	e7c1      	b.n	8004ba0 <__sflush_r+0x1c>
 8004c1c:	6a21      	ldr	r1, [r4, #32]
 8004c1e:	2301      	movs	r3, #1
 8004c20:	4628      	mov	r0, r5
 8004c22:	47b0      	blx	r6
 8004c24:	1c41      	adds	r1, r0, #1
 8004c26:	d1c7      	bne.n	8004bb8 <__sflush_r+0x34>
 8004c28:	682b      	ldr	r3, [r5, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0c4      	beq.n	8004bb8 <__sflush_r+0x34>
 8004c2e:	2b1d      	cmp	r3, #29
 8004c30:	d001      	beq.n	8004c36 <__sflush_r+0xb2>
 8004c32:	2b16      	cmp	r3, #22
 8004c34:	d101      	bne.n	8004c3a <__sflush_r+0xb6>
 8004c36:	602f      	str	r7, [r5, #0]
 8004c38:	e7b1      	b.n	8004b9e <__sflush_r+0x1a>
 8004c3a:	89a3      	ldrh	r3, [r4, #12]
 8004c3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c40:	81a3      	strh	r3, [r4, #12]
 8004c42:	e7ad      	b.n	8004ba0 <__sflush_r+0x1c>
 8004c44:	690f      	ldr	r7, [r1, #16]
 8004c46:	2f00      	cmp	r7, #0
 8004c48:	d0a9      	beq.n	8004b9e <__sflush_r+0x1a>
 8004c4a:	0793      	lsls	r3, r2, #30
 8004c4c:	bf18      	it	ne
 8004c4e:	2300      	movne	r3, #0
 8004c50:	680e      	ldr	r6, [r1, #0]
 8004c52:	bf08      	it	eq
 8004c54:	694b      	ldreq	r3, [r1, #20]
 8004c56:	eba6 0807 	sub.w	r8, r6, r7
 8004c5a:	600f      	str	r7, [r1, #0]
 8004c5c:	608b      	str	r3, [r1, #8]
 8004c5e:	f1b8 0f00 	cmp.w	r8, #0
 8004c62:	dd9c      	ble.n	8004b9e <__sflush_r+0x1a>
 8004c64:	4643      	mov	r3, r8
 8004c66:	463a      	mov	r2, r7
 8004c68:	4628      	mov	r0, r5
 8004c6a:	6a21      	ldr	r1, [r4, #32]
 8004c6c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c6e:	47b0      	blx	r6
 8004c70:	2800      	cmp	r0, #0
 8004c72:	dc06      	bgt.n	8004c82 <__sflush_r+0xfe>
 8004c74:	89a3      	ldrh	r3, [r4, #12]
 8004c76:	f04f 30ff 	mov.w	r0, #4294967295
 8004c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c7e:	81a3      	strh	r3, [r4, #12]
 8004c80:	e78e      	b.n	8004ba0 <__sflush_r+0x1c>
 8004c82:	4407      	add	r7, r0
 8004c84:	eba8 0800 	sub.w	r8, r8, r0
 8004c88:	e7e9      	b.n	8004c5e <__sflush_r+0xda>
 8004c8a:	bf00      	nop
 8004c8c:	20400001 	.word	0x20400001

08004c90 <_fflush_r>:
 8004c90:	b538      	push	{r3, r4, r5, lr}
 8004c92:	690b      	ldr	r3, [r1, #16]
 8004c94:	4605      	mov	r5, r0
 8004c96:	460c      	mov	r4, r1
 8004c98:	b913      	cbnz	r3, 8004ca0 <_fflush_r+0x10>
 8004c9a:	2500      	movs	r5, #0
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ca0:	b118      	cbz	r0, 8004caa <_fflush_r+0x1a>
 8004ca2:	6983      	ldr	r3, [r0, #24]
 8004ca4:	b90b      	cbnz	r3, 8004caa <_fflush_r+0x1a>
 8004ca6:	f000 f887 	bl	8004db8 <__sinit>
 8004caa:	4b14      	ldr	r3, [pc, #80]	; (8004cfc <_fflush_r+0x6c>)
 8004cac:	429c      	cmp	r4, r3
 8004cae:	d11b      	bne.n	8004ce8 <_fflush_r+0x58>
 8004cb0:	686c      	ldr	r4, [r5, #4]
 8004cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d0ef      	beq.n	8004c9a <_fflush_r+0xa>
 8004cba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004cbc:	07d0      	lsls	r0, r2, #31
 8004cbe:	d404      	bmi.n	8004cca <_fflush_r+0x3a>
 8004cc0:	0599      	lsls	r1, r3, #22
 8004cc2:	d402      	bmi.n	8004cca <_fflush_r+0x3a>
 8004cc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cc6:	f000 f915 	bl	8004ef4 <__retarget_lock_acquire_recursive>
 8004cca:	4628      	mov	r0, r5
 8004ccc:	4621      	mov	r1, r4
 8004cce:	f7ff ff59 	bl	8004b84 <__sflush_r>
 8004cd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cd4:	4605      	mov	r5, r0
 8004cd6:	07da      	lsls	r2, r3, #31
 8004cd8:	d4e0      	bmi.n	8004c9c <_fflush_r+0xc>
 8004cda:	89a3      	ldrh	r3, [r4, #12]
 8004cdc:	059b      	lsls	r3, r3, #22
 8004cde:	d4dd      	bmi.n	8004c9c <_fflush_r+0xc>
 8004ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ce2:	f000 f908 	bl	8004ef6 <__retarget_lock_release_recursive>
 8004ce6:	e7d9      	b.n	8004c9c <_fflush_r+0xc>
 8004ce8:	4b05      	ldr	r3, [pc, #20]	; (8004d00 <_fflush_r+0x70>)
 8004cea:	429c      	cmp	r4, r3
 8004cec:	d101      	bne.n	8004cf2 <_fflush_r+0x62>
 8004cee:	68ac      	ldr	r4, [r5, #8]
 8004cf0:	e7df      	b.n	8004cb2 <_fflush_r+0x22>
 8004cf2:	4b04      	ldr	r3, [pc, #16]	; (8004d04 <_fflush_r+0x74>)
 8004cf4:	429c      	cmp	r4, r3
 8004cf6:	bf08      	it	eq
 8004cf8:	68ec      	ldreq	r4, [r5, #12]
 8004cfa:	e7da      	b.n	8004cb2 <_fflush_r+0x22>
 8004cfc:	08005388 	.word	0x08005388
 8004d00:	080053a8 	.word	0x080053a8
 8004d04:	08005368 	.word	0x08005368

08004d08 <std>:
 8004d08:	2300      	movs	r3, #0
 8004d0a:	b510      	push	{r4, lr}
 8004d0c:	4604      	mov	r4, r0
 8004d0e:	e9c0 3300 	strd	r3, r3, [r0]
 8004d12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d16:	6083      	str	r3, [r0, #8]
 8004d18:	8181      	strh	r1, [r0, #12]
 8004d1a:	6643      	str	r3, [r0, #100]	; 0x64
 8004d1c:	81c2      	strh	r2, [r0, #14]
 8004d1e:	6183      	str	r3, [r0, #24]
 8004d20:	4619      	mov	r1, r3
 8004d22:	2208      	movs	r2, #8
 8004d24:	305c      	adds	r0, #92	; 0x5c
 8004d26:	f7ff fdef 	bl	8004908 <memset>
 8004d2a:	4b05      	ldr	r3, [pc, #20]	; (8004d40 <std+0x38>)
 8004d2c:	6224      	str	r4, [r4, #32]
 8004d2e:	6263      	str	r3, [r4, #36]	; 0x24
 8004d30:	4b04      	ldr	r3, [pc, #16]	; (8004d44 <std+0x3c>)
 8004d32:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d34:	4b04      	ldr	r3, [pc, #16]	; (8004d48 <std+0x40>)
 8004d36:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d38:	4b04      	ldr	r3, [pc, #16]	; (8004d4c <std+0x44>)
 8004d3a:	6323      	str	r3, [r4, #48]	; 0x30
 8004d3c:	bd10      	pop	{r4, pc}
 8004d3e:	bf00      	nop
 8004d40:	0800512d 	.word	0x0800512d
 8004d44:	0800514f 	.word	0x0800514f
 8004d48:	08005187 	.word	0x08005187
 8004d4c:	080051ab 	.word	0x080051ab

08004d50 <_cleanup_r>:
 8004d50:	4901      	ldr	r1, [pc, #4]	; (8004d58 <_cleanup_r+0x8>)
 8004d52:	f000 b8af 	b.w	8004eb4 <_fwalk_reent>
 8004d56:	bf00      	nop
 8004d58:	08004c91 	.word	0x08004c91

08004d5c <__sfmoreglue>:
 8004d5c:	b570      	push	{r4, r5, r6, lr}
 8004d5e:	2568      	movs	r5, #104	; 0x68
 8004d60:	1e4a      	subs	r2, r1, #1
 8004d62:	4355      	muls	r5, r2
 8004d64:	460e      	mov	r6, r1
 8004d66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d6a:	f000 f975 	bl	8005058 <_malloc_r>
 8004d6e:	4604      	mov	r4, r0
 8004d70:	b140      	cbz	r0, 8004d84 <__sfmoreglue+0x28>
 8004d72:	2100      	movs	r1, #0
 8004d74:	e9c0 1600 	strd	r1, r6, [r0]
 8004d78:	300c      	adds	r0, #12
 8004d7a:	60a0      	str	r0, [r4, #8]
 8004d7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004d80:	f7ff fdc2 	bl	8004908 <memset>
 8004d84:	4620      	mov	r0, r4
 8004d86:	bd70      	pop	{r4, r5, r6, pc}

08004d88 <__sfp_lock_acquire>:
 8004d88:	4801      	ldr	r0, [pc, #4]	; (8004d90 <__sfp_lock_acquire+0x8>)
 8004d8a:	f000 b8b3 	b.w	8004ef4 <__retarget_lock_acquire_recursive>
 8004d8e:	bf00      	nop
 8004d90:	20000504 	.word	0x20000504

08004d94 <__sfp_lock_release>:
 8004d94:	4801      	ldr	r0, [pc, #4]	; (8004d9c <__sfp_lock_release+0x8>)
 8004d96:	f000 b8ae 	b.w	8004ef6 <__retarget_lock_release_recursive>
 8004d9a:	bf00      	nop
 8004d9c:	20000504 	.word	0x20000504

08004da0 <__sinit_lock_acquire>:
 8004da0:	4801      	ldr	r0, [pc, #4]	; (8004da8 <__sinit_lock_acquire+0x8>)
 8004da2:	f000 b8a7 	b.w	8004ef4 <__retarget_lock_acquire_recursive>
 8004da6:	bf00      	nop
 8004da8:	200004ff 	.word	0x200004ff

08004dac <__sinit_lock_release>:
 8004dac:	4801      	ldr	r0, [pc, #4]	; (8004db4 <__sinit_lock_release+0x8>)
 8004dae:	f000 b8a2 	b.w	8004ef6 <__retarget_lock_release_recursive>
 8004db2:	bf00      	nop
 8004db4:	200004ff 	.word	0x200004ff

08004db8 <__sinit>:
 8004db8:	b510      	push	{r4, lr}
 8004dba:	4604      	mov	r4, r0
 8004dbc:	f7ff fff0 	bl	8004da0 <__sinit_lock_acquire>
 8004dc0:	69a3      	ldr	r3, [r4, #24]
 8004dc2:	b11b      	cbz	r3, 8004dcc <__sinit+0x14>
 8004dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dc8:	f7ff bff0 	b.w	8004dac <__sinit_lock_release>
 8004dcc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004dd0:	6523      	str	r3, [r4, #80]	; 0x50
 8004dd2:	4b13      	ldr	r3, [pc, #76]	; (8004e20 <__sinit+0x68>)
 8004dd4:	4a13      	ldr	r2, [pc, #76]	; (8004e24 <__sinit+0x6c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	62a2      	str	r2, [r4, #40]	; 0x28
 8004dda:	42a3      	cmp	r3, r4
 8004ddc:	bf08      	it	eq
 8004dde:	2301      	moveq	r3, #1
 8004de0:	4620      	mov	r0, r4
 8004de2:	bf08      	it	eq
 8004de4:	61a3      	streq	r3, [r4, #24]
 8004de6:	f000 f81f 	bl	8004e28 <__sfp>
 8004dea:	6060      	str	r0, [r4, #4]
 8004dec:	4620      	mov	r0, r4
 8004dee:	f000 f81b 	bl	8004e28 <__sfp>
 8004df2:	60a0      	str	r0, [r4, #8]
 8004df4:	4620      	mov	r0, r4
 8004df6:	f000 f817 	bl	8004e28 <__sfp>
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	2104      	movs	r1, #4
 8004dfe:	60e0      	str	r0, [r4, #12]
 8004e00:	6860      	ldr	r0, [r4, #4]
 8004e02:	f7ff ff81 	bl	8004d08 <std>
 8004e06:	2201      	movs	r2, #1
 8004e08:	2109      	movs	r1, #9
 8004e0a:	68a0      	ldr	r0, [r4, #8]
 8004e0c:	f7ff ff7c 	bl	8004d08 <std>
 8004e10:	2202      	movs	r2, #2
 8004e12:	2112      	movs	r1, #18
 8004e14:	68e0      	ldr	r0, [r4, #12]
 8004e16:	f7ff ff77 	bl	8004d08 <std>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	61a3      	str	r3, [r4, #24]
 8004e1e:	e7d1      	b.n	8004dc4 <__sinit+0xc>
 8004e20:	08005364 	.word	0x08005364
 8004e24:	08004d51 	.word	0x08004d51

08004e28 <__sfp>:
 8004e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2a:	4607      	mov	r7, r0
 8004e2c:	f7ff ffac 	bl	8004d88 <__sfp_lock_acquire>
 8004e30:	4b1e      	ldr	r3, [pc, #120]	; (8004eac <__sfp+0x84>)
 8004e32:	681e      	ldr	r6, [r3, #0]
 8004e34:	69b3      	ldr	r3, [r6, #24]
 8004e36:	b913      	cbnz	r3, 8004e3e <__sfp+0x16>
 8004e38:	4630      	mov	r0, r6
 8004e3a:	f7ff ffbd 	bl	8004db8 <__sinit>
 8004e3e:	3648      	adds	r6, #72	; 0x48
 8004e40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e44:	3b01      	subs	r3, #1
 8004e46:	d503      	bpl.n	8004e50 <__sfp+0x28>
 8004e48:	6833      	ldr	r3, [r6, #0]
 8004e4a:	b30b      	cbz	r3, 8004e90 <__sfp+0x68>
 8004e4c:	6836      	ldr	r6, [r6, #0]
 8004e4e:	e7f7      	b.n	8004e40 <__sfp+0x18>
 8004e50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e54:	b9d5      	cbnz	r5, 8004e8c <__sfp+0x64>
 8004e56:	4b16      	ldr	r3, [pc, #88]	; (8004eb0 <__sfp+0x88>)
 8004e58:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e5c:	60e3      	str	r3, [r4, #12]
 8004e5e:	6665      	str	r5, [r4, #100]	; 0x64
 8004e60:	f000 f847 	bl	8004ef2 <__retarget_lock_init_recursive>
 8004e64:	f7ff ff96 	bl	8004d94 <__sfp_lock_release>
 8004e68:	2208      	movs	r2, #8
 8004e6a:	4629      	mov	r1, r5
 8004e6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004e70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004e74:	6025      	str	r5, [r4, #0]
 8004e76:	61a5      	str	r5, [r4, #24]
 8004e78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004e7c:	f7ff fd44 	bl	8004908 <memset>
 8004e80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004e84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004e88:	4620      	mov	r0, r4
 8004e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e8c:	3468      	adds	r4, #104	; 0x68
 8004e8e:	e7d9      	b.n	8004e44 <__sfp+0x1c>
 8004e90:	2104      	movs	r1, #4
 8004e92:	4638      	mov	r0, r7
 8004e94:	f7ff ff62 	bl	8004d5c <__sfmoreglue>
 8004e98:	4604      	mov	r4, r0
 8004e9a:	6030      	str	r0, [r6, #0]
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	d1d5      	bne.n	8004e4c <__sfp+0x24>
 8004ea0:	f7ff ff78 	bl	8004d94 <__sfp_lock_release>
 8004ea4:	230c      	movs	r3, #12
 8004ea6:	603b      	str	r3, [r7, #0]
 8004ea8:	e7ee      	b.n	8004e88 <__sfp+0x60>
 8004eaa:	bf00      	nop
 8004eac:	08005364 	.word	0x08005364
 8004eb0:	ffff0001 	.word	0xffff0001

08004eb4 <_fwalk_reent>:
 8004eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004eb8:	4606      	mov	r6, r0
 8004eba:	4688      	mov	r8, r1
 8004ebc:	2700      	movs	r7, #0
 8004ebe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ec2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ec6:	f1b9 0901 	subs.w	r9, r9, #1
 8004eca:	d505      	bpl.n	8004ed8 <_fwalk_reent+0x24>
 8004ecc:	6824      	ldr	r4, [r4, #0]
 8004ece:	2c00      	cmp	r4, #0
 8004ed0:	d1f7      	bne.n	8004ec2 <_fwalk_reent+0xe>
 8004ed2:	4638      	mov	r0, r7
 8004ed4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ed8:	89ab      	ldrh	r3, [r5, #12]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d907      	bls.n	8004eee <_fwalk_reent+0x3a>
 8004ede:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	d003      	beq.n	8004eee <_fwalk_reent+0x3a>
 8004ee6:	4629      	mov	r1, r5
 8004ee8:	4630      	mov	r0, r6
 8004eea:	47c0      	blx	r8
 8004eec:	4307      	orrs	r7, r0
 8004eee:	3568      	adds	r5, #104	; 0x68
 8004ef0:	e7e9      	b.n	8004ec6 <_fwalk_reent+0x12>

08004ef2 <__retarget_lock_init_recursive>:
 8004ef2:	4770      	bx	lr

08004ef4 <__retarget_lock_acquire_recursive>:
 8004ef4:	4770      	bx	lr

08004ef6 <__retarget_lock_release_recursive>:
 8004ef6:	4770      	bx	lr

08004ef8 <__swhatbuf_r>:
 8004ef8:	b570      	push	{r4, r5, r6, lr}
 8004efa:	460e      	mov	r6, r1
 8004efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f00:	4614      	mov	r4, r2
 8004f02:	2900      	cmp	r1, #0
 8004f04:	461d      	mov	r5, r3
 8004f06:	b096      	sub	sp, #88	; 0x58
 8004f08:	da07      	bge.n	8004f1a <__swhatbuf_r+0x22>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	602b      	str	r3, [r5, #0]
 8004f0e:	89b3      	ldrh	r3, [r6, #12]
 8004f10:	061a      	lsls	r2, r3, #24
 8004f12:	d410      	bmi.n	8004f36 <__swhatbuf_r+0x3e>
 8004f14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f18:	e00e      	b.n	8004f38 <__swhatbuf_r+0x40>
 8004f1a:	466a      	mov	r2, sp
 8004f1c:	f000 f96c 	bl	80051f8 <_fstat_r>
 8004f20:	2800      	cmp	r0, #0
 8004f22:	dbf2      	blt.n	8004f0a <__swhatbuf_r+0x12>
 8004f24:	9a01      	ldr	r2, [sp, #4]
 8004f26:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004f2a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004f2e:	425a      	negs	r2, r3
 8004f30:	415a      	adcs	r2, r3
 8004f32:	602a      	str	r2, [r5, #0]
 8004f34:	e7ee      	b.n	8004f14 <__swhatbuf_r+0x1c>
 8004f36:	2340      	movs	r3, #64	; 0x40
 8004f38:	2000      	movs	r0, #0
 8004f3a:	6023      	str	r3, [r4, #0]
 8004f3c:	b016      	add	sp, #88	; 0x58
 8004f3e:	bd70      	pop	{r4, r5, r6, pc}

08004f40 <__smakebuf_r>:
 8004f40:	898b      	ldrh	r3, [r1, #12]
 8004f42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f44:	079d      	lsls	r5, r3, #30
 8004f46:	4606      	mov	r6, r0
 8004f48:	460c      	mov	r4, r1
 8004f4a:	d507      	bpl.n	8004f5c <__smakebuf_r+0x1c>
 8004f4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f50:	6023      	str	r3, [r4, #0]
 8004f52:	6123      	str	r3, [r4, #16]
 8004f54:	2301      	movs	r3, #1
 8004f56:	6163      	str	r3, [r4, #20]
 8004f58:	b002      	add	sp, #8
 8004f5a:	bd70      	pop	{r4, r5, r6, pc}
 8004f5c:	466a      	mov	r2, sp
 8004f5e:	ab01      	add	r3, sp, #4
 8004f60:	f7ff ffca 	bl	8004ef8 <__swhatbuf_r>
 8004f64:	9900      	ldr	r1, [sp, #0]
 8004f66:	4605      	mov	r5, r0
 8004f68:	4630      	mov	r0, r6
 8004f6a:	f000 f875 	bl	8005058 <_malloc_r>
 8004f6e:	b948      	cbnz	r0, 8004f84 <__smakebuf_r+0x44>
 8004f70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f74:	059a      	lsls	r2, r3, #22
 8004f76:	d4ef      	bmi.n	8004f58 <__smakebuf_r+0x18>
 8004f78:	f023 0303 	bic.w	r3, r3, #3
 8004f7c:	f043 0302 	orr.w	r3, r3, #2
 8004f80:	81a3      	strh	r3, [r4, #12]
 8004f82:	e7e3      	b.n	8004f4c <__smakebuf_r+0xc>
 8004f84:	4b0d      	ldr	r3, [pc, #52]	; (8004fbc <__smakebuf_r+0x7c>)
 8004f86:	62b3      	str	r3, [r6, #40]	; 0x28
 8004f88:	89a3      	ldrh	r3, [r4, #12]
 8004f8a:	6020      	str	r0, [r4, #0]
 8004f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f90:	81a3      	strh	r3, [r4, #12]
 8004f92:	9b00      	ldr	r3, [sp, #0]
 8004f94:	6120      	str	r0, [r4, #16]
 8004f96:	6163      	str	r3, [r4, #20]
 8004f98:	9b01      	ldr	r3, [sp, #4]
 8004f9a:	b15b      	cbz	r3, 8004fb4 <__smakebuf_r+0x74>
 8004f9c:	4630      	mov	r0, r6
 8004f9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fa2:	f000 f93b 	bl	800521c <_isatty_r>
 8004fa6:	b128      	cbz	r0, 8004fb4 <__smakebuf_r+0x74>
 8004fa8:	89a3      	ldrh	r3, [r4, #12]
 8004faa:	f023 0303 	bic.w	r3, r3, #3
 8004fae:	f043 0301 	orr.w	r3, r3, #1
 8004fb2:	81a3      	strh	r3, [r4, #12]
 8004fb4:	89a0      	ldrh	r0, [r4, #12]
 8004fb6:	4305      	orrs	r5, r0
 8004fb8:	81a5      	strh	r5, [r4, #12]
 8004fba:	e7cd      	b.n	8004f58 <__smakebuf_r+0x18>
 8004fbc:	08004d51 	.word	0x08004d51

08004fc0 <_free_r>:
 8004fc0:	b538      	push	{r3, r4, r5, lr}
 8004fc2:	4605      	mov	r5, r0
 8004fc4:	2900      	cmp	r1, #0
 8004fc6:	d043      	beq.n	8005050 <_free_r+0x90>
 8004fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fcc:	1f0c      	subs	r4, r1, #4
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	bfb8      	it	lt
 8004fd2:	18e4      	addlt	r4, r4, r3
 8004fd4:	f000 f944 	bl	8005260 <__malloc_lock>
 8004fd8:	4a1e      	ldr	r2, [pc, #120]	; (8005054 <_free_r+0x94>)
 8004fda:	6813      	ldr	r3, [r2, #0]
 8004fdc:	4610      	mov	r0, r2
 8004fde:	b933      	cbnz	r3, 8004fee <_free_r+0x2e>
 8004fe0:	6063      	str	r3, [r4, #4]
 8004fe2:	6014      	str	r4, [r2, #0]
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fea:	f000 b93f 	b.w	800526c <__malloc_unlock>
 8004fee:	42a3      	cmp	r3, r4
 8004ff0:	d90a      	bls.n	8005008 <_free_r+0x48>
 8004ff2:	6821      	ldr	r1, [r4, #0]
 8004ff4:	1862      	adds	r2, r4, r1
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	bf01      	itttt	eq
 8004ffa:	681a      	ldreq	r2, [r3, #0]
 8004ffc:	685b      	ldreq	r3, [r3, #4]
 8004ffe:	1852      	addeq	r2, r2, r1
 8005000:	6022      	streq	r2, [r4, #0]
 8005002:	6063      	str	r3, [r4, #4]
 8005004:	6004      	str	r4, [r0, #0]
 8005006:	e7ed      	b.n	8004fe4 <_free_r+0x24>
 8005008:	461a      	mov	r2, r3
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	b10b      	cbz	r3, 8005012 <_free_r+0x52>
 800500e:	42a3      	cmp	r3, r4
 8005010:	d9fa      	bls.n	8005008 <_free_r+0x48>
 8005012:	6811      	ldr	r1, [r2, #0]
 8005014:	1850      	adds	r0, r2, r1
 8005016:	42a0      	cmp	r0, r4
 8005018:	d10b      	bne.n	8005032 <_free_r+0x72>
 800501a:	6820      	ldr	r0, [r4, #0]
 800501c:	4401      	add	r1, r0
 800501e:	1850      	adds	r0, r2, r1
 8005020:	4283      	cmp	r3, r0
 8005022:	6011      	str	r1, [r2, #0]
 8005024:	d1de      	bne.n	8004fe4 <_free_r+0x24>
 8005026:	6818      	ldr	r0, [r3, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	4401      	add	r1, r0
 800502c:	6011      	str	r1, [r2, #0]
 800502e:	6053      	str	r3, [r2, #4]
 8005030:	e7d8      	b.n	8004fe4 <_free_r+0x24>
 8005032:	d902      	bls.n	800503a <_free_r+0x7a>
 8005034:	230c      	movs	r3, #12
 8005036:	602b      	str	r3, [r5, #0]
 8005038:	e7d4      	b.n	8004fe4 <_free_r+0x24>
 800503a:	6820      	ldr	r0, [r4, #0]
 800503c:	1821      	adds	r1, r4, r0
 800503e:	428b      	cmp	r3, r1
 8005040:	bf01      	itttt	eq
 8005042:	6819      	ldreq	r1, [r3, #0]
 8005044:	685b      	ldreq	r3, [r3, #4]
 8005046:	1809      	addeq	r1, r1, r0
 8005048:	6021      	streq	r1, [r4, #0]
 800504a:	6063      	str	r3, [r4, #4]
 800504c:	6054      	str	r4, [r2, #4]
 800504e:	e7c9      	b.n	8004fe4 <_free_r+0x24>
 8005050:	bd38      	pop	{r3, r4, r5, pc}
 8005052:	bf00      	nop
 8005054:	200000a4 	.word	0x200000a4

08005058 <_malloc_r>:
 8005058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800505a:	1ccd      	adds	r5, r1, #3
 800505c:	f025 0503 	bic.w	r5, r5, #3
 8005060:	3508      	adds	r5, #8
 8005062:	2d0c      	cmp	r5, #12
 8005064:	bf38      	it	cc
 8005066:	250c      	movcc	r5, #12
 8005068:	2d00      	cmp	r5, #0
 800506a:	4606      	mov	r6, r0
 800506c:	db01      	blt.n	8005072 <_malloc_r+0x1a>
 800506e:	42a9      	cmp	r1, r5
 8005070:	d903      	bls.n	800507a <_malloc_r+0x22>
 8005072:	230c      	movs	r3, #12
 8005074:	6033      	str	r3, [r6, #0]
 8005076:	2000      	movs	r0, #0
 8005078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800507a:	f000 f8f1 	bl	8005260 <__malloc_lock>
 800507e:	4921      	ldr	r1, [pc, #132]	; (8005104 <_malloc_r+0xac>)
 8005080:	680a      	ldr	r2, [r1, #0]
 8005082:	4614      	mov	r4, r2
 8005084:	b99c      	cbnz	r4, 80050ae <_malloc_r+0x56>
 8005086:	4f20      	ldr	r7, [pc, #128]	; (8005108 <_malloc_r+0xb0>)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	b923      	cbnz	r3, 8005096 <_malloc_r+0x3e>
 800508c:	4621      	mov	r1, r4
 800508e:	4630      	mov	r0, r6
 8005090:	f000 f83c 	bl	800510c <_sbrk_r>
 8005094:	6038      	str	r0, [r7, #0]
 8005096:	4629      	mov	r1, r5
 8005098:	4630      	mov	r0, r6
 800509a:	f000 f837 	bl	800510c <_sbrk_r>
 800509e:	1c43      	adds	r3, r0, #1
 80050a0:	d123      	bne.n	80050ea <_malloc_r+0x92>
 80050a2:	230c      	movs	r3, #12
 80050a4:	4630      	mov	r0, r6
 80050a6:	6033      	str	r3, [r6, #0]
 80050a8:	f000 f8e0 	bl	800526c <__malloc_unlock>
 80050ac:	e7e3      	b.n	8005076 <_malloc_r+0x1e>
 80050ae:	6823      	ldr	r3, [r4, #0]
 80050b0:	1b5b      	subs	r3, r3, r5
 80050b2:	d417      	bmi.n	80050e4 <_malloc_r+0x8c>
 80050b4:	2b0b      	cmp	r3, #11
 80050b6:	d903      	bls.n	80050c0 <_malloc_r+0x68>
 80050b8:	6023      	str	r3, [r4, #0]
 80050ba:	441c      	add	r4, r3
 80050bc:	6025      	str	r5, [r4, #0]
 80050be:	e004      	b.n	80050ca <_malloc_r+0x72>
 80050c0:	6863      	ldr	r3, [r4, #4]
 80050c2:	42a2      	cmp	r2, r4
 80050c4:	bf0c      	ite	eq
 80050c6:	600b      	streq	r3, [r1, #0]
 80050c8:	6053      	strne	r3, [r2, #4]
 80050ca:	4630      	mov	r0, r6
 80050cc:	f000 f8ce 	bl	800526c <__malloc_unlock>
 80050d0:	f104 000b 	add.w	r0, r4, #11
 80050d4:	1d23      	adds	r3, r4, #4
 80050d6:	f020 0007 	bic.w	r0, r0, #7
 80050da:	1ac2      	subs	r2, r0, r3
 80050dc:	d0cc      	beq.n	8005078 <_malloc_r+0x20>
 80050de:	1a1b      	subs	r3, r3, r0
 80050e0:	50a3      	str	r3, [r4, r2]
 80050e2:	e7c9      	b.n	8005078 <_malloc_r+0x20>
 80050e4:	4622      	mov	r2, r4
 80050e6:	6864      	ldr	r4, [r4, #4]
 80050e8:	e7cc      	b.n	8005084 <_malloc_r+0x2c>
 80050ea:	1cc4      	adds	r4, r0, #3
 80050ec:	f024 0403 	bic.w	r4, r4, #3
 80050f0:	42a0      	cmp	r0, r4
 80050f2:	d0e3      	beq.n	80050bc <_malloc_r+0x64>
 80050f4:	1a21      	subs	r1, r4, r0
 80050f6:	4630      	mov	r0, r6
 80050f8:	f000 f808 	bl	800510c <_sbrk_r>
 80050fc:	3001      	adds	r0, #1
 80050fe:	d1dd      	bne.n	80050bc <_malloc_r+0x64>
 8005100:	e7cf      	b.n	80050a2 <_malloc_r+0x4a>
 8005102:	bf00      	nop
 8005104:	200000a4 	.word	0x200000a4
 8005108:	200000a8 	.word	0x200000a8

0800510c <_sbrk_r>:
 800510c:	b538      	push	{r3, r4, r5, lr}
 800510e:	2300      	movs	r3, #0
 8005110:	4d05      	ldr	r5, [pc, #20]	; (8005128 <_sbrk_r+0x1c>)
 8005112:	4604      	mov	r4, r0
 8005114:	4608      	mov	r0, r1
 8005116:	602b      	str	r3, [r5, #0]
 8005118:	f7fc f8f6 	bl	8001308 <_sbrk>
 800511c:	1c43      	adds	r3, r0, #1
 800511e:	d102      	bne.n	8005126 <_sbrk_r+0x1a>
 8005120:	682b      	ldr	r3, [r5, #0]
 8005122:	b103      	cbz	r3, 8005126 <_sbrk_r+0x1a>
 8005124:	6023      	str	r3, [r4, #0]
 8005126:	bd38      	pop	{r3, r4, r5, pc}
 8005128:	20000508 	.word	0x20000508

0800512c <__sread>:
 800512c:	b510      	push	{r4, lr}
 800512e:	460c      	mov	r4, r1
 8005130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005134:	f000 f8a0 	bl	8005278 <_read_r>
 8005138:	2800      	cmp	r0, #0
 800513a:	bfab      	itete	ge
 800513c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800513e:	89a3      	ldrhlt	r3, [r4, #12]
 8005140:	181b      	addge	r3, r3, r0
 8005142:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005146:	bfac      	ite	ge
 8005148:	6563      	strge	r3, [r4, #84]	; 0x54
 800514a:	81a3      	strhlt	r3, [r4, #12]
 800514c:	bd10      	pop	{r4, pc}

0800514e <__swrite>:
 800514e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005152:	461f      	mov	r7, r3
 8005154:	898b      	ldrh	r3, [r1, #12]
 8005156:	4605      	mov	r5, r0
 8005158:	05db      	lsls	r3, r3, #23
 800515a:	460c      	mov	r4, r1
 800515c:	4616      	mov	r6, r2
 800515e:	d505      	bpl.n	800516c <__swrite+0x1e>
 8005160:	2302      	movs	r3, #2
 8005162:	2200      	movs	r2, #0
 8005164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005168:	f000 f868 	bl	800523c <_lseek_r>
 800516c:	89a3      	ldrh	r3, [r4, #12]
 800516e:	4632      	mov	r2, r6
 8005170:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005174:	81a3      	strh	r3, [r4, #12]
 8005176:	4628      	mov	r0, r5
 8005178:	463b      	mov	r3, r7
 800517a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800517e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005182:	f000 b817 	b.w	80051b4 <_write_r>

08005186 <__sseek>:
 8005186:	b510      	push	{r4, lr}
 8005188:	460c      	mov	r4, r1
 800518a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800518e:	f000 f855 	bl	800523c <_lseek_r>
 8005192:	1c43      	adds	r3, r0, #1
 8005194:	89a3      	ldrh	r3, [r4, #12]
 8005196:	bf15      	itete	ne
 8005198:	6560      	strne	r0, [r4, #84]	; 0x54
 800519a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800519e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80051a2:	81a3      	strheq	r3, [r4, #12]
 80051a4:	bf18      	it	ne
 80051a6:	81a3      	strhne	r3, [r4, #12]
 80051a8:	bd10      	pop	{r4, pc}

080051aa <__sclose>:
 80051aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051ae:	f000 b813 	b.w	80051d8 <_close_r>
	...

080051b4 <_write_r>:
 80051b4:	b538      	push	{r3, r4, r5, lr}
 80051b6:	4604      	mov	r4, r0
 80051b8:	4608      	mov	r0, r1
 80051ba:	4611      	mov	r1, r2
 80051bc:	2200      	movs	r2, #0
 80051be:	4d05      	ldr	r5, [pc, #20]	; (80051d4 <_write_r+0x20>)
 80051c0:	602a      	str	r2, [r5, #0]
 80051c2:	461a      	mov	r2, r3
 80051c4:	f7fb f93e 	bl	8000444 <_write>
 80051c8:	1c43      	adds	r3, r0, #1
 80051ca:	d102      	bne.n	80051d2 <_write_r+0x1e>
 80051cc:	682b      	ldr	r3, [r5, #0]
 80051ce:	b103      	cbz	r3, 80051d2 <_write_r+0x1e>
 80051d0:	6023      	str	r3, [r4, #0]
 80051d2:	bd38      	pop	{r3, r4, r5, pc}
 80051d4:	20000508 	.word	0x20000508

080051d8 <_close_r>:
 80051d8:	b538      	push	{r3, r4, r5, lr}
 80051da:	2300      	movs	r3, #0
 80051dc:	4d05      	ldr	r5, [pc, #20]	; (80051f4 <_close_r+0x1c>)
 80051de:	4604      	mov	r4, r0
 80051e0:	4608      	mov	r0, r1
 80051e2:	602b      	str	r3, [r5, #0]
 80051e4:	f7fc f85f 	bl	80012a6 <_close>
 80051e8:	1c43      	adds	r3, r0, #1
 80051ea:	d102      	bne.n	80051f2 <_close_r+0x1a>
 80051ec:	682b      	ldr	r3, [r5, #0]
 80051ee:	b103      	cbz	r3, 80051f2 <_close_r+0x1a>
 80051f0:	6023      	str	r3, [r4, #0]
 80051f2:	bd38      	pop	{r3, r4, r5, pc}
 80051f4:	20000508 	.word	0x20000508

080051f8 <_fstat_r>:
 80051f8:	b538      	push	{r3, r4, r5, lr}
 80051fa:	2300      	movs	r3, #0
 80051fc:	4d06      	ldr	r5, [pc, #24]	; (8005218 <_fstat_r+0x20>)
 80051fe:	4604      	mov	r4, r0
 8005200:	4608      	mov	r0, r1
 8005202:	4611      	mov	r1, r2
 8005204:	602b      	str	r3, [r5, #0]
 8005206:	f7fc f859 	bl	80012bc <_fstat>
 800520a:	1c43      	adds	r3, r0, #1
 800520c:	d102      	bne.n	8005214 <_fstat_r+0x1c>
 800520e:	682b      	ldr	r3, [r5, #0]
 8005210:	b103      	cbz	r3, 8005214 <_fstat_r+0x1c>
 8005212:	6023      	str	r3, [r4, #0]
 8005214:	bd38      	pop	{r3, r4, r5, pc}
 8005216:	bf00      	nop
 8005218:	20000508 	.word	0x20000508

0800521c <_isatty_r>:
 800521c:	b538      	push	{r3, r4, r5, lr}
 800521e:	2300      	movs	r3, #0
 8005220:	4d05      	ldr	r5, [pc, #20]	; (8005238 <_isatty_r+0x1c>)
 8005222:	4604      	mov	r4, r0
 8005224:	4608      	mov	r0, r1
 8005226:	602b      	str	r3, [r5, #0]
 8005228:	f7fc f857 	bl	80012da <_isatty>
 800522c:	1c43      	adds	r3, r0, #1
 800522e:	d102      	bne.n	8005236 <_isatty_r+0x1a>
 8005230:	682b      	ldr	r3, [r5, #0]
 8005232:	b103      	cbz	r3, 8005236 <_isatty_r+0x1a>
 8005234:	6023      	str	r3, [r4, #0]
 8005236:	bd38      	pop	{r3, r4, r5, pc}
 8005238:	20000508 	.word	0x20000508

0800523c <_lseek_r>:
 800523c:	b538      	push	{r3, r4, r5, lr}
 800523e:	4604      	mov	r4, r0
 8005240:	4608      	mov	r0, r1
 8005242:	4611      	mov	r1, r2
 8005244:	2200      	movs	r2, #0
 8005246:	4d05      	ldr	r5, [pc, #20]	; (800525c <_lseek_r+0x20>)
 8005248:	602a      	str	r2, [r5, #0]
 800524a:	461a      	mov	r2, r3
 800524c:	f7fc f84f 	bl	80012ee <_lseek>
 8005250:	1c43      	adds	r3, r0, #1
 8005252:	d102      	bne.n	800525a <_lseek_r+0x1e>
 8005254:	682b      	ldr	r3, [r5, #0]
 8005256:	b103      	cbz	r3, 800525a <_lseek_r+0x1e>
 8005258:	6023      	str	r3, [r4, #0]
 800525a:	bd38      	pop	{r3, r4, r5, pc}
 800525c:	20000508 	.word	0x20000508

08005260 <__malloc_lock>:
 8005260:	4801      	ldr	r0, [pc, #4]	; (8005268 <__malloc_lock+0x8>)
 8005262:	f7ff be47 	b.w	8004ef4 <__retarget_lock_acquire_recursive>
 8005266:	bf00      	nop
 8005268:	20000500 	.word	0x20000500

0800526c <__malloc_unlock>:
 800526c:	4801      	ldr	r0, [pc, #4]	; (8005274 <__malloc_unlock+0x8>)
 800526e:	f7ff be42 	b.w	8004ef6 <__retarget_lock_release_recursive>
 8005272:	bf00      	nop
 8005274:	20000500 	.word	0x20000500

08005278 <_read_r>:
 8005278:	b538      	push	{r3, r4, r5, lr}
 800527a:	4604      	mov	r4, r0
 800527c:	4608      	mov	r0, r1
 800527e:	4611      	mov	r1, r2
 8005280:	2200      	movs	r2, #0
 8005282:	4d05      	ldr	r5, [pc, #20]	; (8005298 <_read_r+0x20>)
 8005284:	602a      	str	r2, [r5, #0]
 8005286:	461a      	mov	r2, r3
 8005288:	f7fb fff0 	bl	800126c <_read>
 800528c:	1c43      	adds	r3, r0, #1
 800528e:	d102      	bne.n	8005296 <_read_r+0x1e>
 8005290:	682b      	ldr	r3, [r5, #0]
 8005292:	b103      	cbz	r3, 8005296 <_read_r+0x1e>
 8005294:	6023      	str	r3, [r4, #0]
 8005296:	bd38      	pop	{r3, r4, r5, pc}
 8005298:	20000508 	.word	0x20000508

0800529c <_init>:
 800529c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529e:	bf00      	nop
 80052a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052a2:	bc08      	pop	{r3}
 80052a4:	469e      	mov	lr, r3
 80052a6:	4770      	bx	lr

080052a8 <_fini>:
 80052a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052aa:	bf00      	nop
 80052ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ae:	bc08      	pop	{r3}
 80052b0:	469e      	mov	lr, r3
 80052b2:	4770      	bx	lr
